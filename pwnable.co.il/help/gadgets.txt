0x0000000000465cfb: jo 0x65d0b; mov rsi, qword ptr [rsp + 0x10]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x000000000047540e: jo 0x75450; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x00000000004769fc: jo 0x76a00; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x000000000047b27d: jo 0x7b240; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000484a0b: jo 0x84a68; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000048879f: jo 0x887fc; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000040fe56: jo 0xfe78; mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x00000000004299c7: jp 0x299c9; add byte ptr [rax - 0x73], cl; adc eax, 0x21b2f; cmovne rax, rdx; ret; 
0x00000000004530ac: jp 0x530b4; add byte ptr [rax], al; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000045b5c2: jp 0x5b5be; inc dword ptr [rcx - 0x77]; ret 0xcde9; 
0x0000000000465cf7: jp 0x65d07; mov byte ptr [rax + 0xe], sil; mov rsi, qword ptr [rsp + 0x10]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x000000000046cb67: jp 0x6cb67; jmp qword ptr [rsi + 0xf]; 
0x00000000004836da: jp 0x83750; adc ecx, dword ptr [rdi]; mov dh, 0x45; add cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000412528: js 0x124f0; test dword ptr [rax], eax; idiv edi; jmp qword ptr [rax]; 
0x000000000041330e: js 0x132d7; test eax, edi; idiv bh; call qword ptr [rax]; 
0x000000000041b1ec: js 0x1b217; mov qword ptr [rbx + 0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000451923: js 0x518d6; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000452e2d: js 0x52e7c; mov eax, dword ptr [rdi + 0x10]; test r8, r8; jne 0x52e72; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452e82: js 0x52e94; test rdi, rdi; jne 0x53810; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452fc9: js 0x52fdb; test rdi, rdi; jne 0x53786; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453000: js 0x53012; test rdi, rdi; jne 0x53a38; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453037: js 0x53049; test rdi, rdi; jne 0x53758; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000045306e: js 0x53080; test rdi, rdi; jne 0x5386c; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000045314a: js 0x5315c; test rdi, rdi; jne 0x53924; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004531ef: js 0x53201; test rdi, rdi; jne 0x536a0; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453294: js 0x532a6; test rdi, rdi; jne 0x539ae; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453370: js 0x53382; test rdi, rdi; jne 0x53a66; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453415: js 0x53427; test rdi, rdi; jne 0x535ba; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000045344c: js 0x5345e; test rdi, rdi; jne 0x53a0a; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004534ed: js 0x534ff; test rdi, rdi; jne 0x5353f; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000045351c: js 0x5352e; test rdi, rdi; jne 0x53567; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004653f2: js 0x65f2a; mov rdi, qword ptr [rsp + 0x18]; mov rdx, rbp; mov rsi, r12; call rbx; 
0x000000000047540a: js 0x7541c; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000048bf1d: js 0x8bf22; add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000048db75: js 0x8dbd4; pop r12; ret; 
0x000000000048e27e: js 0x8e2a8; mov qword ptr [r9], r8; add rsp, 8; ret; 
0x000000000049070e: js 0x90712; add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000490723: js 0x90727; add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000049122e: js 0x91258; mov qword ptr [r9], r8; add rsp, 8; ret; 
0x0000000000492bce: js 0x92bf8; mov qword ptr [r9], r8; add rsp, 8; ret; 
0x000000000044589d: lar eax, word ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000427396: lar eax, word ptr [rax]; add byte ptr [rbp + 0x4c], bl; mov eax, eax; pop r12; pop r13; ret; 
0x000000000043ac0c: lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000043ae96: lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043ae26: lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043adb6: lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043ad46: lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043acd6: lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043ac66: lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b286: lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b216: lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b1a6: lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b136: lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b0c6: lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b056: lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043afe6: lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043af76: lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043af06: lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043a3f6: lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000043ab9c: lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043ab1c: lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043aa8c: lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043aa0c: lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a98c: lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a90c: lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a88c: lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a80c: lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a78c: lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a70c: lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a68c: lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a60c: lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a57c: lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a4ec: lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a45c: lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a3ec: lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000043ac16: lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000043aba1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043ab21: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043aa91: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043aa11: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a991: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a911: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a891: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a811: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a791: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a711: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a691: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a611: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a581: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a4f1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a461: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043ae9b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043ae2b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043adbb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043ad4b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043acdb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043ac6b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b28b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b21b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b1ab: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b13b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b0cb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b05b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043afeb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043af7b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043af0b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000481c95: lea eax, [rax + 1]; mov qword ptr [rip + 0x41671], rax; ret; 
0x000000000048e29c: lea eax, [rax + 8]; mov qword ptr [rcx], r8; ret; 
0x0000000000431284: lea eax, [rax + rdi + 0x10]; ret; 
0x0000000000431294: lea eax, [rax + rdi + 0x20]; ret; 
0x0000000000431264: lea eax, [rax + rdi - 0x10]; ret; 
0x000000000047dd53: lea eax, [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], edx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000047dd21: lea eax, [rax + rdx*4]; mov dword ptr [rdi + 0x2fc], ecx; mov qword ptr [rdi + 0x310], rax; ret; 
0x000000000042827d: lea eax, [rax - 0x10]; ret; 
0x0000000000418926: lea eax, [rbp + 0x31]; sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000046156c: lea eax, [rbx]; add al, ch; or al, 0x1b; cli; jmp qword ptr [rsi + 0x2e]; 
0x00000000004766bd: lea eax, [rcx + rsi]; ret; 
0x000000000044cf84: lea eax, [rcx - 1]; ret; 
0x000000000044ac4c: lea eax, [rdi + 0x10]; ret; 
0x000000000044ac61: lea eax, [rdi + 0x11]; ret; 
0x000000000044ac7f: lea eax, [rdi + 0x12]; ret; 
0x000000000044ac9f: lea eax, [rdi + 0x13]; ret; 
0x000000000044acc2: lea eax, [rdi + 0x14]; ret; 
0x000000000044ace1: lea eax, [rdi + 0x15]; ret; 
0x000000000044ad01: lea eax, [rdi + 0x16]; ret; 
0x000000000044ad21: lea eax, [rdi + 0x17]; ret; 
0x000000000044ad44: lea eax, [rdi + 0x18]; ret; 
0x000000000044ad69: lea eax, [rdi + 0x19]; ret; 
0x000000000044ad87: lea eax, [rdi + 0x1a]; ret; 
0x000000000044ada7: lea eax, [rdi + 0x1b]; ret; 
0x000000000044adc3: lea eax, [rdi + 0x1c]; ret; 
0x000000000044ade3: lea eax, [rdi + 0x1d]; ret; 
0x000000000044ae03: lea eax, [rdi + 0x1e]; ret; 
0x000000000044ae23: lea eax, [rdi + 0x1f]; ret; 
0x000000000044ab9d: lea eax, [rdi + 0xa]; ret; 
0x000000000044abbd: lea eax, [rdi + 0xb]; ret; 
0x000000000044abdf: lea eax, [rdi + 0xc]; ret; 
0x000000000044abff: lea eax, [rdi + 0xd]; ret; 
0x000000000044ac1f: lea eax, [rdi + 0xe]; ret; 
0x000000000044ac39: lea eax, [rdi + 0xf]; ret; 
0x000000000044aae7: lea eax, [rdi + 1]; ret; 
0x000000000044b127: lea eax, [rdi + 1]; vzeroupper; ret; 
0x000000000044aafa: lea eax, [rdi + 2]; ret; 
0x000000000044b13b: lea eax, [rdi + 2]; vzeroupper; ret; 
0x000000000044ab05: lea eax, [rdi + 3]; ret; 
0x000000000044b155: lea eax, [rdi + 3]; vzeroupper; ret; 
0x000000000044ab18: lea eax, [rdi + 4]; ret; 
0x000000000044ab2d: lea eax, [rdi + 5]; ret; 
0x000000000044ab4b: lea eax, [rdi + 6]; ret; 
0x000000000044ab57: lea eax, [rdi + 7]; ret; 
0x000000000044ab6a: lea eax, [rdi + 8]; ret; 
0x000000000044ab7f: lea eax, [rdi + 9]; ret; 
0x00000000004761b9: lea eax, [rdi + rax + 0x10]; ret; 
0x0000000000446127: lea eax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000004761c9: lea eax, [rdi + rax + 0x20]; ret; 
0x000000000043124d: lea eax, [rdi + rax + 0x30]; ret; 
0x0000000000446147: lea eax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000446185: lea eax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000476905: lea eax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000445b80: lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000445fed: lea eax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000445dab: lea eax, [rdi + rax]; ret; 
0x000000000044b16d: lea eax, [rdi + rdx]; vzeroupper; ret; 
0x00000000004765b9: lea eax, [rdi + rsi]; ret; 
0x00000000004842fc: lea eax, [rdi - 1]; cmp rax, -3; jbe 0x84310; ret; 
0x000000000046a260: lea eax, [rdi - 1]; xor edx, edx; div ecx; add r8d, eax; mov eax, r8d; ret; 
0x000000000044aad3: lea eax, [rdi]; ret; 
0x000000000044b0a5: lea eax, [rdi]; vzeroupper; ret; 
0x000000000044a0ad: lea eax, [rdx + 0xa]; ret; 
0x000000000044a0cd: lea eax, [rdx + 0xb]; ret; 
0x000000000044a0ef: lea eax, [rdx + 0xc]; ret; 
0x000000000044a10f: lea eax, [rdx + 0xd]; ret; 
0x000000000044a12f: lea eax, [rdx + 0xe]; ret; 
0x0000000000449fbf: lea eax, [rdx + 0xf]; ret; 
0x0000000000449fe7: lea eax, [rdx + 1]; ret; 
0x0000000000449ffd: lea eax, [rdx + 2]; ret; 
0x000000000044a015: lea eax, [rdx + 3]; ret; 
0x000000000044a02b: lea eax, [rdx + 4]; ret; 
0x000000000044a03d: lea eax, [rdx + 5]; ret; 
0x000000000044a05b: lea eax, [rdx + 6]; ret; 
0x000000000048e291: lea eax, [rdx + 7]; and rax, 0xfffffffffffffff8; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [rcx], r8; ret; 
0x0000000000449f67: lea eax, [rdx + 7]; ret; 
0x000000000044a06d: lea eax, [rdx + 8]; ret; 
0x000000000044a08d: lea eax, [rdx + 9]; ret; 
0x0000000000487cd2: lea eax, [rdx + rcx]; cmp rax, qword ptr [rip + 0x3b3f4]; jae 0x87cea; mov rdx, qword ptr [rip + 0x3b3f3]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000041f83e: lea eax, [rdx + rdi]; ret; 
0x000000000044e913: lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x0000000000449fd5: lea eax, [rdx]; ret; 
0x0000000000429cb6: lea eax, [rip + 0x148b4]; lea rdx, [rip + 0x16afd]; cmovne rax, rdx; ret; 
0x0000000000429dfa: lea eax, [rip + 0x1bf60]; cmove rax, rdx; ret; 
0x0000000000428dd3: lea eax, [rip + 0x1cd57]; lea rdx, [rip + 0x22400]; cmovne rax, rdx; ret; 
0x00000000004290da: lea eax, [rip + 0x1d2b0]; cmove rax, rdx; ret; 
0x000000000042911a: lea eax, [rip + 0x1d410]; cmove rax, rdx; ret; 
0x0000000000429c63: lea eax, [rip + 0x1d427]; lea rdx, [rip + 0x1ecc0]; cmovne rax, rdx; ret; 
0x0000000000428e93: lea eax, [rip + 0x1e107]; lea rdx, [rip + 0x1e2e0]; cmovne rax, rdx; ret; 
0x0000000000429983: lea eax, [rip + 0x232e7]; cmove rax, rdx; ret; 
0x0000000000429d7f: lea eax, [rip + 0x238db]; cmove rax, rdx; ret; 
0x0000000000429c0f: lea eax, [rip + 0x23a3b]; cmove rax, rdx; ret; 
0x0000000000429aaf: lea eax, [rip + 0x23bab]; cmove rax, rdx; ret; 
0x0000000000429d11: lea eax, [rip + 0x23ca9]; cmove rax, rdx; ret; 
0x0000000000429ba1: lea eax, [rip + 0x23e09]; cmove rax, rdx; ret; 
0x0000000000429a41: lea eax, [rip + 0x23f79]; cmove rax, rdx; ret; 
0x0000000000429d63: lea eax, [rip + 0x24097]; cmove rax, rdx; ret; 
0x0000000000429bf3: lea eax, [rip + 0x241f7]; cmove rax, rdx; ret; 
0x0000000000428ec3: lea eax, [rip + 0x24247]; cmovne rax, rdx; ret; 
0x0000000000429a93: lea eax, [rip + 0x24367]; cmove rax, rdx; ret; 
0x0000000000429b2a: lea eax, [rip + 0x247e0]; cmovne rax, rdx; ret; 
0x0000000000429b0b: lea eax, [rip + 0x249cf]; cmove rax, rdx; ret; 
0x0000000000429b53: lea eax, [rip + 0x24b17]; cmove rax, rdx; ret; 
0x00000000004769fa: lea eax, [rip + 0x270]; cmove rax, rdx; ret; 
0x000000000042249f: lea eax, [rip + 0x319b]; mov qword ptr [rip + 0x9e2d4], rax; ret; 
0x0000000000422491: lea eax, [rip + 0x3429]; mov qword ptr [rip + 0x9e2ea], rax; lea rax, [rip + 0x319b]; mov qword ptr [rip + 0x9e2d4], rax; ret; 
0x000000000042917d: lea eax, [rip + 0x3a3d]; lea rdx, [rip + 0x5296]; cmovne rax, rdx; ret; 
0x0000000000487211: lea eax, [rip + 0x3bdc9]; mov qword ptr [rip + 0x3bdaa], rax; ret; 
0x00000000004871fa: lea eax, [rip + 0x3bde0]; mov qword ptr [rip + 0x3bdc1], rax; add rsp, 8; ret; 
0x0000000000470b45: lea eax, [rip + 0x4d175]; mov r11, rcx; mov dword ptr [rbp - 0x4d0], 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004708dd: lea eax, [rip + 0x4d5dd]; mov r11, rcx; mov dword ptr [rbp - 0x4e8], 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000046335d: lea eax, [rip + 0x5c8dd]; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x6336e; call rax; 
0x00000000004630d7: lea eax, [rip + 0x5cb63]; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x630e8; call rax; 
0x00000000004879c3: lea eax, [rip + 0x67]; cmovne rax, rdx; ret; 
0x0000000000455e95: lea eax, [rip + 0x6b385]; ret; 
0x0000000000429dba: lea eax, [rip + 0x72d0]; cmove rax, rdx; ret; 
0x00000000004299c4: lea eax, [rip + 0x7a26]; lea rdx, [rip + 0x21b2f]; cmovne rax, rdx; ret; 
0x00000000004299e9: lea eax, [rip + 0x7e01]; test byte ptr [rip + 0x9938f], 1; je 0x299b1; ret; 
0x00000000004756aa: lea eax, [rip + 0x810]; cmove rax, rdx; ret; 
0x00000000004769ba: lea eax, [rip + 0x8b0]; cmove rax, rdx; ret; 
0x0000000000429d32: lea eax, [rip + 0x9508]; lea rdx, [rip + 0xea91]; cmovne rax, rdx; ret; 
0x0000000000429bc2: lea eax, [rip + 0x9658]; lea rdx, [rip + 0xebe1]; cmovne rax, rdx; ret; 
0x000000000042239a: lea eax, [rip + 0x9e400]; add rsp, 0x10; pop rbp; ret; 
0x000000000041504f: lea eax, [rip + 0xa81cb]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000041459f: lea eax, [rip + 0xa8e7b]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x0000000000429a62: lea eax, [rip + 0xc1b8]; lea rdx, [rip + 0x11851]; cmovne rax, rdx; ret; 
0x000000000044f423: lea eax, [rip + 0xcb7]; lea rdx, [rip + 0xa90]; cmovne rax, rdx; ret; 
0x00000000004755ea: lea eax, [rip + 0xed0]; cmove rax, rdx; ret; 
0x0000000000428e33: lea eax, [rip + 0xfd7]; lea rdx, [rip + 0x26d0]; cmovne rax, rdx; ret; 
0x000000000042629b: lea eax, [rip - 0x9e1]; mov qword ptr [rip + 0x9a4e0], rax; lea rax, [rip - 0xc6f]; mov qword ptr [rip + 0x9a4ca], rax; ret; 
0x00000000004262a9: lea eax, [rip - 0xc6f]; mov qword ptr [rip + 0x9a4ca], rax; ret; 
0x0000000000451590: lea eax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; cmp esi, 9; je 0x515c8; mov eax, 0x48; syscall; 
0x0000000000489555: lea ebx, [rbp + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x00000000004683ce: lea ebx, [rdi + rdi*8 - 1]; jmp qword ptr [rsi + 0xf]; 
0x000000000041357a: lea ebx, [rdi + rsi*8 - 1]; jmp qword ptr [rsi - 0x77]; 
0x0000000000490f9f: lea ebx, [rsp + rcx*8]; mov rsi, qword ptr [rbx]; call rax; 
0x0000000000424c48: lea ecx, [r8 + 0x280]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbp; ret; 
0x0000000000424c49: lea ecx, [rax + 0x280]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbp; ret; 
0x0000000000476beb: lea ecx, [rax + 1]; lea r9, [rsp + 0x28]; call rbx; 
0x000000000044effe: lea ecx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000004178d5: lea ecx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000044aac1: lea ecx, [rbx + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000044a491: lea ecx, [rbx + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000042fcf0: lea ecx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000445ac9: lea ecx, [rip + 0x55ef1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000004446b4: lea ecx, [rip + 0x57306]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000444449: lea ecx, [rip + 0x57571]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000442b74: lea ecx, [rip + 0x58e46]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000041b2c6: lea ecx, [rip + 0xa6a14]; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x000000000045464e: lea ecx, [rip - 0x64]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000454366: lea ecx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000045434b: lea ecx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x54360; ret; 
0x000000000044d699: lea ecx, [rsi + rdx]; cmp rdi, r9; jb 0x4d808; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044da04: lea ecx, [rsi + rdx]; cmp rdi, r9; jb 0x4dbd5; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044de4f: lea ecx, [rsi + rdx]; cmp rdi, r9; jb 0x4e090; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000046dcb4: lea ecx, [rsi + rsi*8 - 0x76b30001]; ret 0x894c; 
0x000000000044ef92: lea ecx, [rsp + 0x20]; call rbx; 
0x0000000000476bef: lea ecx, [rsp + 0x28]; call rbx; 
0x000000000044f1cd: lea ecx, [rsp + 0x30]; call rbx; 
0x000000000046541d: lea edi, [rax + rsi]; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x000000000040febf: lea edi, [rax]; or eax, dword ptr [rax]; syscall; 
0x0000000000454d21: lea edi, [rcx + rsi + 0x20]; jmp rdx; 
0x000000000044d633: lea edi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000004639c0: lea edi, [rdi + rdi*8 - 1]; dec dword ptr [rcx + 1]; ret 0x8d48; 
0x0000000000414d11: lea edi, [rdx + rdi*8 - 0x76b60001]; ret; 
0x00000000004882c5: lea edi, [rip + 0x27c25]; call 0x3080; endbr64; ret; 
0x0000000000494908: lea edi, [rip + 0x2e612]; syscall; 
0x0000000000454c71: lea edi, [rip + 0x44441]; mov eax, 0x15; syscall; 
0x000000000046c788: lea edi, [rip + 0x567a2]; syscall; 
0x000000000046c504: lea edi, [rip + 0x56a22]; syscall; 
0x000000000046a480: lea edi, [rip + 0x58a9e]; syscall; 
0x000000000046a340: lea edi, [rip + 0x58bde]; syscall; 
0x0000000000466878: lea edi, [rip + 0x5c6a2]; syscall; 
0x00000000004667b3: lea edi, [rip + 0x5c767]; syscall; 
0x0000000000466611: lea edi, [rip + 0x5c909]; syscall; 
0x0000000000466537: lea edi, [rip + 0x5c9e3]; syscall; 
0x0000000000458748: lea edi, [rip + 0x6b162]; syscall; 
0x00000000004585dc: lea edi, [rip + 0x6b2ce]; syscall; 
0x00000000004584bc: lea edi, [rip + 0x6b3ee]; syscall; 
0x000000000044fa24: lea edi, [rip + 0x73e86]; syscall; 
0x0000000000410102: lea edi, [rip + 0x85745]; call 0x3080; xor r8d, r8d; mov rax, r8; ret; 
0x0000000000428884: lea edi, [rip + 0x97f16]; syscall; 
0x0000000000425c84: lea edi, [rip + 0x9ab16]; syscall; 
0x0000000000425c24: lea edi, [rip + 0x9ab76]; syscall; 
0x0000000000425864: lea edi, [rip + 0x9af36]; syscall; 
0x0000000000425604: lea edi, [rip + 0x9b196]; syscall; 
0x000000000042502c: lea edi, [rip + 0x9b76e]; syscall; 
0x000000000042502c: lea edi, [rip + 0x9b76e]; syscall; pop rbp; ret; 
0x0000000000424ff4: lea edi, [rip + 0x9b7a6]; syscall; 
0x0000000000426be4: lea edi, [rip + 0x9c0c6]; syscall; 
0x0000000000426198: lea edi, [rip + 0x9cb02]; syscall; 
0x0000000000426198: lea edi, [rip + 0x9cb02]; syscall; pop rbx; ret; 
0x00000000004222f5: lea edi, [rip + 0xa09a5]; syscall; 
0x00000000004222c4: lea edi, [rip + 0xa09e6]; syscall; 
0x0000000000422044: lea edi, [rip + 0xa0c66]; syscall; 
0x0000000000421b20: lea edi, [rip + 0xa118a]; syscall; 
0x0000000000420736: lea edi, [rip + 0xa24f4]; syscall; 
0x0000000000420736: lea edi, [rip + 0xa24f4]; syscall; ret; 
0x0000000000420176: lea edi, [rip + 0xa2ab4]; syscall; 
0x000000000041fe0a: lea edi, [rip + 0xa2e20]; syscall; 
0x000000000041fac8: lea edi, [rip + 0xa3162]; syscall; 
0x000000000041e562: lea edi, [rip + 0xa46c8]; syscall; 
0x000000000041e2c2: lea edi, [rip + 0xa4968]; syscall; 
0x000000000041df6e: lea edi, [rip + 0xa4cbc]; syscall; 
0x000000000041df6e: lea edi, [rip + 0xa4cbc]; syscall; ret; 
0x0000000000418244: lea edi, [rip + 0xab666]; syscall; 
0x0000000000410353: lea edi, [rip + 0xb33f7]; syscall; 
0x0000000000410213: lea edi, [rip + 0xb3537]; syscall; 
0x000000000040ffdc: lea edi, [rip + 0xb376e]; syscall; 
0x000000000040ffa1: lea edi, [rip + 0xb37a9]; syscall; 
0x000000000040febd: lea edi, [rip + 0xb388d]; syscall; 
0x00000000004068f1: lea edi, [rip + 0xbbec1]; syscall; 
0x0000000000404f4e: lea edi, [rip + 0xbd82c]; syscall; 
0x0000000000403def: lea edi, [rip + 0xbe8e3]; syscall; 
0x0000000000403dd2: lea edi, [rip + 0xbe900]; syscall; 
0x0000000000403cfc: lea edi, [rip + 0xbe9d6]; syscall; 
0x00000000004012cd: lea edi, [rip + 0xc14fd]; syscall; 
0x000000000041ed6a: lea edi, [rsi + 1]; mov rdi, r12; call qword ptr [rbx + 0x18]; 
0x0000000000421194: lea edx, [rax + 1]; mov qword ptr [rip + 0x9f5b2], rdx; ret; 
0x0000000000475405: lea edx, [rax + rdx*4]; mov qword ptr [rax + 0x10], rdi; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x00000000004753d4: lea edx, [rax + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000048954d: lea edx, [rax - 1]; test eax, eax; je 0x8956e; lea rbx, [rbp + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x000000000046d155: lea edx, [rax]; idiv edi; dec dword ptr [rcx + rcx*4 - 0x36]; mov rsi, r12; mov rdi, r13; call qword ptr [rcx + 0x38]; 
0x00000000004668bf: lea edx, [rbx + 0x1f0ffffa]; add byte ptr [rax], r8b; xor eax, eax; ret; 
0x00000000004178d9: lea edx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000429a69: lea edx, [rip + 0x11851]; cmovne rax, rdx; ret; 
0x00000000004755e3: lea edx, [rip + 0x11d7]; lea rax, [rip + 0xed0]; cmove rax, rdx; ret; 
0x00000000004879bc: lea edx, [rip + 0x11e]; lea rax, [rip + 0x67]; cmovne rax, rdx; ret; 
0x0000000000429cbd: lea edx, [rip + 0x16afd]; cmovne rax, rdx; ret; 
0x00000000004290d3: lea edx, [rip + 0x1d677]; lea rax, [rip + 0x1d2b0]; cmove rax, rdx; ret; 
0x0000000000429113: lea edx, [rip + 0x1d7d7]; lea rax, [rip + 0x1d410]; cmove rax, rdx; ret; 
0x0000000000428e9a: lea edx, [rip + 0x1e2e0]; cmovne rax, rdx; ret; 
0x0000000000429c6a: lea edx, [rip + 0x1ecc0]; cmovne rax, rdx; ret; 
0x00000000004299cb: lea edx, [rip + 0x21b2f]; cmovne rax, rdx; ret; 
0x0000000000428dda: lea edx, [rip + 0x22400]; cmovne rax, rdx; ret; 
0x0000000000429d78: lea edx, [rip + 0x23822]; lea rax, [rip + 0x238db]; cmove rax, rdx; ret; 
0x0000000000429c08: lea edx, [rip + 0x23982]; lea rax, [rip + 0x23a3b]; cmove rax, rdx; ret; 
0x0000000000429aa8: lea edx, [rip + 0x23af2]; lea rax, [rip + 0x23bab]; cmove rax, rdx; ret; 
0x0000000000429d0a: lea edx, [rip + 0x23c60]; lea rax, [rip + 0x23ca9]; cmove rax, rdx; ret; 
0x0000000000429b9a: lea edx, [rip + 0x23dc0]; lea rax, [rip + 0x23e09]; cmove rax, rdx; ret; 
0x0000000000429a3a: lea edx, [rip + 0x23f30]; lea rax, [rip + 0x23f79]; cmove rax, rdx; ret; 
0x0000000000429d5c: lea edx, [rip + 0x2404e]; lea rax, [rip + 0x24097]; cmove rax, rdx; ret; 
0x0000000000429bec: lea edx, [rip + 0x241ae]; lea rax, [rip + 0x241f7]; cmove rax, rdx; ret; 
0x0000000000428ebc: lea edx, [rip + 0x242fe]; lea rax, [rip + 0x24247]; cmovne rax, rdx; ret; 
0x0000000000429a8c: lea edx, [rip + 0x2431e]; lea rax, [rip + 0x24367]; cmove rax, rdx; ret; 
0x0000000000429b23: lea edx, [rip + 0x24857]; lea rax, [rip + 0x247e0]; cmovne rax, rdx; ret; 
0x0000000000429b04: lea edx, [rip + 0x24986]; lea rax, [rip + 0x249cf]; cmove rax, rdx; ret; 
0x0000000000429b4c: lea edx, [rip + 0x24abe]; lea rax, [rip + 0x24b17]; cmove rax, rdx; ret; 
0x0000000000428e3a: lea edx, [rip + 0x26d0]; cmovne rax, rdx; ret; 
0x000000000048769a: lea edx, [rip + 0x3a400]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000429184: lea edx, [rip + 0x5296]; cmovne rax, rdx; ret; 
0x0000000000445b17: lea edx, [rip + 0x55ea3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000445afd: lea edx, [rip + 0x55ebd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000444497: lea edx, [rip + 0x57523]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044447d: lea edx, [rip + 0x5753d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004428e7: lea edx, [rip + 0x590d3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004428cd: lea edx, [rip + 0x590ed]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004769f3: lea edx, [rip + 0x5a7]; lea rax, [rip + 0x270]; cmove rax, rdx; ret; 
0x0000000000440787: lea edx, [rip + 0x5b233]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044076d: lea edx, [rip + 0x5b24d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000429db3: lea edx, [rip + 0x74e7]; lea rax, [rip + 0x72d0]; cmove rax, rdx; ret; 
0x000000000044f42a: lea edx, [rip + 0xa90]; cmovne rax, rdx; ret; 
0x00000000004756a3: lea edx, [rip + 0xb47]; lea rax, [rip + 0x810]; cmove rax, rdx; ret; 
0x00000000004769b3: lea edx, [rip + 0xb57]; lea rax, [rip + 0x8b0]; cmove rax, rdx; ret; 
0x0000000000429d39: lea edx, [rip + 0xea91]; cmovne rax, rdx; ret; 
0x0000000000429bc9: lea edx, [rip + 0xebe1]; cmovne rax, rdx; ret; 
0x000000000042997c: lea edx, [rip - 0x362]; lea rax, [rip + 0x232e7]; cmove rax, rdx; ret; 
0x000000000044d627: lea edx, [rsi + rcx]; cmp rdi, rdx; jb 0x4d632; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004515c9: lea edx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000046edc8: lea esi, [rax]; idiv edi; inc dword ptr [rcx - 1]; push rsp; ret; 
0x00000000004807f4: lea esi, [rbp - 0x430]; mov eax, 0x14; syscall; 
0x000000000048ce36: lea esi, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x0000000000402ce2: lea esi, [rcx + rbx]; mov qword ptr [rsi + 8], rax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004882be: lea esi, [rip + 0x27c18]; lea rdi, [rip + 0x27c25]; call 0x3080; endbr64; ret; 
0x000000000048ae69: lea esi, [rip + 0x38a11]; mov edi, 0x3005; mov eax, 0x9e; syscall; 
0x0000000000470de0: lea esi, [rip + 0x4cfda]; mov dword ptr [rbp - 0x530], 1; mov dword ptr [rbp - 0x4e8], 0; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470e65: lea esi, [rip + 0x4d355]; mov r11, rcx; mov dword ptr [rbp - 0x508], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470e2b: lea esi, [rip + 0x4d38f]; mov r11, rcx; mov dword ptr [rbp - 0x520], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470d5d: lea esi, [rip + 0x4d45d]; mov r11, rcx; mov dword ptr [rbp - 0x4f8], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470d18: lea esi, [rip + 0x4d4a2]; mov dword ptr [rbp - 0x4e0], 1; mov dword ptr [rbp - 0x4f0], 0x20; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000047071d: lea esi, [rip + 0x4da9d]; mov r11, rcx; mov dword ptr [rbp - 0x514], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000047069d: lea esi, [rip + 0x4db1d]; mov r11, rcx; mov dword ptr [rbp - 0x528], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000046fcc5: lea esi, [rip + 0x4e0f5]; mov r11, rcx; xor r9d, r9d; mov dword ptr [rbp - 0x4d0], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000044d638: lea esi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000492427: lea esi, [rsi - 1]; mov rax, qword ptr [rsp + 8]; mov rdx, r15; mov rsi, qword ptr [r12 + r14*8 + 0x10]; mov rdi, r13; call rax; 
0x00000000004023ef: lea esi, [rsp + 0x70]; mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x00000000004130b1: lea esp, [rax]; idiv edi; dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000040ff41: lea esp, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x00000000004653e5: lea esp, [rcx + rax]; mov r13, rax; mov rdi, r12; call rbx; 
0x000000000040ff40: lea r12, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x00000000004653e4: lea r12, [rcx + rax]; mov r13, rax; mov rdi, r12; call rbx; 
0x0000000000492426: lea r14, [r14 - 1]; mov rax, qword ptr [rsp + 8]; mov rdx, r15; mov rsi, qword ptr [r12 + r14*8 + 0x10]; mov rdi, r13; call rax; 
0x000000000048ce35: lea r14, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x000000000041ed69: lea r15, [r14 + 1]; mov rdi, r12; call qword ptr [rbx + 0x18]; 
0x000000000046541c: lea r15, [rax + r14]; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x000000000041ed68: lea r15, ss:[r14 + 1]; mov rdi, r12; call qword ptr [rbx + 0x18]; 
0x000000000044d698: lea r9, [rsi + rdx]; cmp rdi, r9; jb 0x4d808; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044da03: lea r9, [rsi + rdx]; cmp rdi, r9; jb 0x4dbd5; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044de4e: lea r9, [rsi + rdx]; cmp rdi, r9; jb 0x4e090; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044ef91: lea r9, [rsp + 0x20]; call rbx; 
0x0000000000476bee: lea r9, [rsp + 0x28]; call rbx; 
0x000000000044f1cc: lea r9, [rsp + 0x30]; call rbx; 
0x0000000000481c94: lea rax, [r8 + 1]; mov qword ptr [rip + 0x41671], rax; ret; 
0x000000000048e29b: lea rax, [rax + 8]; mov qword ptr [rcx], r8; ret; 
0x0000000000431283: lea rax, [rax + rdi + 0x10]; ret; 
0x0000000000431293: lea rax, [rax + rdi + 0x20]; ret; 
0x0000000000431263: lea rax, [rax + rdi - 0x10]; ret; 
0x000000000047dd52: lea rax, [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], edx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000047dd20: lea rax, [rax + rdx*4]; mov dword ptr [rdi + 0x2fc], ecx; mov qword ptr [rdi + 0x310], rax; ret; 
0x000000000042827c: lea rax, [rax - 0x10]; ret; 
0x00000000004766bc: lea rax, [rcx + rsi]; ret; 
0x000000000044cf83: lea rax, [rcx - 1]; ret; 
0x000000000044ac4b: lea rax, [rdi + 0x10]; ret; 
0x000000000044ac60: lea rax, [rdi + 0x11]; ret; 
0x000000000044ac7e: lea rax, [rdi + 0x12]; ret; 
0x000000000044ac9e: lea rax, [rdi + 0x13]; ret; 
0x000000000044acc1: lea rax, [rdi + 0x14]; ret; 
0x000000000044ace0: lea rax, [rdi + 0x15]; ret; 
0x000000000044ad00: lea rax, [rdi + 0x16]; ret; 
0x000000000044ad20: lea rax, [rdi + 0x17]; ret; 
0x000000000044ad43: lea rax, [rdi + 0x18]; ret; 
0x000000000044ad68: lea rax, [rdi + 0x19]; ret; 
0x000000000044ad86: lea rax, [rdi + 0x1a]; ret; 
0x000000000044ada6: lea rax, [rdi + 0x1b]; ret; 
0x000000000044adc2: lea rax, [rdi + 0x1c]; ret; 
0x000000000044ade2: lea rax, [rdi + 0x1d]; ret; 
0x000000000044ae02: lea rax, [rdi + 0x1e]; ret; 
0x000000000044ae22: lea rax, [rdi + 0x1f]; ret; 
0x000000000044ab9c: lea rax, [rdi + 0xa]; ret; 
0x000000000044abbc: lea rax, [rdi + 0xb]; ret; 
0x000000000044abde: lea rax, [rdi + 0xc]; ret; 
0x000000000044abfe: lea rax, [rdi + 0xd]; ret; 
0x000000000044ac1e: lea rax, [rdi + 0xe]; ret; 
0x000000000044ac38: lea rax, [rdi + 0xf]; ret; 
0x000000000044aae6: lea rax, [rdi + 1]; ret; 
0x000000000044b126: lea rax, [rdi + 1]; vzeroupper; ret; 
0x000000000044aaf9: lea rax, [rdi + 2]; ret; 
0x000000000044b13a: lea rax, [rdi + 2]; vzeroupper; ret; 
0x000000000044ab04: lea rax, [rdi + 3]; ret; 
0x000000000044b154: lea rax, [rdi + 3]; vzeroupper; ret; 
0x000000000044ab17: lea rax, [rdi + 4]; ret; 
0x000000000044ab2c: lea rax, [rdi + 5]; ret; 
0x000000000044ab4a: lea rax, [rdi + 6]; ret; 
0x000000000044ab56: lea rax, [rdi + 7]; ret; 
0x000000000044ab69: lea rax, [rdi + 8]; ret; 
0x000000000044ab7e: lea rax, [rdi + 9]; ret; 
0x00000000004761b8: lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000446126: lea rax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000004761c8: lea rax, [rdi + rax + 0x20]; ret; 
0x000000000043124c: lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000446146: lea rax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000446184: lea rax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000476904: lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000445b7f: lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000445fec: lea rax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000445daa: lea rax, [rdi + rax]; ret; 
0x000000000044b16c: lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000004765b8: lea rax, [rdi + rsi]; ret; 
0x00000000004842fb: lea rax, [rdi - 1]; cmp rax, -3; jbe 0x84310; ret; 
0x000000000044aad2: lea rax, [rdi]; ret; 
0x000000000044b0a4: lea rax, [rdi]; vzeroupper; ret; 
0x000000000044a0ac: lea rax, [rdx + 0xa]; ret; 
0x000000000044a0cc: lea rax, [rdx + 0xb]; ret; 
0x000000000044a0ee: lea rax, [rdx + 0xc]; ret; 
0x000000000044a10e: lea rax, [rdx + 0xd]; ret; 
0x000000000044a12e: lea rax, [rdx + 0xe]; ret; 
0x0000000000449fbe: lea rax, [rdx + 0xf]; ret; 
0x0000000000449fe6: lea rax, [rdx + 1]; ret; 
0x0000000000449ffc: lea rax, [rdx + 2]; ret; 
0x000000000044a014: lea rax, [rdx + 3]; ret; 
0x000000000044a02a: lea rax, [rdx + 4]; ret; 
0x000000000044a03c: lea rax, [rdx + 5]; ret; 
0x000000000044a05a: lea rax, [rdx + 6]; ret; 
0x000000000048e290: lea rax, [rdx + 7]; and rax, 0xfffffffffffffff8; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [rcx], r8; ret; 
0x0000000000449f66: lea rax, [rdx + 7]; ret; 
0x000000000044a06c: lea rax, [rdx + 8]; ret; 
0x000000000044a08c: lea rax, [rdx + 9]; ret; 
0x0000000000487cd1: lea rax, [rdx + rcx]; cmp rax, qword ptr [rip + 0x3b3f4]; jae 0x87cea; mov rdx, qword ptr [rip + 0x3b3f3]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000449fd4: lea rax, [rdx]; ret; 
0x0000000000429cb5: lea rax, [rip + 0x148b4]; lea rdx, [rip + 0x16afd]; cmovne rax, rdx; ret; 
0x0000000000429df9: lea rax, [rip + 0x1bf60]; cmove rax, rdx; ret; 
0x0000000000428dd2: lea rax, [rip + 0x1cd57]; lea rdx, [rip + 0x22400]; cmovne rax, rdx; ret; 
0x00000000004290d9: lea rax, [rip + 0x1d2b0]; cmove rax, rdx; ret; 
0x0000000000429119: lea rax, [rip + 0x1d410]; cmove rax, rdx; ret; 
0x0000000000429c62: lea rax, [rip + 0x1d427]; lea rdx, [rip + 0x1ecc0]; cmovne rax, rdx; ret; 
0x0000000000428e92: lea rax, [rip + 0x1e107]; lea rdx, [rip + 0x1e2e0]; cmovne rax, rdx; ret; 
0x0000000000429982: lea rax, [rip + 0x232e7]; cmove rax, rdx; ret; 
0x0000000000429d7e: lea rax, [rip + 0x238db]; cmove rax, rdx; ret; 
0x0000000000429c0e: lea rax, [rip + 0x23a3b]; cmove rax, rdx; ret; 
0x0000000000429aae: lea rax, [rip + 0x23bab]; cmove rax, rdx; ret; 
0x0000000000429d10: lea rax, [rip + 0x23ca9]; cmove rax, rdx; ret; 
0x0000000000429ba0: lea rax, [rip + 0x23e09]; cmove rax, rdx; ret; 
0x0000000000429a40: lea rax, [rip + 0x23f79]; cmove rax, rdx; ret; 
0x0000000000429d62: lea rax, [rip + 0x24097]; cmove rax, rdx; ret; 
0x0000000000429bf2: lea rax, [rip + 0x241f7]; cmove rax, rdx; ret; 
0x0000000000428ec2: lea rax, [rip + 0x24247]; cmovne rax, rdx; ret; 
0x0000000000429a92: lea rax, [rip + 0x24367]; cmove rax, rdx; ret; 
0x0000000000429b29: lea rax, [rip + 0x247e0]; cmovne rax, rdx; ret; 
0x0000000000429b0a: lea rax, [rip + 0x249cf]; cmove rax, rdx; ret; 
0x0000000000429b52: lea rax, [rip + 0x24b17]; cmove rax, rdx; ret; 
0x00000000004769f9: lea rax, [rip + 0x270]; cmove rax, rdx; ret; 
0x000000000042249e: lea rax, [rip + 0x319b]; mov qword ptr [rip + 0x9e2d4], rax; ret; 
0x0000000000422490: lea rax, [rip + 0x3429]; mov qword ptr [rip + 0x9e2ea], rax; lea rax, [rip + 0x319b]; mov qword ptr [rip + 0x9e2d4], rax; ret; 
0x000000000042917c: lea rax, [rip + 0x3a3d]; lea rdx, [rip + 0x5296]; cmovne rax, rdx; ret; 
0x0000000000487210: lea rax, [rip + 0x3bdc9]; mov qword ptr [rip + 0x3bdaa], rax; ret; 
0x00000000004871f9: lea rax, [rip + 0x3bde0]; mov qword ptr [rip + 0x3bdc1], rax; add rsp, 8; ret; 
0x0000000000470b44: lea rax, [rip + 0x4d175]; mov r11, rcx; mov dword ptr [rbp - 0x4d0], 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004708dc: lea rax, [rip + 0x4d5dd]; mov r11, rcx; mov dword ptr [rbp - 0x4e8], 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000046335c: lea rax, [rip + 0x5c8dd]; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x6336e; call rax; 
0x00000000004630d6: lea rax, [rip + 0x5cb63]; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x630e8; call rax; 
0x00000000004879c2: lea rax, [rip + 0x67]; cmovne rax, rdx; ret; 
0x0000000000455e94: lea rax, [rip + 0x6b385]; ret; 
0x0000000000429db9: lea rax, [rip + 0x72d0]; cmove rax, rdx; ret; 
0x00000000004299c3: lea rax, [rip + 0x7a26]; lea rdx, [rip + 0x21b2f]; cmovne rax, rdx; ret; 
0x00000000004299e8: lea rax, [rip + 0x7e01]; test byte ptr [rip + 0x9938f], 1; je 0x299b1; ret; 
0x00000000004756a9: lea rax, [rip + 0x810]; cmove rax, rdx; ret; 
0x00000000004769b9: lea rax, [rip + 0x8b0]; cmove rax, rdx; ret; 
0x0000000000429d31: lea rax, [rip + 0x9508]; lea rdx, [rip + 0xea91]; cmovne rax, rdx; ret; 
0x0000000000429bc1: lea rax, [rip + 0x9658]; lea rdx, [rip + 0xebe1]; cmovne rax, rdx; ret; 
0x0000000000422399: lea rax, [rip + 0x9e400]; add rsp, 0x10; pop rbp; ret; 
0x000000000041504e: lea rax, [rip + 0xa81cb]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000041459e: lea rax, [rip + 0xa8e7b]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x0000000000429a61: lea rax, [rip + 0xc1b8]; lea rdx, [rip + 0x11851]; cmovne rax, rdx; ret; 
0x000000000044f422: lea rax, [rip + 0xcb7]; lea rdx, [rip + 0xa90]; cmovne rax, rdx; ret; 
0x00000000004755e9: lea rax, [rip + 0xed0]; cmove rax, rdx; ret; 
0x0000000000428e32: lea rax, [rip + 0xfd7]; lea rdx, [rip + 0x26d0]; cmovne rax, rdx; ret; 
0x000000000042629a: lea rax, [rip - 0x9e1]; mov qword ptr [rip + 0x9a4e0], rax; lea rax, [rip - 0xc6f]; mov qword ptr [rip + 0x9a4ca], rax; ret; 
0x00000000004262a8: lea rax, [rip - 0xc6f]; mov qword ptr [rip + 0x9a4ca], rax; ret; 
0x000000000045158f: lea rax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; cmp esi, 9; je 0x515c8; mov eax, 0x48; syscall; 
0x0000000000490f9e: lea rbx, [r12 + rcx*8]; mov rsi, qword ptr [rbx]; call rax; 
0x0000000000489554: lea rbx, [rbp + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x000000000044aac0: lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000044a490: lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000476bea: lea rcx, [rax + 1]; lea r9, [rsp + 0x28]; call rbx; 
0x000000000044effd: lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000004178d4: lea rcx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000042fcef: lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000445ac8: lea rcx, [rip + 0x55ef1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000004446b3: lea rcx, [rip + 0x57306]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000444448: lea rcx, [rip + 0x57571]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000442b73: lea rcx, [rip + 0x58e46]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000041b2c5: lea rcx, [rip + 0xa6a14]; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x000000000045464d: lea rcx, [rip - 0x64]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000454365: lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000045434a: lea rcx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x54360; ret; 
0x0000000000454d20: lea rdi, [rcx + rsi + 0x20]; jmp rdx; 
0x000000000044d632: lea rdi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000004882c4: lea rdi, [rip + 0x27c25]; call 0x3080; endbr64; ret; 
0x0000000000494907: lea rdi, [rip + 0x2e612]; syscall; 
0x0000000000454c70: lea rdi, [rip + 0x44441]; mov eax, 0x15; syscall; 
0x000000000046c787: lea rdi, [rip + 0x567a2]; syscall; 
0x000000000046c503: lea rdi, [rip + 0x56a22]; syscall; 
0x000000000046a47f: lea rdi, [rip + 0x58a9e]; syscall; 
0x000000000046a33f: lea rdi, [rip + 0x58bde]; syscall; 
0x0000000000466877: lea rdi, [rip + 0x5c6a2]; syscall; 
0x00000000004667b2: lea rdi, [rip + 0x5c767]; syscall; 
0x0000000000466610: lea rdi, [rip + 0x5c909]; syscall; 
0x0000000000466536: lea rdi, [rip + 0x5c9e3]; syscall; 
0x0000000000458747: lea rdi, [rip + 0x6b162]; syscall; 
0x00000000004585db: lea rdi, [rip + 0x6b2ce]; syscall; 
0x00000000004584bb: lea rdi, [rip + 0x6b3ee]; syscall; 
0x000000000044fa23: lea rdi, [rip + 0x73e86]; syscall; 
0x0000000000410101: lea rdi, [rip + 0x85745]; call 0x3080; xor r8d, r8d; mov rax, r8; ret; 
0x0000000000428883: lea rdi, [rip + 0x97f16]; syscall; 
0x0000000000425c83: lea rdi, [rip + 0x9ab16]; syscall; 
0x0000000000425c23: lea rdi, [rip + 0x9ab76]; syscall; 
0x0000000000425863: lea rdi, [rip + 0x9af36]; syscall; 
0x0000000000425603: lea rdi, [rip + 0x9b196]; syscall; 
0x000000000042502b: lea rdi, [rip + 0x9b76e]; syscall; 
0x000000000042502b: lea rdi, [rip + 0x9b76e]; syscall; pop rbp; ret; 
0x0000000000424ff3: lea rdi, [rip + 0x9b7a6]; syscall; 
0x0000000000426be3: lea rdi, [rip + 0x9c0c6]; syscall; 
0x0000000000426197: lea rdi, [rip + 0x9cb02]; syscall; 
0x0000000000426197: lea rdi, [rip + 0x9cb02]; syscall; pop rbx; ret; 
0x00000000004222f4: lea rdi, [rip + 0xa09a5]; syscall; 
0x00000000004222c3: lea rdi, [rip + 0xa09e6]; syscall; 
0x0000000000422043: lea rdi, [rip + 0xa0c66]; syscall; 
0x0000000000421b1f: lea rdi, [rip + 0xa118a]; syscall; 
0x0000000000420735: lea rdi, [rip + 0xa24f4]; syscall; 
0x0000000000420735: lea rdi, [rip + 0xa24f4]; syscall; ret; 
0x0000000000420175: lea rdi, [rip + 0xa2ab4]; syscall; 
0x000000000041fe09: lea rdi, [rip + 0xa2e20]; syscall; 
0x000000000041fac7: lea rdi, [rip + 0xa3162]; syscall; 
0x000000000041e561: lea rdi, [rip + 0xa46c8]; syscall; 
0x000000000041e2c1: lea rdi, [rip + 0xa4968]; syscall; 
0x000000000041df6d: lea rdi, [rip + 0xa4cbc]; syscall; 
0x000000000041df6d: lea rdi, [rip + 0xa4cbc]; syscall; ret; 
0x0000000000418243: lea rdi, [rip + 0xab666]; syscall; 
0x0000000000410352: lea rdi, [rip + 0xb33f7]; syscall; 
0x0000000000410212: lea rdi, [rip + 0xb3537]; syscall; 
0x000000000040ffdb: lea rdi, [rip + 0xb376e]; syscall; 
0x000000000040ffa0: lea rdi, [rip + 0xb37a9]; syscall; 
0x000000000040febc: lea rdi, [rip + 0xb388d]; syscall; 
0x00000000004068f0: lea rdi, [rip + 0xbbec1]; syscall; 
0x0000000000404f4d: lea rdi, [rip + 0xbd82c]; syscall; 
0x0000000000403dee: lea rdi, [rip + 0xbe8e3]; syscall; 
0x0000000000403dd1: lea rdi, [rip + 0xbe900]; syscall; 
0x0000000000403cfb: lea rdi, [rip + 0xbe9d6]; syscall; 
0x00000000004012cc: lea rdi, [rip + 0xc14fd]; syscall; 
0x0000000000475404: lea rdx, [r8 + rdx*4]; mov qword ptr [rax + 0x10], rdi; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x00000000004753d3: lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000421193: lea rdx, [rax + 1]; mov qword ptr [rip + 0x9f5b2], rdx; ret; 
0x00000000004178d8: lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000429a68: lea rdx, [rip + 0x11851]; cmovne rax, rdx; ret; 
0x00000000004755e2: lea rdx, [rip + 0x11d7]; lea rax, [rip + 0xed0]; cmove rax, rdx; ret; 
0x00000000004879bb: lea rdx, [rip + 0x11e]; lea rax, [rip + 0x67]; cmovne rax, rdx; ret; 
0x0000000000429cbc: lea rdx, [rip + 0x16afd]; cmovne rax, rdx; ret; 
0x00000000004290d2: lea rdx, [rip + 0x1d677]; lea rax, [rip + 0x1d2b0]; cmove rax, rdx; ret; 
0x0000000000429112: lea rdx, [rip + 0x1d7d7]; lea rax, [rip + 0x1d410]; cmove rax, rdx; ret; 
0x0000000000428e99: lea rdx, [rip + 0x1e2e0]; cmovne rax, rdx; ret; 
0x0000000000429c69: lea rdx, [rip + 0x1ecc0]; cmovne rax, rdx; ret; 
0x00000000004299ca: lea rdx, [rip + 0x21b2f]; cmovne rax, rdx; ret; 
0x0000000000428dd9: lea rdx, [rip + 0x22400]; cmovne rax, rdx; ret; 
0x0000000000429d77: lea rdx, [rip + 0x23822]; lea rax, [rip + 0x238db]; cmove rax, rdx; ret; 
0x0000000000429c07: lea rdx, [rip + 0x23982]; lea rax, [rip + 0x23a3b]; cmove rax, rdx; ret; 
0x0000000000429aa7: lea rdx, [rip + 0x23af2]; lea rax, [rip + 0x23bab]; cmove rax, rdx; ret; 
0x0000000000429d09: lea rdx, [rip + 0x23c60]; lea rax, [rip + 0x23ca9]; cmove rax, rdx; ret; 
0x0000000000429b99: lea rdx, [rip + 0x23dc0]; lea rax, [rip + 0x23e09]; cmove rax, rdx; ret; 
0x0000000000429a39: lea rdx, [rip + 0x23f30]; lea rax, [rip + 0x23f79]; cmove rax, rdx; ret; 
0x0000000000429d5b: lea rdx, [rip + 0x2404e]; lea rax, [rip + 0x24097]; cmove rax, rdx; ret; 
0x0000000000429beb: lea rdx, [rip + 0x241ae]; lea rax, [rip + 0x241f7]; cmove rax, rdx; ret; 
0x0000000000428ebb: lea rdx, [rip + 0x242fe]; lea rax, [rip + 0x24247]; cmovne rax, rdx; ret; 
0x0000000000429a8b: lea rdx, [rip + 0x2431e]; lea rax, [rip + 0x24367]; cmove rax, rdx; ret; 
0x0000000000429b22: lea rdx, [rip + 0x24857]; lea rax, [rip + 0x247e0]; cmovne rax, rdx; ret; 
0x0000000000429b03: lea rdx, [rip + 0x24986]; lea rax, [rip + 0x249cf]; cmove rax, rdx; ret; 
0x0000000000429b4b: lea rdx, [rip + 0x24abe]; lea rax, [rip + 0x24b17]; cmove rax, rdx; ret; 
0x0000000000428e39: lea rdx, [rip + 0x26d0]; cmovne rax, rdx; ret; 
0x0000000000487699: lea rdx, [rip + 0x3a400]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000429183: lea rdx, [rip + 0x5296]; cmovne rax, rdx; ret; 
0x0000000000445b16: lea rdx, [rip + 0x55ea3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000445afc: lea rdx, [rip + 0x55ebd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000444496: lea rdx, [rip + 0x57523]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044447c: lea rdx, [rip + 0x5753d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004428e6: lea rdx, [rip + 0x590d3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004428cc: lea rdx, [rip + 0x590ed]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004769f2: lea rdx, [rip + 0x5a7]; lea rax, [rip + 0x270]; cmove rax, rdx; ret; 
0x0000000000440786: lea rdx, [rip + 0x5b233]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044076c: lea rdx, [rip + 0x5b24d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000429db2: lea rdx, [rip + 0x74e7]; lea rax, [rip + 0x72d0]; cmove rax, rdx; ret; 
0x000000000044f429: lea rdx, [rip + 0xa90]; cmovne rax, rdx; ret; 
0x00000000004756a2: lea rdx, [rip + 0xb47]; lea rax, [rip + 0x810]; cmove rax, rdx; ret; 
0x00000000004769b2: lea rdx, [rip + 0xb57]; lea rax, [rip + 0x8b0]; cmove rax, rdx; ret; 
0x0000000000429d38: lea rdx, [rip + 0xea91]; cmovne rax, rdx; ret; 
0x0000000000429bc8: lea rdx, [rip + 0xebe1]; cmovne rax, rdx; ret; 
0x000000000042997b: lea rdx, [rip - 0x362]; lea rax, [rip + 0x232e7]; cmove rax, rdx; ret; 
0x000000000044d626: lea rdx, [rsi + rcx]; cmp rdi, rdx; jb 0x4d632; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004515c8: lea rdx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000004807f3: lea rsi, [rbp - 0x430]; mov eax, 0x14; syscall; 
0x0000000000402ce1: lea rsi, [rcx + rbx]; mov qword ptr [rsi + 8], rax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004882bd: lea rsi, [rip + 0x27c18]; lea rdi, [rip + 0x27c25]; call 0x3080; endbr64; ret; 
0x000000000048ae68: lea rsi, [rip + 0x38a11]; mov edi, 0x3005; mov eax, 0x9e; syscall; 
0x0000000000470ddf: lea rsi, [rip + 0x4cfda]; mov dword ptr [rbp - 0x530], 1; mov dword ptr [rbp - 0x4e8], 0; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470e64: lea rsi, [rip + 0x4d355]; mov r11, rcx; mov dword ptr [rbp - 0x508], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470e2a: lea rsi, [rip + 0x4d38f]; mov r11, rcx; mov dword ptr [rbp - 0x520], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470d5c: lea rsi, [rip + 0x4d45d]; mov r11, rcx; mov dword ptr [rbp - 0x4f8], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470d17: lea rsi, [rip + 0x4d4a2]; mov dword ptr [rbp - 0x4e0], 1; mov dword ptr [rbp - 0x4f0], 0x20; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000047071c: lea rsi, [rip + 0x4da9d]; mov r11, rcx; mov dword ptr [rbp - 0x514], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000047069c: lea rsi, [rip + 0x4db1d]; mov r11, rcx; mov dword ptr [rbp - 0x528], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000046fcc4: lea rsi, [rip + 0x4e0f5]; mov r11, rcx; xor r9d, r9d; mov dword ptr [rbp - 0x4d0], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000044d637: lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000004023ee: lea rsi, [rsp + 0x70]; mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x0000000000431fb0: lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000481bfb: lock inc dword ptr [r8 + 0x10]; pop rbx; pop rbp; ret; 
0x000000000044c6e0: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add dh, dh; ret 0x7501; 
0x000000000042fea4: lodsb al, byte ptr [rsi]; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000413d50: lodsb al, byte ptr [rsi]; ret 0xffbe; 
0x000000000047ced4: lodsb al, byte ptr [rsi]; cli; dec dword ptr [rcx - 0x77]; ret; 
0x00000000004882cd: lodsd eax, dword ptr [rsi]; idiv edi; endbr64; ret; 
0x0000000000417ffe: lodsd eax, dword ptr [rsi]; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000485942: lodsd eax, dword ptr [rsi]; ret; 
0x0000000000428e96: loope 0x28e99; add byte ptr [rax - 0x73], cl; adc eax, 0x1e2e0; cmovne rax, rdx; ret; 
0x00000000004028f8: loope 0x2933; ret 0x860f; 
0x0000000000429bcb: loope 0x29bb8; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x0000000000435887: loope 0x358d5; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004358cf: loope 0x3591d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043590d: loope 0x3595b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435945: loope 0x35993; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435983: loope 0x359d1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004359bb: loope 0x35a09; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004359e3: loope 0x35a31; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000438267: loope 0x382b5; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004382af: loope 0x382fd; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004382ed: loope 0x3833b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000438325: loope 0x38373; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000438363: loope 0x383b1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043839b: loope 0x383e9; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004383c3: loope 0x38411; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043a46a: loope 0x3a45f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000043cf9a: loope 0x3cf8f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000044651c: loope 0x4653e; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000446738: loope 0x4675a; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000044a496: loope 0x4a4fe; nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000044aac6: loope 0x4ab2e; nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000044b1d3: loope 0x4b21d; lea eax, [rdi + rdx]; vzeroupper; ret; 
0x000000000044b40b: loope 0x4b40d; add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x000000000044e899: loope 0x4e89b; cld; add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; ret; 
0x000000000044fc57: loope 0x4fca5; mov edx, ebp; call rbx; 
0x0000000000456d03: loope 0x56d08; pop r12; shl eax, cl; ret; 
0x0000000000457d94: loope 0x57d95; dec dword ptr [rax - 0x75]; jne 0x57d2b; mov rdi, rbx; call rsi; 
0x000000000047744e: loope 0x7745f; je 0x77470; ret; 
0x0000000000482321: loope 0x82327; cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x822d5; xor eax, eax; ret; 
0x00000000004857cb: loope 0x85819; mov dword ptr [rdi], ecx; ret; 
0x00000000004857fc: loope 0x8584a; mov dword ptr [rdi - 8], ecx; ret; 
0x000000000048587d: loope 0x858cb; mov dword ptr [rdi - 0x10], ecx; ret; 
0x00000000004903e4: loope 0x903a4; or al, byte ptr [rax]; add byte ptr [rax], al; mov edi, 1; call rax; 
0x000000000049040b: loope 0x903cb; or al, byte ptr [rax]; add byte ptr [rax], al; mov edi, 1; call rax; 
0x0000000000490461: loope 0x90421; sbb al, byte ptr [rax]; add byte ptr [rax], al; mov edi, 1; call rax; 
0x00000000004932de: loope 0x9333b; ret; 
0x000000000048e220: mov ah, 0x27; add al, byte ptr [rax]; divss xmm0, dword ptr [rip + 0x227b0]; ret; 
0x0000000000420178: mov ah, 0x2a; or al, byte ptr [rax]; syscall; 
0x0000000000429cb8: mov ah, 0x48; add dword ptr [rax], eax; lea rdx, [rip + 0x16afd]; cmovne rax, rdx; ret; 
0x000000000046c6bf: mov ah, 0x5b; mov eax, 1; pop rbp; pop r12; pop r13; ret; 
0x0000000000473aa6: mov ah, 0xdb; clc; jmp qword ptr [rsi + 0xf]; 
0x000000000048e3fb: mov al, 0; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000004905f7: mov al, 0; add byte ptr [rax], al; ret; 
0x000000000048e228: mov al, 0x27; add al, byte ptr [rax]; ret; 
0x00000000004517ec: mov al, 0x2d; add byte ptr [rax], al; endbr64; xor eax, eax; syscall; 
0x00000000004882cc: mov al, 0xad; idiv edi; endbr64; ret; 
0x000000000044616f: mov al, 0xc5; std; xlatb; ret; 
0x00000000004290dc: mov al, 0xd2; add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x000000000047fe45: mov al, 0xf; xchg ebp, eax; ret 0x2148; 
0x0000000000452de1: mov al, 2; add byte ptr [rax], al; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004769bc: mov al, 8; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x0000000000427c74: mov al, 9; add dh, dh; ret 0x7402; 
0x000000000048ae6c: mov al, byte ptr [rbx]; add byte ptr [rdi + 0x3005], bh; mov eax, 0x9e; syscall; 
0x0000000000449ff6: mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x0000000000448846: mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000044a024: mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x0000000000448864: mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x0000000000449fd0: mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x0000000000448820: mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x0000000000431970: mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x000000000044a034: mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x0000000000448874: mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000449fe0: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x0000000000449ff0: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x0000000000448840: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x0000000000448830: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000044b121: mov bh, 0x16; mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x000000000043b231: mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x0000000000446f01: mov bh, 0x16; mov word ptr [rdi], dx; vzeroupper; ret; 
0x000000000044d6e6: mov bh, 0x36; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x000000000044b2a8: mov bh, 0x48; lea eax, [rdi + 7]; ret; 
0x0000000000491e51: mov bh, 0x5d; and byte ptr [rsi - 9], ah; ret; 
0x0000000000413579: mov bh, 0x8d; pop rsp; idiv edi; jmp qword ptr [rsi - 0x77]; 
0x000000000044f425: mov bh, 0xc; add byte ptr [rax], al; lea rdx, [rip + 0xa90]; cmovne rax, rdx; ret; 
0x000000000044b131: mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000446f11: mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000454cc2: mov bh, 0xff; jmp qword ptr [rsi + 0x66]; 
0x000000000048acd2: mov bh, 0xff; nop dword ptr [rax]; add rsp, 8; ret; 
0x000000000047f7f5: mov bh, 2; add al, ch; ret; 
0x0000000000428abf: mov bh, bh; jmp qword ptr [rsi + 0xf]; 
0x000000000045a5d3: mov bh, dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000044cb9e: mov bl, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000041cf6e: mov bl, 0x90; endbr64; xor eax, eax; test rdx, rdx; jne 0x1cf80; ret; 
0x00000000004170cb: mov bl, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0x1b60; 
0x00000000004879b7: mov bl, 3; add byte ptr [rax], dl; lea rdx, [rip + 0x11e]; lea rax, [rip + 0x67]; cmovne rax, rdx; ret; 
0x0000000000487cd9: mov bl, 3; add byte ptr [rbx + 0xc], dh; mov rdx, qword ptr [rip + 0x3b3f3]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000453453: mov bl, 5; add byte ptr [rax], al; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000046275c: mov byte ptr [r12], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000042578b: mov byte ptr [r8 + rbp], cl; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x0000000000425594: mov byte ptr [r8 + rbx], cl; add rsp, 0x10; mov rax, r8; pop rbx; ret; 
0x000000000047ec5a: mov byte ptr [r8 - 0x7b], r9b; ror byte ptr [rdi], 0x84; ret; 
0x0000000000458de2: mov byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000047eedb: mov byte ptr [r9 - 0x77], r9b; ret 0x8949; 
0x000000000047e99e: mov byte ptr [r9 - 0x77], r9b; xchg dword ptr [rax], ebx; add al, 0; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000045470e: mov byte ptr [rax + 0x28], 1; ret; 
0x000000000044c7b7: mov byte ptr [rax + 0x75], 0xc5; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000465cfa: mov byte ptr [rax + 0xe], dh; mov rsi, qword ptr [rsp + 0x10]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x0000000000465cf9: mov byte ptr [rax + 0xe], sil; mov rsi, qword ptr [rsp + 0x10]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x000000000042578c: mov byte ptr [rax + rbp], cl; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x0000000000425595: mov byte ptr [rax + rbx], cl; add rsp, 0x10; mov rax, r8; pop rbx; ret; 
0x000000000047ec5b: mov byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x00000000004598d7: mov byte ptr [rax - 0x7c], 0xf6; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000458de3: mov byte ptr [rax - 0x7d], cl; ret; 
0x0000000000406f74: mov byte ptr [rax], 0; mov rax, r9; pop rbx; pop rbp; pop r12; ret; 
0x0000000000464fd5: mov byte ptr [rax], al; add byte ptr [rax], al; mov r10d, 8; mov eax, 0xd; syscall; 
0x000000000045410f: mov byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x0000000000402017: mov byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004150ed: mov byte ptr [rbp - 0x508], 0x20; mov dword ptr [rbp - 0x4f0], 1; cdqe; movzx eax, byte ptr [rbx + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000413f6c: mov byte ptr [rbp - 0x508], 0x20; mov qword ptr [rbp - 0x4f8], rsi; jmp rax; 
0x000000000046dcca: mov byte ptr [rbp - 0x958], cl; call rax; 
0x000000000046dcc9: mov byte ptr [rbp - 0x958], r9b; call rax; 
0x0000000000451cd1: mov byte ptr [rbx], al; add byte ptr [rax], al; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 8]; mov rdi, r13; call rax; 
0x000000000047eedc: mov byte ptr [rcx - 0x77], cl; ret 0x8949; 
0x000000000047e99f: mov byte ptr [rcx - 0x77], cl; xchg dword ptr [rax], ebx; add al, 0; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000476516: mov byte ptr [rcx], 0; add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x000000000041d4f1: mov byte ptr [rcx], 0x84; ror byte ptr [rdi], cl; test ch, dh; add dword ptr [rax], eax; add byte ptr [rdi + rcx - 0x42], cl; ret 0x4a8d; 
0x000000000044ac48: mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000044a5a8: mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000044acbe: mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000044a5fe: mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000044ad40: mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000044a680: mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004546a2: mov byte ptr [rdi + 0x28], 1; ret; 
0x000000000044b136: mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000446f16: mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000044aaf6: mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000044a4c6: mov byte ptr [rdi + 2], dh; ret; 
0x000000000044ab12: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000044a4e2: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000044ab63: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000044a523: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x0000000000434e1b: mov byte ptr [rdi - 1], dl; ret; 
0x000000000044b0a1: mov byte ptr [rdi], 0; lea rax, [rdi]; vzeroupper; ret; 
0x0000000000446e81: mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000491464: mov byte ptr [rdi], cl; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000043df86: mov byte ptr [rdi], cl; ret; 
0x000000000044e5b9: mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000044aad0: mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000044a4a0: mov byte ptr [rdi], dh; ret; 
0x000000000043b2a3: mov byte ptr [rdi], dl; ret; 
0x0000000000465cf6: mov byte ptr [rdx + 0xe], bh; mov byte ptr [rax + 0xe], sil; mov rsi, qword ptr [rsp + 0x10]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x0000000000465cf5: mov byte ptr [rdx + 0xe], dil; mov byte ptr [rax + 0xe], sil; mov rsi, qword ptr [rsp + 0x10]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x0000000000449ff9: mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x0000000000448849: mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000044a027: mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x0000000000448867: mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x0000000000414380: mov byte ptr [rdx + rbp], dh; add byte ptr [rcx - 0x75], cl; test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000044c6db: mov byte ptr [rdx + rdx*8 + 0xac840f], 0; add dh, dh; ret 0x7501; 
0x0000000000452d2d: mov byte ptr [rdx], al; add byte ptr [rax], al; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000449fd2: mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x0000000000448822: mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x000000000048ecf4: mov byte ptr [rip + 0x34415], 8; ret; 
0x000000000048eced: mov byte ptr [rip + 0x3441b], 8; mov byte ptr [rip + 0x34415], 8; ret; 
0x000000000048ece6: mov byte ptr [rip + 0x34421], 8; mov byte ptr [rip + 0x3441b], 8; mov byte ptr [rip + 0x34415], 8; ret; 
0x000000000048ecdf: mov byte ptr [rip + 0x34427], 8; mov byte ptr [rip + 0x34421], 8; mov byte ptr [rip + 0x3441b], 8; mov byte ptr [rip + 0x34415], 8; ret; 
0x000000000048ecd8: mov byte ptr [rip + 0x3442d], 8; mov byte ptr [rip + 0x34427], 8; mov byte ptr [rip + 0x34421], 8; mov byte ptr [rip + 0x3441b], 8; mov byte ptr [rip + 0x34415], 8; ret; 
0x0000000000401d4a: mov byte ptr [rip + 0xc04cf], 1; pop rbp; ret; 
0x0000000000466833: mov byte ptr [rip - 0x3fceff00], 0x48; add esp, 8; ret; 
0x000000000040264c: mov byte ptr [rsi], al; or al, 0; mov edi, dword ptr [rsp + 0xc]; mov rsi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045cac5: mov byte ptr [rsi], cl; add al, 0; add bh, dh; ret 0xf800; 
0x000000000046275d: mov byte ptr [rsp], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000046e244: mov ch, 0; idiv edi; dec dword ptr [rax + 0x29]; ret 0xb8; 
0x00000000004123b4: mov ch, 0x10; idiv edi; inc dword ptr [rbp - 0x7b]; in al, 0xf; lahf; ret; 
0x000000000046e892: mov ch, 0xc0; idiv bh; dec dword ptr [rbx + rcx*4 - 0x5b]; clc; idiv bh; jmp qword ptr [rsi - 0x70]; 
0x0000000000474742: mov ch, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0x1b60; 
0x0000000000426032: mov ch, 0xff; jmp qword ptr [rsi + 0x66]; 
0x000000000040b36e: mov ch, 1; add cl, ch; retf 0xfffd; jmp qword ptr [rsi + 0x2e]; 
0x0000000000452ab7: mov ch, 2; add byte ptr [rax], al; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000432b26: mov ch, 6; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000045d04d: mov ch, ah; add al, byte ptr [rax]; add bh, dh; ret 0xf800; 
0x0000000000477460: mov ch, dh; and ch, 0xf; je 0x77480; add rax, 2; ret; 
0x00000000004206a9: mov cl, 0x15; and dword ptr [rip - 0x76b7fff6], 0xa25821d; add byte ptr [rbx + 0xa257705], al; add byte ptr [rcx], al; pop rbx; ret; 
0x0000000000401208: mov cl, 0x15; ret 0xc15; 
0x0000000000451924: mov cl, 0x48; add esp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x00000000004776e3: mov cl, 0x83; add al, 0; test rax, rax; je 0x77720; call rax; 
0x0000000000487912: mov cl, ah; cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000401be4: mov cl, byte ptr [rax + 1]; sar byte ptr [rsi], 1; jmp rax; 
0x0000000000440775: mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x0000000000431974: mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x000000000043df84: mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000047744b: mov cl, dl; and cl, 0xf; je 0x77470; ret; 
0x000000000041fafe: mov cs, word ptr [rbp + 0x45fffffe]; xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000045434d: mov cs, word ptr [rbx - 0x2d7aeeec]; jne 0x54360; ret; 
0x00000000004145a2: mov cs, word ptr [rdx]; add byte ptr [rax - 0x75], cl; add al, 0xc8; jmp rax; 
0x0000000000444d1e: mov cs, word ptr [rip - 0x7cb80000]; ret 0xe910; 
0x000000000043df72: mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000044ac54: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000044a5b4: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000044ad58: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000044a698: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000435264: mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000043b1c4: mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000044aaf0: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000044a4c0: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000043df71: mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000049149d: mov dh, 0; add rsp, 0x18; pop rbx; pop rbp; mov eax, r8d; ret; 
0x000000000041e961: mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000420794: mov dh, 0; ret; 
0x000000000040f2b9: mov dh, 0x11; test dl, dl; jne 0xf298; ret; 
0x00000000004282f1: mov dh, 0x14; add dword ptr [rax + rdi - 0x3e], eax; jne 0x282e0; sub rax, 0x10; ret; 
0x000000000043b2a1: mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x00000000004314c5: mov dh, 0x16; sub eax, edx; ret; 
0x000000000041ed67: mov dh, 0x36; lea r15, [r14 + 1]; mov rdi, r12; call qword ptr [rbx + 0x18]; 
0x000000000040f1b7: mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b78d8c], eax; ret 0xfff0; 
0x0000000000406461: mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x0000000000406413: mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000494a11: mov dh, 0x44; and al, 0xf; add rsp, 0x10; pop rbx; ret; 
0x000000000042c961: mov dh, 0x44; cmp byte ptr [rax], ah; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x00000000004836de: mov dh, 0x45; add cl, byte ptr [rax - 0x7d]; ret; 
0x00000000004838d4: mov dh, 0x45; add ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000041197c: mov dh, 0x46; or al, 0x83; ret; 
0x000000000044c751: mov dh, 0x47; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000044c741: mov dh, 0x47; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000044c771: mov dh, 0x47; cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000044c761: mov dh, 0x47; hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000044c731: mov dh, 0x47; int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000045c4e7: mov dh, 0x48; dec dword ptr [rax + 0x3948074a]; ret; 
0x00000000004105e1: mov dh, 0x4b; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000048f374: mov dh, 0x53; add cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000406431: mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000046aa91: mov dh, 0x53; or al, 0xf6; ret 0xf01; 
0x00000000004730b1: mov dh, 0x53; or al, 0xf6; ret 0xf04; 
0x000000000042c966: mov dh, 0x54; cmp ah, byte ptr [rax]; sub eax, edx; vzeroupper; ret; 
0x000000000049205a: mov dh, 0x55; and byte ptr [rcx - 0x75], cl; insd dword ptr [rdi], dx; sbb dh, dh; ret 0xf01; 
0x000000000046d5b2: mov dh, 0x56; or al, 0xf6; ret 0xf08; 
0x000000000044c745: mov dh, 0x56; sub eax, edx; ret; 
0x000000000044c775: mov dh, 0x56; cmc; sub eax, edx; ret; 
0x000000000044c765: mov dh, 0x56; hlt; sub eax, edx; ret; 
0x000000000044c735: mov dh, 0x56; int1; sub eax, edx; ret; 
0x0000000000468fe8: mov dh, 0x58; or al, 0x89; fdiv st(6); ret; 
0x0000000000467945: mov dh, 0x58; or al, 0xf6; ret; 
0x000000000047b93b: mov dh, 0x87; sbb eax, 0x89000003; ret 0xe8c0; 
0x000000000041504b: mov dh, 0xc; add ecx, dword ptr [rax - 0x73]; add eax, 0xa81cb; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000041459b: mov dh, 0xc; add ecx, dword ptr [rax - 0x73]; add eax, 0xa8e7b; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x00000000004573bb: mov dh, 0xc0; add eax, 1; push rax; call rbx; 
0x0000000000477f76: mov dh, 0xc0; add rsp, 0x58; ret; 
0x000000000048b8d1: mov dh, 0xc0; neg eax; ret; 
0x000000000048758e: mov dh, 0xc0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004314e5: mov dh, 0xc0; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000044e8b1: mov dh, 0xc1; pop rbx; ret; 
0x000000000044e861: mov dh, 0xc2; and dh, 0xf0; mov edx, 0; pop rbx; cmove rax, rdx; ret; 
0x000000000044e372: mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000004598d6: mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000044e8f1: mov dh, 0xd1; mov eax, 0; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x00000000004314eb: mov dh, 0xd2; sub eax, edx; ret; 
0x000000000044d6bd: mov dh, 0xe; mov byte ptr [rdi], cl; ret; 
0x000000000042b251: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000430f61: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x0000000000431984: mov dh, 0xe; sub eax, ecx; ret; 
0x0000000000425f54: mov dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004927cc: mov dh, 0xff; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x00000000004926f1: mov dh, 0xff; nop dword ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004925dd: mov dh, 0xff; nop; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041e8c1: mov dh, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004141b5: mov dh, 4; add ecx, dword ptr [rax - 0x75]; add al, 0xc6; jmp rax; 
0x0000000000445b14: mov dh, 7; lea rdx, [rip + 0x55ea3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000444494: mov dh, 7; lea rdx, [rip + 0x57523]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004428e4: mov dh, 7; lea rdx, [rip + 0x590d3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000440784: mov dh, 7; lea rdx, [rip + 0x5b233]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000431981: mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000004314c2: mov dh, 7; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x000000000042b254: mov dh, 7; sub eax, ecx; ret; 
0x0000000000430f64: mov dh, 7; sub eax, ecx; vzeroupper; ret; 
0x0000000000417cb6: mov dl, 0x45; xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000457bca: mov dl, 0x95; cli; jmp qword ptr [rsi + 0x48]; 
0x0000000000428dcd: mov dl, 0x9f; or dword ptr [rax], eax; lea rax, [rip + 0x1cd57]; lea rdx, [rip + 0x22400]; cmovne rax, rdx; ret; 
0x00000000004755aa: mov dl, 0xba; clc; call ptr [rdx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000042119a: mov dl, 0xf5; or dword ptr [rax], eax; ret; 
0x000000000047aff7: mov dl, 0xfa; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000463fba: mov dl, 5; add byte ptr [rax], al; nop; ret; 
0x0000000000452fd0: mov dl, 7; add byte ptr [rax], al; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000421b22: mov dl, byte ptr [rcx]; or al, byte ptr [rax]; syscall; 
0x0000000000434ea0: mov dl, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000046d5e3: mov dl, dl; sbb al, 0; add dh, dh; ret 0xf40; 
0x00000000004214af: mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x00000000004214b3: mov dword ptr [r11 + 0x14], 0; ret; 
0x00000000004214aa: mov dword ptr [r11 + 0x24], ebp; pop rbp; mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x000000000043df7a: mov dword ptr [r9 - 2], ecx; ret; 
0x000000000043df65: mov dword ptr [r9 - 4], ecx; ret; 
0x000000000047435b: mov dword ptr [rax + 0x10], ecx; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000454655: mov dword ptr [rax + 0x10], ecx; mov qword ptr [rax + 8], rdx; ret; 
0x00000000004753cd: mov dword ptr [rax + 0x10], ecx; mov r8, rcx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000475409: mov dword ptr [rax + 0x10], edi; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000047431d: mov dword ptr [rax + 0x10], edx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000474aec: mov dword ptr [rax + 0x18], edx; xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x000000000045470b: mov dword ptr [rax + 0x20], ecx; mov byte ptr [rax + 0x28], 1; ret; 
0x0000000000421be7: mov dword ptr [rax + 0x20], edx; add rsp, 8; ret; 
0x0000000000454719: mov dword ptr [rax + 0x20], esi; ret; 
0x0000000000474ae8: mov dword ptr [rax + 0x28], edx; mov qword ptr [rax + 0x18], rdx; xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x0000000000474321: mov dword ptr [rax + 0x40], ecx; ret; 
0x000000000047435f: mov dword ptr [rax + 0x40], edx; movups xmmword ptr [rax], xmm0; ret; 
0x000000000047540d: mov dword ptr [rax + 0x40], esi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000475172: mov dword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x000000000041f5b5: mov dword ptr [rax + 8], 0; ret; 
0x0000000000474312: mov dword ptr [rax + 8], ecx; mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000454659: mov dword ptr [rax + 8], edx; ret; 
0x0000000000446ef2: mov dword ptr [rax - 0x17], 0xffffff50; nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x0000000000494cc8: mov dword ptr [rax - 0x77], ecx; ret 0xc148; 
0x000000000041f5ae: mov dword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x000000000048777d: mov dword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x458]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000450aa8: mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000451a00: mov dword ptr [rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000418454: mov dword ptr [rax], 0x89480000; ret; 
0x000000000042580b: mov dword ptr [rax], 0xc; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x00000000004780b0: mov dword ptr [rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000042435b: mov dword ptr [rax], 0xc; mov rax, r8; ret; 
0x000000000048706e: mov dword ptr [rax], eax; mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000048708b: mov dword ptr [rax], eax; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x00000000004607f3: mov dword ptr [rax], ebp; cli; dec dword ptr [rcx - 0x77]; dec dword ptr [rbp - 0x77]; ret 0x87e9; 
0x0000000000487735: mov dword ptr [rax], edi; pop rbx; ret; 
0x00000000004876a1: mov dword ptr [rax], edx; add rsp, 8; ret; 
0x0000000000474c0d: mov dword ptr [rax], edx; mov eax, dword ptr [rcx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047431a: mov dword ptr [rax], edx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000487729: mov dword ptr [rax], edx; pop rbx; ret; 
0x00000000004753d8: mov dword ptr [rax], edx; xor eax, eax; ret; 
0x0000000000422438: mov dword ptr [rbp + 0x31], eax; sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000474a51: mov dword ptr [rbp + 0x74], eax; mov eax, 1; pop rbp; pop r12; ret; 
0x0000000000490708: mov dword ptr [rbp + 8], eax; add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000041ea95: mov dword ptr [rbp + 8], eax; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004944bb: mov dword ptr [rbp + rbx*8], edx; mov rax, qword ptr [rax + rbx*8]; test rax, rax; je 0x944ca; call rax; 
0x000000000046fa99: mov dword ptr [rbp - 0x4c8], 0; mov dword ptr [rbp - 0x4f0], 0x20; jmp rax; 
0x00000000004143a8: mov dword ptr [rbp - 0x4c8], ecx; mov rsi, r8; mov rdi, r12; sub r15, r8; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000004143a7: mov dword ptr [rbp - 0x4c8], r9d; mov rsi, r8; mov rdi, r12; sub r15, r8; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000470b4e: mov dword ptr [rbp - 0x4d0], 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000046fcd1: mov dword ptr [rbp - 0x4d0], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000047062d: mov dword ptr [rbp - 0x4d0], ecx; mov rdx, rcx; mov rsi, r9; mov rdi, r12; mov qword ptr [rbp - 0x4d8], r11; call qword ptr [rbx + 0x38]; 
0x000000000047063d: mov dword ptr [rbp - 0x4d8], ebx; call qword ptr [rbx + 0x38]; 
0x0000000000470fb0: mov dword ptr [rbp - 0x4d8], ebx; mov rdx, rbx; mov rsi, r9; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000413f62: mov dword ptr [rbp - 0x4e0], 0; mov byte ptr [rbp - 0x508], 0x20; mov qword ptr [rbp - 0x4f8], rsi; jmp rax; 
0x0000000000470d1e: mov dword ptr [rbp - 0x4e0], 1; mov dword ptr [rbp - 0x4f0], 0x20; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470df0: mov dword ptr [rbp - 0x4e8], 0; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004708e6: mov dword ptr [rbp - 0x4e8], 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004144b8: mov dword ptr [rbp - 0x4e8], ecx; mov rdx, r15; mov rsi, r11; mov rdi, r12; call qword ptr [rcx + 0x38]; 
0x0000000000415453: mov dword ptr [rbp - 0x4e8], ecx; mov rdx, rcx; mov rsi, r11; mov rdi, r12; mov dword ptr [rbp - 0x4f0], r9d; call qword ptr [rax + 0x38]; 
0x0000000000414f16: mov dword ptr [rbp - 0x4e8], ecx; mov rdx, rcx; mov rsi, r11; mov rdi, r12; mov dword ptr [rbp - 0x4f8], r9d; call qword ptr [rbx + 0x38]; 
0x00000000004144b7: mov dword ptr [rbp - 0x4e8], r9d; mov rdx, r15; mov rsi, r11; mov rdi, r12; call qword ptr [rcx + 0x38]; 
0x000000000046faa3: mov dword ptr [rbp - 0x4f0], 0x20; jmp rax; 
0x0000000000470d28: mov dword ptr [rbp - 0x4f0], 0x20; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004150f4: mov dword ptr [rbp - 0x4f0], 1; cdqe; movzx eax, byte ptr [rbx + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000415463: mov dword ptr [rbp - 0x4f0], ecx; call qword ptr [rax + 0x38]; 
0x0000000000415462: mov dword ptr [rbp - 0x4f0], r9d; call qword ptr [rax + 0x38]; 
0x0000000000470d66: mov dword ptr [rbp - 0x4f8], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004712b0: mov dword ptr [rbp - 0x4f8], ecx; call qword ptr [rax + 0x38]; 
0x0000000000414f26: mov dword ptr [rbp - 0x4f8], ecx; call qword ptr [rbx + 0x38]; 
0x00000000004142d9: mov dword ptr [rbp - 0x4f8], ecx; mov rdx, r15; mov rsi, r8; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000413f74: mov dword ptr [rbp - 0x4f8], esi; jmp rax; 
0x0000000000414f25: mov dword ptr [rbp - 0x4f8], r9d; call qword ptr [rbx + 0x38]; 
0x00000000004142d8: mov dword ptr [rbp - 0x4f8], r9d; mov rdx, r15; mov rsi, r8; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000004156bf: mov dword ptr [rbp - 0x500], ebx; call qword ptr [rax + 0x38]; 
0x00000000004712a9: mov dword ptr [rbp - 0x500], ebx; mov qword ptr [rbp - 0x4f8], r9; call qword ptr [rax + 0x38]; 
0x000000000046fa84: mov dword ptr [rbp - 0x508], 0; mov dword ptr [rbp - 0x514], 0; mov qword ptr [rbp - 0x4c8], 0; mov dword ptr [rbp - 0x4f0], 0x20; jmp rax; 
0x0000000000470e6e: mov dword ptr [rbp - 0x508], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004156b8: mov dword ptr [rbp - 0x508], edx; mov qword ptr [rbp - 0x500], r11; call qword ptr [rax + 0x38]; 
0x00000000004156b7: mov dword ptr [rbp - 0x508], r10d; mov qword ptr [rbp - 0x500], r11; call qword ptr [rax + 0x38]; 
0x000000000046fa8e: mov dword ptr [rbp - 0x514], 0; mov qword ptr [rbp - 0x4c8], 0; mov dword ptr [rbp - 0x4f0], 0x20; jmp rax; 
0x0000000000470726: mov dword ptr [rbp - 0x514], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000413f57: mov dword ptr [rbp - 0x51c], 0; mov qword ptr [rbp - 0x4e0], 0; mov byte ptr [rbp - 0x508], 0x20; mov qword ptr [rbp - 0x4f8], rsi; jmp rax; 
0x0000000000470e34: mov dword ptr [rbp - 0x520], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004706a6: mov dword ptr [rbp - 0x528], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470de6: mov dword ptr [rbp - 0x530], 1; mov dword ptr [rbp - 0x4e8], 0; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000041509f: mov dword ptr [rbp - 0x53c], 1; cdqe; movzx eax, byte ptr [rbx + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000457d8f: mov dword ptr [rbp - 0x70], esi; call 0x55f00; mov rsi, qword ptr [rbp - 0x70]; mov rdi, rbx; call rsi; 
0x000000000046d154: mov dword ptr [rbp - 0x8f0], ecx; mov rdx, r9; mov rsi, r12; mov rdi, r13; call qword ptr [rcx + 0x38]; 
0x0000000000411e02: mov dword ptr [rbp - 0x940], ebx; call rax; 
0x0000000000411e01: mov dword ptr [rbp - 0x940], r11d; call rax; 
0x0000000000411dfb: mov dword ptr [rbp - 0x94c], ecx; mov dword ptr [rbp - 0x940], r11d; call rax; 
0x0000000000411dfa: mov dword ptr [rbp - 0x94c], r9d; mov dword ptr [rbp - 0x940], r11d; call rax; 
0x000000000046dcc3: mov dword ptr [rbp - 0x970], edx; mov byte ptr [rbp - 0x958], r9b; call rax; 
0x000000000046dcc2: mov dword ptr [rbp - 0x970], r10d; mov byte ptr [rbp - 0x958], r9b; call rax; 
0x000000000047f528: mov dword ptr [rbp - 0xd8], ebx; call rax; 
0x0000000000468c20: mov dword ptr [rbp - 0xe8], eax; call rax; 
0x0000000000468c10: mov dword ptr [rbp - 0xf0], ecx; mov rdx, r8; mov rsi, r14; mov rdi, r12; mov qword ptr [rbp - 0xe8], r8; call rax; 
0x0000000000468c0f: mov dword ptr [rbp - 0xf0], r9d; mov rdx, r8; mov rsi, r14; mov rdi, r12; mov qword ptr [rbp - 0xe8], r8; call rax; 
0x000000000041f3b6: mov dword ptr [rbp], eax; mov eax, 1; movups xmmword ptr [rbp + 0x38], xmm0; pop rbp; pop r12; ret; 
0x00000000004752fa: mov dword ptr [rbp], eax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004201f4: mov dword ptr [rbp], eax; mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000047564e: mov dword ptr [rbp], eax; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x0000000000483926: mov dword ptr [rbx + 0x10], 0; movups xmmword ptr [rbx], xmm0; pop rbx; ret; 
0x00000000004624b7: mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000004214b0: mov dword ptr [rbx + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x0000000000484562: mov dword ptr [rbx + 0x10], eax; pop rax; pop rdx; pop rbx; ret; 
0x00000000004214b4: mov dword ptr [rbx + 0x14], 0; ret; 
0x0000000000484497: mov dword ptr [rbx + 0x18], eax; pop rax; pop rdx; pop rbx; ret; 
0x000000000048b8f9: mov dword ptr [rbx + 0x18], eax; pop rbx; ret; 
0x0000000000473071: mov dword ptr [rbx + 0x18], edi; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000048b9bd: mov dword ptr [rbx + 0x20], eax; pop rbx; ret; 
0x000000000041e6d5: mov dword ptr [rbx + 0x20], eax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004214ab: mov dword ptr [rbx + 0x24], ebp; pop rbp; mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x0000000000464eef: mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x0000000000464ecc: mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x0000000000456c19: mov dword ptr [rbx + 0x58908c8], 0x6cbd1; ret; 
0x0000000000456be8: mov dword ptr [rbx + 0x58910c8], 0x6cc02; pop rbx; ret; 
0x0000000000456c49: mov dword ptr [rbx + 0x58918c8], 0x6cba1; ret; 
0x000000000041e73d: mov dword ptr [rbx + 0x58], 0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x00000000004752fe: mov dword ptr [rbx + 0x60], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004201f8: mov dword ptr [rbx + 0x60], ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000041cd8e: mov dword ptr [rbx + 0x70], 0xffffffff; pop rbx; ret; 
0x00000000004743ba: mov dword ptr [rbx + 0x74], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004749be: mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000041b1ef: mov dword ptr [rbx + 0x90], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000041c507: mov dword ptr [rbx + 0x90], eax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000041b689: mov dword ptr [rbx + 0x90], esi; xor eax, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x00000000004902b7: mov dword ptr [rbx + 0x98], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000462487: mov dword ptr [rbx + 8], eax; cmp eax, -3; je 0x624a8; pop rbx; ret; 
0x0000000000463359: mov dword ptr [rbx + rbp*8], eax; lea rax, [rip + 0x5c8dd]; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x6336e; call rax; 
0x00000000004630d3: mov dword ptr [rbx + riz*8], eax; lea rax, [rip + 0x5cb63]; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x630e8; call rax; 
0x0000000000458207: mov dword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000482698: mov dword ptr [rbx], 0; pop rbx; or dword ptr [rip + 0x3ea62], 1; ret; 
0x0000000000487fce: mov dword ptr [rbx], eax; add rsp, 0x10; pop rbx; ret; 
0x000000000041ebb2: mov dword ptr [rbx], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004879fe: mov dword ptr [rbx], eax; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000428d41: mov dword ptr [rbx], eax; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000048d78d: mov dword ptr [rbx], eax; pop rax; pop rdx; pop rbx; ret; 
0x000000000046c5d6: mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000474af1: mov dword ptr [rbx], ecx; pop rbx; ret; 
0x0000000000421ab4: mov dword ptr [rbx], esp; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000041b163: mov dword ptr [rbx], esp; pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x000000000041b162: mov dword ptr [rbx], r12d; pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x000000000046715d: mov dword ptr [rcx + rdx*8], eax; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x000000000042577e: mov dword ptr [rcx - 0x78], 0x29481004; ret 0x3948; 
0x000000000043df7b: mov dword ptr [rcx - 2], ecx; ret; 
0x000000000043df66: mov dword ptr [rcx - 4], ecx; ret; 
0x000000000043df55: mov dword ptr [rcx - 8], ecx; ret; 
0x0000000000483976: mov dword ptr [rcx], 0x1c68348; test al, al; jne 0x8394e; movsx eax, dl; neg eax; ret; 
0x0000000000463d5e: mov dword ptr [rcx], 0xfff4788; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000048e281: mov dword ptr [rcx], eax; add rsp, 8; ret; 
0x00000000004509ee: mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000048e2a0: mov dword ptr [rcx], eax; ret; 
0x000000000049053f: mov dword ptr [rcx], edx; add rsp, 8; ret; 
0x0000000000464dcc: mov dword ptr [rcx], edx; mov rax, qword ptr [rax + 0x58]; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000464cfc: mov dword ptr [rcx], edx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000044ac5d: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x11]; ret; 
0x000000000044ac9b: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000044ad1d: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x17]; ret; 
0x000000000044acbb: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000044a5fb: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000044ad3d: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000044a67d: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000044a5bd: mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000044ad80: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000044a6c0: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000044ada0: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000044a6e0: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000044ad61: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000044a6a1: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000044ad83: mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000044a6c3: mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000041e627: mov dword ptr [rdi + 0x18], eax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000044ad65: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x19]; ret; 
0x000000000044ada3: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000044a6a5: mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000041e654: mov dword ptr [rdi + 0x18], edx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000420386: mov dword ptr [rdi + 0x18], edx; mov rcx, rdx; add rax, rcx; mov qword ptr [rdi + 8], rax; xor eax, eax; ret; 
0x00000000004203cc: mov dword ptr [rdi + 0x18], esi; mov qword ptr [rdi + 8], rax; xor eax, eax; ret; 
0x000000000045469f: mov dword ptr [rdi + 0x20], edx; mov byte ptr [rdi + 0x28], 1; ret; 
0x00000000004546b1: mov dword ptr [rdi + 0x20], esi; ret; 
0x000000000047dd56: mov dword ptr [rdi + 0x2f4], edx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000047dd24: mov dword ptr [rdi + 0x2fc], ecx; mov qword ptr [rdi + 0x310], rax; ret; 
0x000000000047dd5d: mov dword ptr [rdi + 0x308], eax; ret; 
0x000000000047dd2b: mov dword ptr [rdi + 0x310], eax; ret; 
0x000000000041e658: mov dword ptr [rdi + 0x48], eax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000041e623: mov dword ptr [rdi + 0x48], edx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000041e61b: mov dword ptr [rdi + 0x58], eax; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000490595: mov dword ptr [rdi + 0x98], esi; ret; 
0x000000000041f671: mov dword ptr [rdi + 0xa0], 0xffffffff; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000041f664: mov dword ptr [rdi + 0xa8], 0; ret; 
0x000000000041840d: mov dword ptr [rdi + 0xd8], edx; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000044acdd: mov dword ptr [rdi + 0xe], ecx; lea rax, [rdi + 0x15]; ret; 
0x000000000044a61d: mov dword ptr [rdi + 0xe], ecx; ret; 
0x000000000044ac7b: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000044acfd: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x16]; ret; 
0x000000000044a5db: mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000043b0e5: mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000043af28: mov dword ptr [rdi + 1], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000043b1c8: mov dword ptr [rdi + 1], edx; mov word ptr [rdi], cx; ret; 
0x000000000043b075: mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000043aeb8: mov dword ptr [rdi + 2], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000044ab47: mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x000000000043b005: mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000043ae48: mov dword ptr [rdi + 3], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000044a507: mov dword ptr [rdi + 3], edx; ret; 
0x000000000044ab29: mov dword ptr [rdi + 4], edx; lea rax, [rdi + 5]; ret; 
0x000000000043add8: mov dword ptr [rdi + 4], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000044a4f9: mov dword ptr [rdi + 4], edx; ret; 
0x000000000044abdb: mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x000000000043ad68: mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000044a56b: mov dword ptr [rdi + 5], edx; ret; 
0x000000000044abfb: mov dword ptr [rdi + 6], edx; lea rax, [rdi + 0xd]; ret; 
0x000000000043acf8: mov dword ptr [rdi + 6], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000044a57b: mov dword ptr [rdi + 6], edx; ret; 
0x000000000044ab99: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000044ac1b: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xe]; ret; 
0x000000000043ac88: mov dword ptr [rdi + 7], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000044a549: mov dword ptr [rdi + 7], edx; ret; 
0x000000000048719a: mov dword ptr [rdi + 8], eax; mov eax, 0xffffc002; sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000487126: mov dword ptr [rdi + 8], eax; mov eax, 2; ret; 
0x0000000000485988: mov dword ptr [rdi + 8], eax; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000420390: mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x000000000041e62b: mov dword ptr [rdi + 8], eax; ret; 
0x0000000000485918: mov dword ptr [rdi + 8], ecx; ret; 
0x000000000044abb9: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000044ab7b: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 9]; ret; 
0x0000000000486f40: mov dword ptr [rdi + 8], edx; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000486e08: mov dword ptr [rdi + 8], edx; mov eax, ecx; adc eax, eax; ret; 
0x000000000044a53b: mov dword ptr [rdi + 8], edx; ret; 
0x0000000000485f4d: mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000044e45f: mov dword ptr [rdi + rdx - 2], ecx; mov word ptr [rdi], cx; ret; 
0x000000000044e5e4: mov dword ptr [rdi + rdx - 2], ecx; mov word ptr [rdi], cx; vzeroupper; ret; 
0x000000000044d6e9: mov dword ptr [rdi + rdx - 2], ecx; mov word ptr [rdi], si; ret; 
0x000000000044b168: mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000446f38: mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x000000000044e457: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], ecx; ret; 
0x000000000044e5d9: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], ecx; vzeroupper; ret; 
0x000000000044d6d9: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000044b18c: mov dword ptr [rdi + rdx - 7], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000446f4c: mov dword ptr [rdi + rdx - 7], ecx; vzeroupper; ret; 
0x000000000044e44f: mov dword ptr [rdi + rdx - 8], ecx; mov qword ptr [rdi], rcx; ret; 
0x000000000044e5ce: mov dword ptr [rdi + rdx - 8], ecx; mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x000000000044d6cb: mov dword ptr [rdi + rdx - 8], ecx; mov qword ptr [rdi], rsi; ret; 
0x0000000000490551: mov dword ptr [rdi + rsi*8], edx; add rsp, 8; ret; 
0x0000000000434b65: mov dword ptr [rdi - 0x10], ebx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434ba3: mov dword ptr [rdi - 0x10], ebx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000048587f: mov dword ptr [rdi - 0x10], ecx; ret; 
0x0000000000434d18: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434e14: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000434d60: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434ee8: mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004350c8: mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004352b8: mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435489: mov dword ptr [rdi - 0x15], ebx; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435689: mov dword ptr [rdi - 0x16], ebx; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435889: mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434b61: mov dword ptr [rdi - 0x18], edx; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434b9f: mov dword ptr [rdi - 0x18], edx; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434d14: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434e10: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000434d5c: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434ee4: mov dword ptr [rdi - 0x1a], edx; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004350c4: mov dword ptr [rdi - 0x1b], edx; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004352b4: mov dword ptr [rdi - 0x1c], edx; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435485: mov dword ptr [rdi - 0x1d], edx; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435685: mov dword ptr [rdi - 0x1e], edx; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435885: mov dword ptr [rdi - 0x1f], edx; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434b5d: mov dword ptr [rdi - 0x20], ecx; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434b9b: mov dword ptr [rdi - 0x20], ecx; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434d10: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434e0c: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000434d58: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434ee0: mov dword ptr [rdi - 0x22], ecx; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004350c0: mov dword ptr [rdi - 0x23], ecx; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004352b0: mov dword ptr [rdi - 0x24], ecx; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435481: mov dword ptr [rdi - 0x25], ecx; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435681: mov dword ptr [rdi - 0x26], ecx; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435881: mov dword ptr [rdi - 0x27], ecx; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434b59: mov dword ptr [rdi - 0x28], eax; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434b97: mov dword ptr [rdi - 0x28], eax; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434eec: mov dword ptr [rdi - 0xa], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043a738: mov dword ptr [rdi - 0xa], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004350cc: mov dword ptr [rdi - 0xb], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043a6b8: mov dword ptr [rdi - 0xb], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004352bc: mov dword ptr [rdi - 0xc], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043a638: mov dword ptr [rdi - 0xc], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043548d: mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043a5a9: mov dword ptr [rdi - 0xd], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043568d: mov dword ptr [rdi - 0xe], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043a519: mov dword ptr [rdi - 0xe], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043588d: mov dword ptr [rdi - 0xf], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043a489: mov dword ptr [rdi - 0xf], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043526d: mov dword ptr [rdi - 2], ecx; ret; 
0x0000000000435085: mov dword ptr [rdi - 2], edx; ret; 
0x0000000000435269: mov dword ptr [rdi - 3], edx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000435649: mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434d1f: mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435646: mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435846: mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435a46: mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000485878: mov dword ptr [rdi - 8], eax; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000434b69: mov dword ptr [rdi - 8], ecx; ret; 
0x0000000000434ba7: mov dword ptr [rdi - 8], edx; ret; 
0x0000000000434d1c: mov dword ptr [rdi - 9], eax; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434e18: mov dword ptr [rdi - 9], ecx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000434d64: mov dword ptr [rdi - 9], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043a7b8: mov dword ptr [rdi - 9], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000041d45e: mov dword ptr [rdi], eax; add al, ch; pop rdx; cmp al, 0xfe; dec dword ptr [rax - 0x77]; ret; 
0x0000000000481dfc: mov dword ptr [rdi], eax; mov rax, qword ptr [rip + 0x41503]; mov qword ptr [rsi], rax; ret; 
0x00000000004857f8: mov dword ptr [rdi], eax; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000485912: mov dword ptr [rdi], eax; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000485871: mov dword ptr [rdi], ebx; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000485981: mov dword ptr [rdi], ebx; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000044ab15: mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000044ab67: mov dword ptr [rdi], ecx; lea rax, [rdi + 8]; ret; 
0x000000000044b134: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000446f14: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000044aaf4: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000044a4c4: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000044ab45: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x000000000044a505: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000044ab97: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000044a547: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000044abb7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000044a557: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000044d3eb: mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x000000000044b162: mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000446f32: mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x000000000044abd8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000044a568: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000044abf8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000044a578: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000044ac18: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000044a588: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000044b189: mov dword ptr [rdi], ecx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000446f49: mov dword ptr [rdi], ecx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x000000000044ab26: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x000000000044a4f6: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000044ab78: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000044a538: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; ret; 
0x000000000044d3f7: mov dword ptr [rdi], ecx; mov word ptr [rsi - 2], cx; ret; 
0x000000000043ac8c: mov dword ptr [rdi], ecx; ret; 
0x000000000044e5d3: mov dword ptr [rdi], ecx; vzeroupper; ret; 
0x000000000044aae4: mov dword ptr [rdi], edx; lea rax, [rdi + 1]; ret; 
0x000000000044b124: mov dword ptr [rdi], edx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x000000000044ab02: mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x000000000044b152: mov dword ptr [rdi], edx; lea rax, [rdi + 3]; vzeroupper; ret; 
0x000000000044ab54: mov dword ptr [rdi], edx; lea rax, [rdi + 7]; ret; 
0x000000000043af94: mov dword ptr [rdi], edx; ret; 
0x0000000000446f04: mov dword ptr [rdi], edx; vzeroupper; ret; 
0x000000000043df63: mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000486fd6: mov dword ptr [rdi], esi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000043df52: mov dword ptr [rdi], esi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000043df77: mov dword ptr [rdi], esi; mov word ptr [r9 - 2], cx; ret; 
0x000000000044d6d0: mov dword ptr [rdi], esi; ret; 
0x0000000000421bdf: mov dword ptr [rdx + 0x28], ecx; mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x000000000041b2cd: mov dword ptr [rdx + 0xe0], ecx; pop rbx; ret; 
0x000000000041841b: mov dword ptr [rdx + 0xe0], ecx; ret; 
0x000000000044a057: mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x0000000000448887: mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000044a039: mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x0000000000448879: mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x000000000044a0eb: mov dword ptr [rdx + 5], eax; lea rax, [rdx + 0xc]; ret; 
0x000000000044a069: mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000448899: mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000044a10b: mov dword ptr [rdx + 6], eax; lea rax, [rdx + 0xd]; ret; 
0x000000000044a089: mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x00000000004488a9: mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000044a0a9: mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x000000000044a12b: mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xe]; ret; 
0x00000000004488b9: mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000044a0c9: mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000449fbb: mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xf]; ret; 
0x000000000044880b: mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000046249f: mov dword ptr [rdx + 8], eax; pop rbx; ret; 
0x0000000000486f9b: mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000048710e: mov dword ptr [rdx], 0; mov eax, 2; ret; 
0x0000000000487092: mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000000449fe4: mov dword ptr [rdx], eax; lea rax, [rdx + 1]; ret; 
0x000000000044a012: mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x0000000000449f64: mov dword ptr [rdx], eax; lea rax, [rdx + 7]; ret; 
0x0000000000449ff4: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x0000000000448844: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000044a022: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x0000000000448862: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000044a032: mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x0000000000448872: mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000450a92: mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000486fd8: mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000487167: mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000044a052: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x0000000000448882: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000044a064: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000448894: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000044a084: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x00000000004488a4: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000044a0a4: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x00000000004488b4: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000044a0c4: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x00000000004488c4: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000450cca: mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000044a0e4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x00000000004488d4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000044a104: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x00000000004488f4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000044a124: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000448914: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000449fb4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000448804: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x00000000004487b4: mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x00000000004877a1: mov dword ptr [rdx], eax; pop rbx; ret; 
0x00000000004202e9: mov dword ptr [rdx], eax; ret; 
0x000000000047466c: mov dword ptr [rdx], ecx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004948bb: mov dword ptr [rip + 0x2e653], 0; add rsp, 8; ret; 
0x000000000049446c: mov dword ptr [rip + 0x2e982], 0; add rsp, 8; ret; 
0x00000000004932d4: mov dword ptr [rip + 0x2f936], ebx; test rbx, rbx; jne 0x932c0; pop rbx; ret; 
0x0000000000487218: mov dword ptr [rip + 0x3bdaa], eax; ret; 
0x0000000000487201: mov dword ptr [rip + 0x3bdc1], eax; add rsp, 8; ret; 
0x0000000000484321: mov dword ptr [rip + 0x3ec75], 0; add rsp, 8; ret; 
0x0000000000481c99: mov dword ptr [rip + 0x41671], eax; ret; 
0x0000000000478074: mov dword ptr [rip + 0x4aebe], eax; cmp rdi, rax; ja 0x780a8; xor eax, eax; ret; 
0x0000000000464cd1: mov dword ptr [rip + 0x5cd19], eax; mov qword ptr [rip + 0x5cd1a], rdx; cmp qword ptr fs:[rdi], rsi; je 0x64ce8; ret; 
0x0000000000464cd8: mov dword ptr [rip + 0x5cd1a], edx; cmp qword ptr fs:[rdi], rsi; je 0x64ce8; ret; 
0x0000000000455eca: mov dword ptr [rip + 0x69bd0], eax; pop rbx; ret; 
0x0000000000456c4d: mov dword ptr [rip + 0x6cba1], eax; ret; 
0x0000000000456c1d: mov dword ptr [rip + 0x6cbd1], eax; ret; 
0x0000000000456bec: mov dword ptr [rip + 0x6cc02], eax; pop rbx; ret; 
0x0000000000456bad: mov dword ptr [rip + 0x6cc41], eax; ret; 
0x0000000000456b7d: mov dword ptr [rip + 0x6cc71], eax; ret; 
0x0000000000456b4c: mov dword ptr [rip + 0x6cca2], eax; pop rbx; ret; 
0x000000000045420d: mov dword ptr [rip + 0x6ce7d], eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004262b0: mov dword ptr [rip + 0x9a4ca], eax; ret; 
0x00000000004262a2: mov dword ptr [rip + 0x9a4e0], eax; lea rax, [rip - 0xc6f]; mov qword ptr [rip + 0x9a4ca], rax; ret; 
0x000000000042624e: mov dword ptr [rip + 0x9ca48], 0; ret; 
0x00000000004224a6: mov dword ptr [rip + 0x9e2d4], eax; ret; 
0x0000000000422498: mov dword ptr [rip + 0x9e2ea], eax; lea rax, [rip + 0x319b]; mov qword ptr [rip + 0x9e2d4], rax; ret; 
0x0000000000421542: mov dword ptr [rip + 0x9f1e4], eax; ret; 
0x000000000042151c: mov dword ptr [rip + 0x9f1ee], eax; ret; 
0x0000000000421538: mov dword ptr [rip + 0x9f1f2], 1; mov dword ptr [rip + 0x9f1e4], eax; ret; 
0x00000000004214f3: mov dword ptr [rip + 0x9f20f], eax; ret; 
0x0000000000421511: mov dword ptr [rip + 0x9f219], 1; mov qword ptr [rip + 0x9f1ee], rax; ret; 
0x00000000004214d3: mov dword ptr [rip + 0x9f227], eax; ret; 
0x00000000004214e8: mov dword ptr [rip + 0x9f242], 1; mov qword ptr [rip + 0x9f20f], rax; ret; 
0x00000000004214c8: mov dword ptr [rip + 0x9f262], 1; mov qword ptr [rip + 0x9f227], rax; ret; 
0x00000000004211c9: mov dword ptr [rip + 0x9f599], eax; ret; 
0x00000000004211b2: mov dword ptr [rip + 0x9f5a8], eax; ret; 
0x0000000000421198: mov dword ptr [rip + 0x9f5b2], edx; ret; 
0x0000000000421159: mov dword ptr [rip + 0x9f5b9], eax; ret; 
0x0000000000421149: mov dword ptr [rip + 0x9f5d1], eax; ret; 
0x000000000042248a: mov dword ptr [rip + 0xa07e8], eax; lea rax, [rip + 0x3429]; mov qword ptr [rip + 0x9e2ea], rax; lea rax, [rip + 0x319b]; mov qword ptr [rip + 0x9e2d4], rax; ret; 
0x0000000000421586: mov dword ptr [rip + 0xa172c], eax; ret; 
0x0000000000421558: mov dword ptr [rip + 0xa1756], eax; ret; 
0x0000000000420750: mov dword ptr [rip + 0xa24de], 0; ret; 
0x00000000004206b0: mov dword ptr [rip + 0xa2582], ebx; add dword ptr [rip + 0xa2577], 1; pop rbx; ret; 
0x000000000040200e: mov dword ptr [rip + 0xc0d8c], eax; add rsp, 0x88; pop rbx; ret; 
0x00000000004017c5: mov dword ptr [rip + 0xc1829], 0; pop rdx; ret; 
0x0000000000402cf2: mov dword ptr [rsi + 0x10], esi; syscall; 
0x0000000000402ce6: mov dword ptr [rsi + 8], eax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000044d3fa: mov dword ptr [rsi - 2], ecx; ret; 
0x000000000044d3ed: mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000490582: mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000481e06: mov dword ptr [rsi], eax; ret; 
0x00000000004729f3: mov dword ptr [rsi], eax; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000464cf1: mov dword ptr [rsi], ecx; mov rcx, 0xffffffffffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000481105: mov dword ptr [rsi], edi; mov rax, r8; ret; 
0x0000000000402cef: mov dword ptr [rsi], esi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000423bbe: mov dword ptr [rsp + 0x10], eax; call rax; 
0x0000000000490f78: mov dword ptr [rsp + 0x10], edx; call rax; 
0x0000000000480df8: mov dword ptr [rsp + 0x18], eax; call 0x80720; add rsp, 0xd8; ret; 
0x0000000000423bb9: mov dword ptr [rsp + 0x18], edx; mov qword ptr [rsp + 0x10], r8; call rax; 
0x0000000000451595: mov dword ptr [rsp + 0x20], eax; cmp esi, 9; je 0x515c8; mov eax, 0x48; syscall; 
0x0000000000477faa: mov dword ptr [rsp + 0x28], eax; xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall; 
0x0000000000450ca8: mov dword ptr [rsp + 8], eax; call 0x75510; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000481eb1: mov dword ptr [rsp + 8], eax; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000452e8e: mov dword ptr [rsp + 8], eax; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000451622: mov dword ptr [rsp + 8], eax; xor eax, eax; cmp esi, 9; je 0x51658; mov eax, 0x48; syscall; 
0x000000000041951f: mov dword ptr [rsp + 8], ecx; mov rdi, r15; call rax; 
0x0000000000484f82: mov dword ptr [rsp], 0; mov rax, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x000000000048dd84: mov dword ptr [rsp], eax; call 0x8e1b0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000423bd9: mov dword ptr [rsp], eax; call rdx; 
0x000000000041c799: mov dword ptr [rsp], eax; mov rdx, r8; mov rsi, r12; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x000000000041bb00: mov dword ptr [rsp], ecx; mov rdi, rbp; call rax; 
0x0000000000475db2: mov dword ptr [rsp], esi; pop r12; pop r13; pop r14; ret; 
0x0000000000450aa7: mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004519ff: mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000042580a: mov dword ptr fs:[rax], 0xc; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x00000000004780af: mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000042435a: mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x00000000004509ed: mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000450a91: mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000450cc9: mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000044d6d8: mov dword ptr ss:[rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000043b1c0: mov dx, word ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000044ab22: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x000000000044a4f2: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000044ab73: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000044a533: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000435080: mov dx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000435260: mov dx, word ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000044aae0: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000044a4b0: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000044e8f3: mov eax, 0; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x0000000000401009: mov eax, 0; test rax, rax; je 0x1016; call rax; 
0x0000000000401cbd: mov eax, 0; test rax, rax; je 0x1cd0; mov edi, 0x4c1b10; jmp rax; 
0x0000000000401cff: mov eax, 0; test rax, rax; je 0x1d10; mov edi, 0x4c1b10; jmp rax; 
0x000000000042157c: mov eax, 0x10; cmovne rax, rdx; mov qword ptr [rip + 0xa172c], rax; ret; 
0x000000000044e941: mov eax, 0x10; pop rbx; ret; 
0x0000000000477fb3: mov eax, 0x10; syscall; 
0x0000000000450b74: mov eax, 0x101; syscall; 
0x0000000000477ef8: mov eax, 0x106; syscall; 
0x0000000000477ef8: mov eax, 0x106; syscall; cmp rax, -0x1000; ja 0x77f10; ret; 
0x0000000000487c67: mov eax, 0x11; syscall; 
0x0000000000487c67: mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x87c80; ret; 
0x000000000045185b: mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000045185b: mov eax, 0x12e; xor edi, edi; syscall; cmp rax, -0x1000; ja 0x51870; ret; 
0x00000000004807fa: mov eax, 0x14; syscall; 
0x0000000000454c77: mov eax, 0x15; syscall; 
0x0000000000428bf0: mov eax, 0x16; ret; 
0x00000000004509d4: mov eax, 0x18; syscall; 
0x00000000004509d4: mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x509e4; ret; 
0x0000000000454237: mov eax, 0x19; syscall; 
0x0000000000454237: mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x54247; ret; 
0x0000000000451ad4: mov eax, 0x1c; syscall; 
0x0000000000451ad4: mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x51ae4; ret; 
0x000000000044e93a: mov eax, 0x20; pop rbx; ret; 
0x000000000048ba84: mov eax, 0x26; syscall; 
0x000000000048ba84: mov eax, 0x26; syscall; cmp rax, -0xfff; jae 0x8ba94; ret; 
0x0000000000487c54: mov eax, 0x27; syscall; 
0x0000000000487c54: mov eax, 0x27; syscall; ret; 
0x000000000044e933: mov eax, 0x30; pop rbx; ret; 
0x0000000000477e14: mov eax, 0x3f; syscall; 
0x0000000000477e14: mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0x77e24; ret; 
0x000000000044e92c: mov eax, 0x40; pop rbx; ret; 
0x0000000000461de1: mov eax, 0x44000000; mov eax, eax; pop rbp; pop r12; ret; 
0x000000000045159e: mov eax, 0x48; syscall; 
0x000000000048e3af: mov eax, 0x48000000; add esp, 8; ret; 
0x0000000000429a64: mov eax, 0x480000c1; lea edx, [rip + 0x11851]; cmovne rax, rdx; ret; 
0x0000000000450e3b: mov eax, 0x4f; syscall; 
0x0000000000482456: mov eax, 0x59; mov rbp, rsp; mov rsi, rbp; syscall; 
0x0000000000424f8f: mov eax, 0x5d010009; ret; 
0x000000000044e925: mov eax, 0x60; pop rbx; ret; 
0x0000000000454264: mov eax, 0x63; syscall; 
0x0000000000454264: mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x54274; ret; 
0x0000000000477e44: mov eax, 0x66; syscall; 
0x0000000000477e44: mov eax, 0x66; syscall; ret; 
0x0000000000477e64: mov eax, 0x68; syscall; 
0x0000000000477e64: mov eax, 0x68; syscall; ret; 
0x0000000000477e54: mov eax, 0x6b; syscall; 
0x0000000000477e54: mov eax, 0x6b; syscall; ret; 
0x0000000000477e74: mov eax, 0x6c; syscall; 
0x0000000000477e74: mov eax, 0x6c; syscall; ret; 
0x0000000000487c1b: mov eax, 0x7fffffff; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x000000000044e94f: mov eax, 0x80; pop rbx; ret; 
0x000000000046e23f: mov eax, 0x8bfffff6; mov ch, 0; idiv edi; dec dword ptr [rax + 0x29]; ret 0xb8; 
0x0000000000402ce9: mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004023f8: mov eax, 0x9e; syscall; 
0x0000000000451aa4: mov eax, 0xa; syscall; 
0x0000000000451aa4: mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x51ab4; ret; 
0x0000000000451a74: mov eax, 0xb; syscall; 
0x0000000000451a74: mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x51a84; ret; 
0x000000000040f376: mov eax, 0xba; syscall; 
0x0000000000478064: mov eax, 0xc; syscall; 
0x0000000000494902: mov eax, 0xca; lea rdi, [rip + 0x2e612]; syscall; 
0x000000000046c782: mov eax, 0xca; lea rdi, [rip + 0x567a2]; syscall; 
0x000000000046c4fe: mov eax, 0xca; lea rdi, [rip + 0x56a22]; syscall; 
0x000000000046a47a: mov eax, 0xca; lea rdi, [rip + 0x58a9e]; syscall; 
0x000000000046a33a: mov eax, 0xca; lea rdi, [rip + 0x58bde]; syscall; 
0x0000000000466872: mov eax, 0xca; lea rdi, [rip + 0x5c6a2]; syscall; 
0x00000000004667ad: mov eax, 0xca; lea rdi, [rip + 0x5c767]; syscall; 
0x000000000046660b: mov eax, 0xca; lea rdi, [rip + 0x5c909]; syscall; 
0x0000000000466531: mov eax, 0xca; lea rdi, [rip + 0x5c9e3]; syscall; 
0x0000000000458742: mov eax, 0xca; lea rdi, [rip + 0x6b162]; syscall; 
0x00000000004585d6: mov eax, 0xca; lea rdi, [rip + 0x6b2ce]; syscall; 
0x00000000004584b6: mov eax, 0xca; lea rdi, [rip + 0x6b3ee]; syscall; 
0x000000000044fa1e: mov eax, 0xca; lea rdi, [rip + 0x73e86]; syscall; 
0x000000000042887e: mov eax, 0xca; lea rdi, [rip + 0x97f16]; syscall; 
0x0000000000425c7e: mov eax, 0xca; lea rdi, [rip + 0x9ab16]; syscall; 
0x0000000000425c1e: mov eax, 0xca; lea rdi, [rip + 0x9ab76]; syscall; 
0x000000000042585e: mov eax, 0xca; lea rdi, [rip + 0x9af36]; syscall; 
0x00000000004255fe: mov eax, 0xca; lea rdi, [rip + 0x9b196]; syscall; 
0x0000000000425026: mov eax, 0xca; lea rdi, [rip + 0x9b76e]; syscall; 
0x0000000000425026: mov eax, 0xca; lea rdi, [rip + 0x9b76e]; syscall; pop rbp; ret; 
0x0000000000424fee: mov eax, 0xca; lea rdi, [rip + 0x9b7a6]; syscall; 
0x0000000000426bde: mov eax, 0xca; lea rdi, [rip + 0x9c0c6]; syscall; 
0x0000000000426192: mov eax, 0xca; lea rdi, [rip + 0x9cb02]; syscall; 
0x0000000000426192: mov eax, 0xca; lea rdi, [rip + 0x9cb02]; syscall; pop rbx; ret; 
0x00000000004222ef: mov eax, 0xca; lea rdi, [rip + 0xa09a5]; syscall; 
0x00000000004222be: mov eax, 0xca; lea rdi, [rip + 0xa09e6]; syscall; 
0x000000000042203e: mov eax, 0xca; lea rdi, [rip + 0xa0c66]; syscall; 
0x0000000000421b1a: mov eax, 0xca; lea rdi, [rip + 0xa118a]; syscall; 
0x0000000000420730: mov eax, 0xca; lea rdi, [rip + 0xa24f4]; syscall; 
0x0000000000420730: mov eax, 0xca; lea rdi, [rip + 0xa24f4]; syscall; ret; 
0x0000000000420170: mov eax, 0xca; lea rdi, [rip + 0xa2ab4]; syscall; 
0x000000000041fe04: mov eax, 0xca; lea rdi, [rip + 0xa2e20]; syscall; 
0x000000000041fac2: mov eax, 0xca; lea rdi, [rip + 0xa3162]; syscall; 
0x000000000041e55c: mov eax, 0xca; lea rdi, [rip + 0xa46c8]; syscall; 
0x000000000041e2bc: mov eax, 0xca; lea rdi, [rip + 0xa4968]; syscall; 
0x000000000041df68: mov eax, 0xca; lea rdi, [rip + 0xa4cbc]; syscall; 
0x000000000041df68: mov eax, 0xca; lea rdi, [rip + 0xa4cbc]; syscall; ret; 
0x000000000041823e: mov eax, 0xca; lea rdi, [rip + 0xab666]; syscall; 
0x000000000041034d: mov eax, 0xca; lea rdi, [rip + 0xb33f7]; syscall; 
0x000000000041020d: mov eax, 0xca; lea rdi, [rip + 0xb3537]; syscall; 
0x000000000040ffd6: mov eax, 0xca; lea rdi, [rip + 0xb376e]; syscall; 
0x000000000040ff9b: mov eax, 0xca; lea rdi, [rip + 0xb37a9]; syscall; 
0x000000000040feb7: mov eax, 0xca; lea rdi, [rip + 0xb388d]; syscall; 
0x00000000004068eb: mov eax, 0xca; lea rdi, [rip + 0xbbec1]; syscall; 
0x0000000000404f48: mov eax, 0xca; lea rdi, [rip + 0xbd82c]; syscall; 
0x0000000000403de9: mov eax, 0xca; lea rdi, [rip + 0xbe8e3]; syscall; 
0x0000000000403dcc: mov eax, 0xca; lea rdi, [rip + 0xbe900]; syscall; 
0x0000000000403cf6: mov eax, 0xca; lea rdi, [rip + 0xbe9d6]; syscall; 
0x00000000004012c7: mov eax, 0xca; lea rdi, [rip + 0xc14fd]; syscall; 
0x000000000047554d: mov eax, 0xca; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x0000000000401436: mov eax, 0xca; syscall; 
0x000000000046c8e4: mov eax, 0xca; syscall; ret; 
0x0000000000464fdf: mov eax, 0xd; syscall; 
0x0000000000487c24: mov eax, 0xd9; syscall; 
0x0000000000487c24: mov eax, 0xd9; syscall; cmp rax, -0x1000; ja 0x87c38; ret; 
0x000000000040f3a4: mov eax, 0xe; syscall; 
0x0000000000477725: mov eax, 0xe4; syscall; 
0x000000000040f382: mov eax, 0xea; syscall; 
0x0000000000464f11: mov eax, 0xf; syscall; 
0x0000000000432cb9: mov eax, 0xf66b8b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000477e09: mov eax, 0xfdc791e8; call qword ptr [rax - 0x5e1f00d]; mov eax, 0x3f; syscall; 
0x0000000000487070: mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000048719d: mov eax, 0xffffc002; sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000464d15: mov eax, 0xffffffb0; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000450aa1: mov eax, 0xffffffc0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004519f9: mov eax, 0xffffffc0; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000004780a9: mov eax, 0xffffffc0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000004826b5: mov eax, 0xffffffc0; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x0000000000424351: mov eax, 0xffffffc0; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x0000000000464d75: mov eax, 0xffffffe0; add rax, qword ptr fs:[0]; ret; 
0x0000000000464d55: mov eax, 0xffffffe8; add rax, qword ptr fs:[0]; ret; 
0x0000000000464d35: mov eax, 0xfffffff0; add rax, qword ptr fs:[0]; ret; 
0x000000000046666e: mov eax, 0xffffffff; pop rbp; pop r12; pop r13; ret; 
0x000000000041f3e1: mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x0000000000419c00: mov eax, 0xffffffff; pop rbp; ret; 
0x000000000041a361: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000041a078: mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000041b6a3: mov eax, 0xffffffff; pop rbx; ret; 
0x000000000047770c: mov eax, 0xffffffff; endbr64; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000041a9c0: mov eax, 0xffffffff; ret; 
0x0000000000480fb0: mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000490f18: mov eax, 1; cmp qword ptr [rsi + 8], rcx; ja 0x90f25; sbb eax, eax; ret; 
0x000000000048708d: mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000000486fb5: mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x000000000041f3b9: mov eax, 1; movups xmmword ptr [rbp + 0x38], xmm0; pop rbp; pop r12; ret; 
0x000000000046c5e9: mov eax, 1; pop rbp; pop r12; pop r13; ret; 
0x0000000000474a54: mov eax, 1; pop rbp; pop r12; ret; 
0x0000000000428d43: mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000004738aa: mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000401e43: mov eax, 1; leave; ret; 
0x00000000004774a1: mov eax, 1; ret; 
0x0000000000450d00: mov eax, 1; syscall; 
0x0000000000450d00: mov eax, 1; syscall; cmp rax, -0x1000; ja 0x50d60; ret; 
0x0000000000451824: mov eax, 1; syscall; cmp rax, -0x1000; ja 0x51838; ret; 
0x00000000004774b1: mov eax, 2; ret; 
0x00000000004774c1: mov eax, 3; ret; 
0x0000000000451534: mov eax, 3; syscall; 
0x0000000000451534: mov eax, 3; syscall; cmp rax, -0x1000; ja 0x51548; ret; 
0x00000000004910c5: mov eax, 4; cmp dil, 3; jne 0x910f0; add rsp, 8; ret; 
0x00000000004774d1: mov eax, 4; ret; 
0x0000000000450a73: mov eax, 4; syscall; 
0x0000000000450a73: mov eax, 4; syscall; cmp rax, -0x1000; ja 0x50a88; ret; 
0x00000000004774e1: mov eax, 5; ret; 
0x0000000000450ad2: mov eax, 5; syscall; 
0x0000000000450ad2: mov eax, 5; syscall; cmp rax, -0x1000; ja 0x50ae8; ret; 
0x00000000004774f1: mov eax, 6; ret; 
0x0000000000477e93: mov eax, 6; syscall; 
0x0000000000477e93: mov eax, 6; syscall; cmp rax, -0x1000; ja 0x77ea8; ret; 
0x0000000000477501: mov eax, 7; ret; 
0x00000000004910dd: mov eax, 8; add rsp, 8; ret; 
0x000000000044e948: mov eax, 8; pop rbx; ret; 
0x0000000000450d94: mov eax, 8; syscall; 
0x0000000000450d94: mov eax, 8; syscall; cmp rax, -0x1000; ja 0x50da8; ret; 
0x00000000004519df: mov eax, 9; syscall; 
0x0000000000450c55: mov eax, dword ptr [0x18]; test eax, eax; jne 0x50c70; syscall; 
0x000000000040fe39: mov eax, dword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000419bf5: mov eax, dword ptr [rax + 0x20]; jmp rax; 
0x0000000000464dcf: mov eax, dword ptr [rax + 0x58]; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000041f540: mov eax, dword ptr [rax + 0x68]; test rax, rax; jne 0x1f538; ret; 
0x0000000000474975: mov eax, dword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x0000000000474aaa: mov eax, dword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000419bee: mov eax, dword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000048cdfc: mov eax, dword ptr [rax + 8]; mov rdx, r13; add rax, qword ptr [rbx]; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000484345: mov eax, dword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x0000000000484335: mov eax, dword ptr [rax + 8]; ret; 
0x0000000000463364: mov eax, dword ptr [rax + rbp*8]; test rax, rax; je 0x6336e; call rax; 
0x00000000004944c0: mov eax, dword ptr [rax + rbx*8]; test rax, rax; je 0x944ca; call rax; 
0x00000000004145a6: mov eax, dword ptr [rax + rcx*8]; jmp rax; 
0x0000000000464d23: mov eax, dword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000004630de: mov eax, dword ptr [rax + riz*8]; test rax, rax; je 0x630e8; call rax; 
0x00000000004708f1: mov eax, dword ptr [rax + rsi*8]; jmp rax; 
0x00000000004904dd: mov eax, dword ptr [rax]; add rsp, 8; ret; 
0x000000000048e299: mov eax, dword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [rcx], r8; ret; 
0x000000000048e2a9: mov eax, dword ptr [rax]; mov qword ptr [r9], r8; add rsp, 8; ret; 
0x0000000000474669: mov eax, dword ptr [rax]; mov qword ptr [rdx], rcx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000464d20: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000004202d9: mov eax, dword ptr [rax]; test rax, rax; jne 0x202d0; ret; 
0x00000000004826bd: mov eax, dword ptr [rax]; ret; 
0x000000000046679f: mov eax, dword ptr [rbp + 0x31]; sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x5c767]; syscall; 
0x0000000000403330: mov eax, dword ptr [rbp + 8]; sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045217f: mov eax, dword ptr [rbp - 0x58]; mov r15d, r13d; call rax; 
0x0000000000486d16: mov eax, dword ptr [rbp - 8]; xor rax, qword ptr fs:[0x28]; jne 0x86da5; leave; ret; 
0x000000000047f51c: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r11]; test r9d, r9d; jne 0x7f537; mov qword ptr [rbp - 0xd8], r11; call rax; 
0x000000000047e70a: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r13]; call rax; 
0x000000000047eb4b: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r15]; test ecx, ecx; jne 0x7eb57; call rax; 
0x000000000047f3e8: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r15]; test edx, edx; jne 0x7f3f4; call rax; 
0x000000000047ecd8: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r15]; test r11d, r11d; jne 0x7ece5; call rax; 
0x0000000000487779: mov eax, dword ptr [rbx + 0x10]; mov qword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x458]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000487731: mov eax, dword ptr [rbx + 0x10]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x0000000000487721: mov eax, dword ptr [rbx + 0x10]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000041e791: mov eax, dword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000041e7ae: mov eax, dword ptr [rbx + 0x18]; mov esi, dword ptr [rsp + 0xc]; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000041e874: mov eax, dword ptr [rbx + 0x20]; add rsp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000041ea44: mov eax, dword ptr [rbx + 0x28]; add rsp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000041eead: mov eax, dword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000041f32f: mov eax, dword ptr [rbx + 0x48]; add rsp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x000000000045420a: mov eax, dword ptr [rbx]; mov qword ptr [rip + 0x6ce7d], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044a054: mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x0000000000448884: mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000044a035: mov eax, dword ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x0000000000448875: mov eax, dword ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x000000000044a066: mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000448896: mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000044a0e7: mov eax, dword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x00000000004488d7: mov eax, dword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000044a086: mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x00000000004488a6: mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000044a107: mov eax, dword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x00000000004488f7: mov eax, dword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000044a0a6: mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x00000000004488b6: mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000044a127: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000448917: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000044a0c6: mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x00000000004488c6: mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000449fb7: mov eax, dword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000448807: mov eax, dword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000428289: mov eax, dword ptr [rcx + rax + 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x0000000000442b7a: mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000044ee9d: mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x4ee88; ret; 
0x0000000000444452: mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000474c0f: mov eax, dword ptr [rcx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044a010: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x000000000044a020: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x0000000000448860: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000044a030: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x0000000000448870: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x000000000044a050: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x0000000000448880: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x0000000000448850: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x0000000000449f61: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000044a061: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000448891: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000044a081: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x00000000004488a1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000044a0a1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x00000000004488b1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000044a0c1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x00000000004488c1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000044a0e1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x00000000004488d1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000044a101: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x00000000004488f1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000044a121: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000448911: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000449fb1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000448801: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x00000000004487b1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000449fe1: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x0000000000449ff1: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x0000000000448841: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x0000000000448831: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x0000000000481012: mov eax, dword ptr [rcx]; ret; 
0x00000000004202f4: mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000042031c: mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000047534e: mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000475360: mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000452e2f: mov eax, dword ptr [rdi + 0x10]; test r8, r8; jne 0x52e72; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452e58: mov eax, dword ptr [rdi + 0x10]; test r8, r8; jne 0x52edd; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452bc0: mov eax, dword ptr [rdi + 0x10]; test r8, r8; jne 0x52f4b; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452d25: mov eax, dword ptr [rdi + 0x10]; test r8, r8; jne 0x52fb9; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452c44: mov eax, dword ptr [rdi + 0x10]; test r8, r8; jne 0x53027; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452dd9: mov eax, dword ptr [rdi + 0x10]; test r8, r8; jne 0x53095; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452c9e: mov eax, dword ptr [rdi + 0x10]; test r8, r8; jne 0x53103; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452c71: mov eax, dword ptr [rdi + 0x10]; test r8, r8; jne 0x53171; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452cf8: mov eax, dword ptr [rdi + 0x10]; test r8, r8; jne 0x531df; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452d7f: mov eax, dword ptr [rdi + 0x10]; test r8, r8; jne 0x5324d; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452bea: mov eax, dword ptr [rdi + 0x10]; test r8, r8; jne 0x532bb; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452ccb: mov eax, dword ptr [rdi + 0x10]; test r8, r8; jne 0x53329; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452dac: mov eax, dword ptr [rdi + 0x10]; test r8, r8; jne 0x53397; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452c17: mov eax, dword ptr [rdi + 0x10]; test r8, r8; jne 0x53405; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452d52: mov eax, dword ptr [rdi + 0x10]; test r8, r8; jne 0x53473; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452e06: mov eax, dword ptr [rdi + 0x10]; test r8, r8; jne 0x534e1; mov rdi, qword ptr [r15]; call rbx; 
0x000000000041e64c: mov eax, dword ptr [rdi + 0x18]; punpckhqdq xmm0, xmm0; mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000464576: mov eax, dword ptr [rdi + 0x20]; mov rbp, rdi; test rax, rax; je 0x64583; call rax; 
0x0000000000494795: mov eax, dword ptr [rdi + 0x20]; test rax, rax; je 0x947a4; call rax; 
0x0000000000421095: mov eax, dword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000421be3: mov eax, dword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x000000000041e61f: mov eax, dword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000420665: mov eax, dword ptr [rdi + 0x68]; ret; 
0x00000000004904f5: mov eax, dword ptr [rdi + 0x90]; ret; 
0x0000000000490565: mov eax, dword ptr [rdi + 0x98]; ret; 
0x0000000000474955: mov eax, dword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x74968; ret; 
0x00000000004905a5: mov eax, dword ptr [rdi + 0xa0]; ret; 
0x0000000000490605: mov eax, dword ptr [rdi + 0xa8]; ret; 
0x00000000004905f5: mov eax, dword ptr [rdi + 0xb0]; ret; 
0x00000000004905b5: mov eax, dword ptr [rdi + 0xb8]; ret; 
0x0000000000490575: mov eax, dword ptr [rdi + 0xc0]; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000042078b: mov eax, dword ptr [rdi + 8]; cmp rax, rdx; jae 0x207b8; movzx eax, byte ptr [rax]; ret; 
0x0000000000490e55: mov eax, dword ptr [rdi + 8]; mov rsi, rdi; test rax, rax; je 0x90e70; mov edi, 1; jmp rax; 
0x00000000004327c4: mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x331df; xor eax, eax; ret; 
0x000000000044ca2c: mov eax, dword ptr [rdi - 4]; mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x4cc40; xor eax, eax; ret; 
0x0000000000432a23: mov eax, dword ptr [rdi - 4]; mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x331df; xor eax, eax; ret; 
0x0000000000432d21: mov eax, dword ptr [rdi - 8]; cmp rcx, rax; jne 0x331d3; xor eax, eax; ret; 
0x0000000000432797: mov eax, dword ptr [rdi - 8]; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x331d3; xor eax, eax; ret; 
0x0000000000421505: mov eax, dword ptr [rdi]; cmp rax, 0x2000000; jbe 0x21510; ret; 
0x0000000000421165: mov eax, dword ptr [rdi]; cmp rax, 0x408; jbe 0x21170; ret; 
0x0000000000421565: mov eax, dword ptr [rdi]; cmp rax, 0xa0; jbe 0x21570; ret; 
0x00000000004211a5: mov eax, dword ptr [rdi]; cmp rax, 0xffff; jbe 0x211b0; ret; 
0x000000000048ac95: mov eax, dword ptr [rdi]; cmp rax, rsi; je 0x8aca0; ret; 
0x00000000004202e6: mov eax, dword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000492654: mov eax, dword ptr [rdi]; test eax, eax; jne 0x92660; ret; 
0x0000000000492894: mov eax, dword ptr [rdi]; test eax, eax; jne 0x928a0; ret; 
0x0000000000421535: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x9f1f2], 1; mov dword ptr [rip + 0x9f1e4], eax; ret; 
0x00000000004214e5: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x9f242], 1; mov qword ptr [rip + 0x9f20f], rax; ret; 
0x00000000004214c5: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x9f262], 1; mov qword ptr [rip + 0x9f227], rax; ret; 
0x0000000000421555: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0xa1756], eax; ret; 
0x00000000004211c5: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x9f599], rax; ret; 
0x0000000000421155: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x9f5b9], rax; ret; 
0x0000000000421145: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x9f5d1], rax; ret; 
0x000000000041a9ae: mov eax, dword ptr [rdx + 0x4c]; cmp dword ptr [rdx + 0x48], eax; cmovne eax, ecx; ret; 
0x0000000000440776: mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004822da: mov eax, dword ptr [rdx + rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x0000000000487ea4: mov eax, dword ptr [rip + 0x3b97e]; ret; 
0x0000000000481df5: mov eax, dword ptr [rip + 0x3e2f5]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x41503]; mov qword ptr [rsi], rax; ret; 
0x0000000000481dff: mov eax, dword ptr [rip + 0x41503]; mov qword ptr [rsi], rax; ret; 
0x0000000000481d8e: mov eax, dword ptr [rip + 0x4157c]; mov rax, r8; ret; 
0x0000000000481c8c: mov eax, dword ptr [rip + 0x4167e]; jne 0x81ca0; lea rax, [r8 + 1]; mov qword ptr [rip + 0x41671], rax; ret; 
0x000000000046a416: mov eax, dword ptr [rip + 0x445b0100]; mov eax, eax; pop rbp; pop r12; ret; 
0x00000000004776e1: mov eax, dword ptr [rip + 0x483b1]; test rax, rax; je 0x77720; call rax; 
0x0000000000461c85: mov eax, dword ptr [rip + 0x61165]; ret; 
0x0000000000459638: mov eax, dword ptr [rip + 0x6979e]; test eax, eax; je 0x59648; ret; 
0x00000000004581a5: mov eax, dword ptr [rip + 0x6b6fd]; ret; 
0x0000000000456c40: mov eax, dword ptr [rip + 0x6cbae]; pop rbx; and eax, 0xffffffc7; or eax, 0x18; mov dword ptr [rip + 0x6cba1], eax; ret; 
0x0000000000456c10: mov eax, dword ptr [rip + 0x6cbde]; pop rbx; and eax, 0xffffffc7; or eax, 8; mov dword ptr [rip + 0x6cbd1], eax; ret; 
0x0000000000456be0: mov eax, dword ptr [rip + 0x6cc0e]; and eax, 0xffffffc7; or eax, 0x10; mov dword ptr [rip + 0x6cc02], eax; pop rbx; ret; 
0x0000000000456ba0: mov eax, dword ptr [rip + 0x6cc4e]; pop rbx; and eax, 0xfffffff8; or eax, 3; mov dword ptr [rip + 0x6cc41], eax; ret; 
0x0000000000456b70: mov eax, dword ptr [rip + 0x6cc7e]; pop rbx; and eax, 0xfffffff8; or eax, 1; mov dword ptr [rip + 0x6cc71], eax; ret; 
0x0000000000456b40: mov eax, dword ptr [rip + 0x6ccae]; and eax, 0xfffffff8; or eax, 2; mov dword ptr [rip + 0x6cca2], eax; pop rbx; ret; 
0x0000000000455ea4: mov eax, dword ptr [rip + 0x6d9e6]; test eax, eax; je 0x55eb0; ret; 
0x00000000004541b4: mov eax, dword ptr [rip + 0x6f66e]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000451935: mov eax, dword ptr [rip + 0x6f7dd]; test rax, rax; je 0x51941; ret; 
0x00000000004214a4: mov eax, dword ptr [rip + 0x9f28e]; mov dword ptr [r11 + 0x24], ebp; pop rbp; mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x0000000000420645: mov eax, dword ptr [rip + 0x9fad5]; ret; 
0x000000000049113a: mov eax, dword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000048e39a: mov eax, dword ptr [rsi + 0xa8]; add rsp, 8; ret; 
0x000000000048e3f9: mov eax, dword ptr [rsi + 0xb0]; add rsp, 8; ret; 
0x000000000048e3ad: mov eax, dword ptr [rsi + 0xb8]; add rsp, 8; ret; 
0x00000000004141b9: mov eax, dword ptr [rsi + rax*8]; jmp rax; 
0x0000000000484f8a: mov eax, dword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x000000000040265a: mov eax, dword ptr [rsp + 0x18]; call rax; 
0x000000000045a0a5: mov eax, dword ptr [rsp + 0x20]; call rax; 
0x0000000000459aa9: mov eax, dword ptr [rsp + 0x28]; call rax; 
0x000000000045a8fc: mov eax, dword ptr [rsp + 0x30]; call rax; 
0x0000000000450cb2: mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000490f73: mov eax, dword ptr [rsp + 8]; mov qword ptr [rsp + 0x10], r10; call rax; 
0x0000000000451cd9: mov eax, dword ptr [rsp + 8]; mov rdi, r13; call rax; 
0x000000000049242b: mov eax, dword ptr [rsp + 8]; mov rdx, r15; mov rsi, qword ptr [r12 + r14*8 + 0x10]; mov rdi, r13; call rax; 
0x0000000000490f94: mov eax, dword ptr [rsp + 8]; mov rdx, r9; mov rdi, r15; lea rbx, [r12 + rcx*8]; mov rsi, qword ptr [rbx]; call rax; 
0x000000000048e076: mov eax, dword ptr [rsp]; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x000000000048dd8d: mov eax, dword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000040f52c: mov eax, dword ptr [rsp]; call rax; 
0x0000000000419175: mov eax, dword ptr [rsp]; mov esi, 0xffffffff; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x000000000040f691: mov eax, dword ptr [rsp]; mov r13, r15; add r15, r12; call rax; 
0x000000000040f491: mov eax, dword ptr [rsp]; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000040f61c: mov eax, dword ptr [rsp]; mov rsi, r12; mov rdi, r13; call rax; 
0x000000000048957c: mov eax, dword ptr [rsp]; pop rbx; add rax, qword ptr [rdx + 8]; pop rbp; pop r12; jmp rax; 
0x0000000000450c54: mov eax, dword ptr fs:[0x18]; test eax, eax; jne 0x50c70; syscall; 
0x00000000004826bc: mov eax, dword ptr fs:[rax]; ret; 
0x00000000004100aa: mov eax, eax; add qword ptr [rip + 0xb36a4], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040f3bf: mov eax, eax; add rsp, 0x118; ret; 
0x0000000000450be6: mov eax, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000450d32: mov eax, eax; mov edi, dword ptr [rsp + 8]; mov eax, 1; syscall; 
0x0000000000450c92: mov eax, eax; mov edi, dword ptr [rsp + 8]; xor eax, eax; syscall; 
0x0000000000481172: mov eax, eax; neg rax; test cl, cl; cmove r8, rax; mov rax, r8; ret; 
0x000000000042667a: mov eax, eax; pop r12; pop r13; ret; 
0x000000000042193e: mov eax, eax; pop r12; ret; 
0x00000000004266e7: mov eax, eax; pop r13; ret; 
0x0000000000418a01: mov eax, eax; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000041b167: mov eax, eax; pop rbp; pop r12; ret; 
0x0000000000425794: mov eax, eax; pop rbp; ret; 
0x000000000041115d: mov eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000425e9a: mov eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000041011c: mov eax, eax; pop rbx; pop rbp; ret; 
0x00000000004102fe: mov eax, eax; pop rbx; ret; 
0x00000000004502e4: mov eax, eax; shr rax, 2; vzeroupper; ret; 
0x0000000000410111: mov eax, eax; ret; 
0x00000000004504a2: mov eax, eax; syscall; 
0x0000000000446aa1: mov eax, eax; vzeroupper; ret; 
0x000000000049045d: mov eax, ebp; mov rcx, r12; mov esi, 0x1a; mov edi, 1; call rax; 
0x00000000004903e0: mov eax, ebp; mov rcx, r12; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000488216: mov eax, ebp; pop r12; pop r13; ret; 
0x00000000004184ee: mov eax, ebp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000004520d9: mov eax, ebp; pop rbp; pop r12; pop r13; ret; 
0x00000000004520c4: mov eax, ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000041c50e: mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000490713: mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000486f43: mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000475539: mov eax, ebx; and eax, 0xc; cmp eax, 4; je 0x75544; ret; 
0x000000000049030c: mov eax, ebx; mov rcx, r12; or esi, 2; mov edi, 1; call rax; 
0x000000000041ce69: mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x000000000041a08e: mov eax, ebx; pop rbx; pop rbp; ret; 
0x0000000000426167: mov eax, ebx; syscall; 
0x0000000000486e0b: mov eax, ecx; adc eax, eax; ret; 
0x00000000004650b3: mov eax, ecx; add rsp, 0x148; ret; 
0x0000000000478030: mov eax, ecx; add rsp, 0x38; ret; 
0x000000000044e95f: mov eax, ecx; and eax, 0x7ff80000; div esi; mov eax, eax; ret; 
0x00000000004753d1: mov eax, ecx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000406fa6: mov eax, ecx; pop r12; ret; 
0x000000000046c9b8: mov eax, ecx; pop r14; ret; 
0x000000000046c907: mov eax, ecx; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000406f78: mov eax, ecx; pop rbx; pop rbp; pop r12; ret; 
0x000000000044e878: mov eax, ecx; pop rbx; shr eax, 0xe; and eax, 0x3fc00; ret; 
0x000000000044e8c3: mov eax, ecx; pop rbx; shr eax, 6; and eax, 0x3fffc00; ret; 
0x0000000000483a03: mov eax, ecx; sub eax, r8d; ret; 
0x000000000040f36f: mov eax, ecx; syscall; 
0x0000000000466f04: mov eax, edi; mov rdi, rdx; cmp rax, 9; ja 0x66ee0; mov rax, r8; ret; 
0x0000000000421939: mov eax, edi; pop rbx; pop rbp; mov rax, r8; pop r12; ret; 
0x0000000000420675: mov eax, edi; ret; 
0x000000000044e896: mov eax, edx; and ecx, 0x3fc00; cmp edx, 0xff; cmove rax, rcx; ret; 
0x00000000004846d5: mov eax, edx; mov rcx, qword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x84714; add rsp, 0x58; ret; 
0x0000000000484b65: mov eax, edx; mov rcx, qword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x84ba4; add rsp, 0x58; ret; 
0x0000000000484847: mov eax, edx; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x84894; add rsp, 0x68; ret; 
0x00000000004768fc: mov eax, edx; mov rdi, rsi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000044e921: mov eax, edx; pop rbx; ret; 
0x000000000044e974: mov eax, edx; xor edx, edx; and eax, 0x3fffc00; div ecx; mov eax, eax; ret; 
0x0000000000447179: mov eax, edx; ret; 
0x0000000000402692: mov eax, edx; syscall; 
0x0000000000465179: mov eax, esi; mov r10d, 8; mov rsi, r8; mov eax, 0xe; syscall; 
0x00000000004850b9: mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000000450492: mov eax, esi; syscall; 
0x0000000000490879: mov eax, esp; mov rcx, r14; mov esi, 1; mov edi, 1; call rax; 
0x0000000000475669: mov eax, esp; pop r12; pop r13; ret; 
0x00000000004031c9: mov eax, esp; pop r12; ret; 
0x00000000004527d2: mov eax, esp; pop rbp; pop r12; jmp rax; 
0x0000000000451b59: mov eax, esp; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000000474f45: mov eax, esp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000042175b: mov eax, esp; pop rbp; pop r12; pop r13; ret; 
0x00000000004825b6: mov eax, esp; pop rbp; pop r12; ret; 
0x00000000004518e2: mov eax, esp; pop rbx; pop r12; ret; 
0x0000000000417761: mov eax, esp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040312b: mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x000000000048bb09: mov eax, esp; sar rax, 3; pop rbx; pop rbp; pop r12; ret; 
0x000000000046cb64: mov eax, gs; jp 0x6cb67; jmp qword ptr [rsi + 0xf]; 
0x0000000000475538: mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x75544; ret; 
0x0000000000484f75: mov eax, r12d; pop r12; ret; 
0x000000000048d748: mov eax, r12d; pop rbp; pop r12; pop r13; ret; 
0x00000000004825b5: mov eax, r12d; pop rbp; pop r12; ret; 
0x0000000000467164: mov eax, r12d; pop rbx; pop r12; ret; 
0x000000000045406c: mov eax, r12d; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000041811c: mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000040f3be: mov eax, r8d; add rsp, 0x118; ret; 
0x0000000000418a00: mov eax, r8d; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000461de5: mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000041115c: mov eax, r8d; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004101bd: mov eax, r8d; pop rbx; pop rbp; ret; 
0x00000000004102fd: mov eax, r8d; pop rbx; ret; 
0x000000000046a255: mov eax, r8d; ret; 
0x00000000004504a1: mov eax, r8d; syscall; 
0x00000000004650b2: mov eax, r9d; add rsp, 0x148; ret; 
0x000000000047802f: mov eax, r9d; add rsp, 0x38; ret; 
0x000000000041ad65: mov eax, r9d; syscall; 
0x000000000046c5e7: mov ebp, 0x1b85b; add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x0000000000452e53: mov ebp, 0x4d000000; mov eax, dword ptr [rdi + 0x10]; test r8, r8; jne 0x52edd; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004329b4: mov ebp, 0x4e6f0ff3; mov ebp, 0xf66bdb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000487214: mov ebp, 0x89480003; add eax, 0x3bdaa; ret; 
0x00000000004871fd: mov ebp, 0x89480003; add eax, 0x3bdc1; add rsp, 8; ret; 
0x0000000000445aff: mov ebp, 0x8b00055e; or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004329b9: mov ebp, 0xf66bdb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000047651c: mov ebp, 0xf80148c0; ret; 
0x00000000004767ac: mov ebp, 0xf80148c6; ret; 
0x00000000004704d4: mov ebp, 0xfffffb18; add byte ptr [rcx - 0x77], al; ret 0x1d74; 
0x0000000000413e04: mov ebp, 0xfffffb40; mov rsi, r13; mov rdi, r12; sub r15, r13; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000004807ee: mov ebp, 0xfffffba0; lea rsi, [rbp - 0x430]; mov eax, 0x14; syscall; 
0x00000000004908b8: mov ebp, dword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000490a31: mov ebp, dword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000452928: mov ebp, dword ptr [rsp + 0x10]; test r13, r13; jne 0x52980; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000452958: mov ebp, dword ptr [rsp + 0x10]; test r13, r13; jne 0x529e0; mov rdi, qword ptr [r12]; call rbx; 
0x00000000004653e9: mov ebp, eax; mov rdi, r12; call rbx; 
0x000000000046f94b: mov ebp, ebx; sar r13, 2; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x00000000004850bf: mov ebp, ecx; nop; jmp rdx; 
0x000000000040f695: mov ebp, edi; add r15, r12; call rax; 
0x0000000000450e36: mov ebp, edi; mov rdi, rbp; mov eax, 0x4f; syscall; 
0x00000000004776da: mov ebp, edi; sub rsp, 8; mov rax, qword ptr [rip + 0x483b1]; test rax, rax; je 0x77720; call rax; 
0x000000000046457a: mov ebp, edi; test rax, rax; je 0x64583; call rax; 
0x000000000048245c: mov ebp, esp; mov rsi, rbp; syscall; 
0x00000000004070b4: mov ebx, 0x850f5f3c; test byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004135a8: mov ebx, 0x89480003; ret; 
0x00000000004754d8: mov ebx, 0xafb8341; je 0x754e0; ret; 
0x0000000000432b39: mov ebx, 0xf66bbb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000047ecd1: mov ebx, dword ptr [rbp - 0xc4]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; test r11d, r11d; jne 0x7ece5; call rax; 
0x0000000000434cb1: mov ebx, dword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434c95: mov ebx, dword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000484441: mov ebx, dword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x00000000004843bf: mov ebx, dword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000470ddd: mov ebx, ecx; lea rsi, [rip + 0x4cfda]; mov dword ptr [rbp - 0x530], 1; mov dword ptr [rbp - 0x4e8], 0; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470d15: mov ebx, ecx; lea rsi, [rip + 0x4d4a2]; mov dword ptr [rbp - 0x4e0], 1; mov dword ptr [rbp - 0x4f0], 0x20; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470b4c: mov ebx, ecx; mov dword ptr [rbp - 0x4d0], 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004708e4: mov ebx, ecx; mov dword ptr [rbp - 0x4e8], 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x0000000000470d64: mov ebx, ecx; mov dword ptr [rbp - 0x4f8], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470e6c: mov ebx, ecx; mov dword ptr [rbp - 0x508], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470724: mov ebx, ecx; mov dword ptr [rbp - 0x514], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470e32: mov ebx, ecx; mov dword ptr [rbp - 0x520], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004706a4: mov ebx, ecx; mov dword ptr [rbp - 0x528], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000046fccc: mov ebx, ecx; xor r9d, r9d; mov dword ptr [rbp - 0x4d0], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000047496d: mov ebx, edi; test byte ptr [rdi], 2; jne 0x749e8; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x000000000040f36a: mov ecx, 0x27; mov eax, ecx; syscall; 
0x000000000041680c: mov ecx, 0x89000002; ret 0xc083; 
0x0000000000477da3: mov ecx, 0x89fffd97; ret 0xf883; 
0x000000000041238c: mov ecx, 0x8bfffff1; test dword ptr [rax], edx; idiv edi; inc dword ptr [rcx]; ret; 
0x0000000000481d6b: mov ecx, 0xe8000297; or al, 0x13; clc; jmp qword ptr [rsi + 0x66]; 
0x0000000000432c39: mov ecx, 0xf66b9b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004509e5: mov ecx, 0xffffffc0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000464cf4: mov ecx, 0xffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000470db1: mov ecx, 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000041cf24: mov ecx, 3; mov edx, 1; mov rdi, rbx; call qword ptr [rbp + 0x48]; 
0x0000000000451a21: mov ecx, 9; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x0000000000474316: mov ecx, dword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000047eb44: mov ecx, dword ptr [rbp - 0xc4]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; test ecx, ecx; jne 0x7eb57; call rax; 
0x000000000043df73: mov ecx, dword ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000043df60: mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000043df4e: mov ecx, dword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000490533: mov ecx, dword ptr [rdi + rsi*8]; cmp al, 8; jne 0x174b; mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x0000000000490f15: mov ecx, dword ptr [rdx + 8]; mov eax, 1; cmp qword ptr [rsi + 8], rcx; ja 0x90f25; sbb eax, eax; ret; 
0x0000000000440773: mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044ac94: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000044acb4: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000044a5f4: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000044a5e4: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000044ad15: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000044ad35: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000044a675: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000044a655: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000044ac55: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000044a5b5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000044ad78: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000044a6b8: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000044ad98: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000044a6d8: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000044ad59: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000044a699: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000044acd5: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000044a615: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000044ac74: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000044a5d4: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000044acf5: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000044a635: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000044b164: mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000446f34: mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x000000000044d6d3: mov ecx, dword ptr [rsi + rdx - 4]; mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000044b184: mov ecx, dword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000446f44: mov ecx, dword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x000000000044d6c3: mov ecx, dword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x0000000000435055: mov ecx, dword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435071: mov ecx, dword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435235: mov ecx, dword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435251: mov ecx, dword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435415: mov ecx, dword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435431: mov ecx, dword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435605: mov ecx, dword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435621: mov ecx, dword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435805: mov ecx, dword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435821: mov ecx, dword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435a05: mov ecx, dword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435a21: mov ecx, dword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435265: mov ecx, dword ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000044ca2f: mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x4cc40; xor eax, eax; ret; 
0x0000000000432a26: mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x331df; xor eax, eax; ret; 
0x0000000000435643: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435843: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435a43: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004327c1: mov ecx, dword ptr [rsi - 4]; mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x331df; xor eax, eax; ret; 
0x000000000043a734: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043a6b4: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043a634: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043a7b4: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043279b: mov ecx, dword ptr [rsi - 8]; cmp rcx, rax; jne 0x331d3; xor eax, eax; ret; 
0x000000000043a5a5: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043a515: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043a485: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432d1d: mov ecx, dword ptr [rsi - 8]; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x331d3; xor eax, eax; ret; 
0x0000000000434e75: mov ecx, dword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434e91: mov ecx, dword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000044ab10: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000044a4e0: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000044ab61: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000044a521: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000043b0e3: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000043b073: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000043b003: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000446f30: mov ecx, dword ptr [rsi]; mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x000000000044ab20: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x000000000044a4f0: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000044ab71: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000044a531: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000044ab40: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x000000000044a500: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000044ab91: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000044a541: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000044abb1: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000044a551: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000043af25: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043aeb5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043ae45: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043add5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043ad65: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043acf5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043ac85: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000446f41: mov ecx, dword ptr [rsi]; mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x000000000044abd1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000044a561: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000044abf1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000044a571: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000044ac11: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000044a581: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000043b1c5: mov ecx, dword ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000044aaf1: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000044a4c1: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000484f2d: mov ecx, dword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x000000000044f31b: mov ecx, dword ptr [rsp + 0x10]; mov rdi, r12; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000045b9e0: mov ecx, dword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; call rbx; 
0x000000000045ecfe: mov ecx, dword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; call rbx; 
0x000000000045a4ae: mov ecx, dword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x60]; call rbx; 
0x000000000044fdd3: mov ecx, dword ptr [rsp + 0x20]; mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000045ab63: mov ecx, dword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; call rbx; 
0x000000000045a8ed: mov ecx, dword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x0000000000460463: mov ecx, dword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; call rbx; 
0x000000000045d980: mov ecx, dword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000045cf40: mov ecx, dword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000045b76b: mov ecx, dword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000460011: mov ecx, dword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045e914: mov ecx, dword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000048444b: mov ecx, dword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x00000000004843c9: mov ecx, dword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x00000000004846d8: mov ecx, dword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x84714; add rsp, 0x58; ret; 
0x0000000000484b68: mov ecx, dword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x84ba4; add rsp, 0x58; ret; 
0x000000000048484a: mov ecx, dword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x84894; add rsp, 0x68; ret; 
0x000000000043df5f: mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000454360: mov ecx, eax; and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000048100b: mov ecx, eax; cmp rcx, rdx; jne 0x80fe8; mov eax, dword ptr [rcx]; ret; 
0x000000000044ee9b: mov ecx, eax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x4ee88; ret; 
0x000000000044e894: mov ecx, eax; mov eax, edx; and ecx, 0x3fc00; cmp edx, 0xff; cmove rax, rcx; ret; 
0x000000000046c9b1: mov ecx, eax; pop r12; pop r13; mov rax, r9; pop r14; ret; 
0x0000000000468ced: mov ecx, edi; jmp qword ptr [rsi - 0x7f]; 
0x000000000045b3ca: mov ecx, edi; push rax; push rbp; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x60]; call rbx; 
0x00000000004203c6: mov ecx, edx; add rax, rcx; mov qword ptr [rdi + 0x18], rsi; mov qword ptr [rdi + 8], rax; xor eax, eax; ret; 
0x000000000042038a: mov ecx, edx; add rax, rcx; mov qword ptr [rdi + 8], rax; xor eax, eax; ret; 
0x000000000044e36e: mov ecx, edx; movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000044d6a6: mov ecx, edx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000049087c: mov ecx, esi; mov esi, 1; mov edi, 1; call rax; 
0x000000000049045a: mov ecx, esi; mov r8, r13; mov rcx, r12; mov esi, 0x1a; mov edi, 1; call rax; 
0x00000000004903dd: mov ecx, esi; mov r8, r13; mov rcx, r12; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000044fc4e: mov ecx, esi; mov rsi, qword ptr [rsp + 0x18]; mov rcx, r12; mov rdx, r13; call rbx; 
0x0000000000457343: mov ecx, esi; mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; call rbx; 
0x000000000048b5df: mov ecx, esi; sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x8b5d0; mov eax, 1; ret; 
0x0000000000490460: mov ecx, esp; mov esi, 0x1a; mov edi, 1; call rax; 
0x00000000004903e3: mov ecx, esp; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000044fc56: mov ecx, esp; mov rdx, r13; call rbx; 
0x000000000049030f: mov ecx, esp; or esi, 2; mov edi, 1; call rax; 
0x00000000004023f3: mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x00000000004026e0: mov edi, 0x3002; mov eax, 0x9e; syscall; 
0x0000000000402711: mov edi, 0x3003; mov eax, 0x9e; syscall; 
0x000000000048ae6f: mov edi, 0x3005; mov eax, 0x9e; syscall; 
0x0000000000401c92: mov edi, 0x401dfa; call 0x21d0; hlt; nop; endbr64; ret; 
0x0000000000401d40: mov edi, 0x4b1030; call 0x92880; mov byte ptr [rip + 0xc04cf], 1; pop rbp; ret; 
0x000000000041c19d: mov edi, 0x4c000000; mov edx, ebp; mov rsi, r15; mov rdi, rbp; call qword ptr [rax + 0x40]; 
0x0000000000401cc7: mov edi, 0x4c1b10; jmp rax; 
0x00000000004078ed: mov edi, 0xe90001ef; ret; 
0x00000000004327e9: mov edi, 0xf66bfb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000461f3c: mov edi, 0xff265ee8; jmp qword ptr [rsi + 0x66]; 
0x0000000000450b6f: mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000490314: mov edi, 1; call rax; 
0x0000000000490e60: mov edi, 1; jmp rax; 
0x000000000040f39f: mov edi, 2; mov eax, 0xe; syscall; 
0x000000000041ad60: mov edi, 2; mov eax, r9d; syscall; 
0x00000000004534ec: mov edi, dword ptr [rax + 0x10]; test rdi, rdi; jne 0x5353f; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000045351b: mov edi, dword ptr [rax + 0x10]; test rdi, rdi; jne 0x53567; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453414: mov edi, dword ptr [rax + 0x10]; test rdi, rdi; jne 0x535ba; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004531ee: mov edi, dword ptr [rax + 0x10]; test rdi, rdi; jne 0x536a0; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453036: mov edi, dword ptr [rax + 0x10]; test rdi, rdi; jne 0x53758; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452fc8: mov edi, dword ptr [rax + 0x10]; test rdi, rdi; jne 0x53786; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452e81: mov edi, dword ptr [rax + 0x10]; test rdi, rdi; jne 0x53810; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000045306d: mov edi, dword ptr [rax + 0x10]; test rdi, rdi; jne 0x5386c; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453149: mov edi, dword ptr [rax + 0x10]; test rdi, rdi; jne 0x53924; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453293: mov edi, dword ptr [rax + 0x10]; test rdi, rdi; jne 0x539ae; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000045344b: mov edi, dword ptr [rax + 0x10]; test rdi, rdi; jne 0x53a0a; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452fff: mov edi, dword ptr [rax + 0x10]; test rdi, rdi; jne 0x53a38; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000045336f: mov edi, dword ptr [rax + 0x10]; test rdi, rdi; jne 0x53a66; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452e93: mov edi, dword ptr [rax]; call rbx; 
0x0000000000451c37: mov edi, dword ptr [rbp + 0x10]; test rdi, rdi; jne 0x51c66; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000004807ed: mov edi, dword ptr [rbp - 0x460]; lea rsi, [rbp - 0x430]; mov eax, 0x14; syscall; 
0x0000000000413e03: mov edi, dword ptr [rbp - 0x4c0]; mov rsi, r13; mov rdi, r12; sub r15, r13; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000490a2d: mov edi, dword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x00000000004908c0: mov edi, dword ptr [rbp - 8]; leave; ret; 
0x0000000000451c40: mov edi, dword ptr [rbp]; call rbx; 
0x00000000004850b6: mov edi, dword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x000000000048b9b5: mov edi, dword ptr [rdi]; call 0x8d7a0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000048b8f1: mov edi, dword ptr [rdi]; call 0x8dad0; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000452bcd: mov edi, dword ptr [rdi]; call rbx; 
0x0000000000452b6b: mov edi, dword ptr [rsi + 0x10]; test r15, r15; jne 0x52bb1; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452b97: mov edi, dword ptr [rsi + 0x10]; test r15, r15; jne 0x52c08; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452a4f: mov edi, dword ptr [rsi + 0x10]; test r15, r15; jne 0x52c62; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452b0f: mov edi, dword ptr [rsi + 0x10]; test r15, r15; jne 0x52cbc; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452adf: mov edi, dword ptr [rsi + 0x10]; test r15, r15; jne 0x52d16; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452aaf: mov edi, dword ptr [rsi + 0x10]; test r15, r15; jne 0x52d70; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452a7f: mov edi, dword ptr [rsi + 0x10]; test r15, r15; jne 0x52dca; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452b3f: mov edi, dword ptr [rsi + 0x10]; test r15, r15; jne 0x52e24; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452a5c: mov edi, dword ptr [rsi]; call rbx; 
0x000000000044eff5: mov edi, dword ptr [rsp + 0x10]; push 1; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000044ef87: mov edi, dword ptr [rsp + 0x10]; push 1; xor edx, edx; push 1; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000484f8f: mov edi, dword ptr [rsp + 0x18]; call rax; 
0x0000000000484f32: mov edi, dword ptr [rsp + 0x18]; call rcx; 
0x00000000004653f9: mov edi, dword ptr [rsp + 0x18]; mov rdx, rbp; mov rsi, r12; call rbx; 
0x000000000045d98a: mov edi, dword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000045cf4a: mov edi, dword ptr [rsp + 0x40]; call rbx; 
0x000000000045c309: mov edi, dword ptr [rsp + 0x48]; call rbx; 
0x000000000045ed08: mov edi, dword ptr [rsp + 0x50]; call rbx; 
0x000000000046001b: mov edi, dword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045e91e: mov edi, dword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000045ab6d: mov edi, dword ptr [rsp + 0x58]; call rbx; 
0x000000000045b775: mov edi, dword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000459aa4: mov edi, dword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045a8f7: mov edi, dword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x000000000045a4b8: mov edi, dword ptr [rsp + 0x60]; call rbx; 
0x000000000045a0a0: mov edi, dword ptr [rsp + 0x60]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000402650: mov edi, dword ptr [rsp + 0xc]; mov rsi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000041eee3: mov edi, dword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000450d34: mov edi, dword ptr [rsp + 8]; mov eax, 1; syscall; 
0x0000000000450c94: mov edi, dword ptr [rsp + 8]; xor eax, eax; syscall; 
0x000000000041e7b6: mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000452932: mov edi, dword ptr [rsp]; call rbx; 
0x000000000040f525: mov edi, dword ptr [rsp]; mov rdx, r14; mov rax, qword ptr [rsp]; call rax; 
0x0000000000476be5: mov edi, dword ptr [rsp]; push 0; lea rcx, [rax + 1]; lea r9, [rsp + 0x28]; call rbx; 
0x0000000000401df0: mov edi, eax; call 0x18950; nop; pop rbp; ret; 
0x00000000004017bd: mov edi, eax; call 0x268b0; mov qword ptr [rip + 0xc1829], 0; pop rdx; ret; 
0x000000000041917e: mov edi, eax; call qword ptr [rax + 0x18]; 
0x0000000000466e83: mov edi, eax; cmp rdx, rcx; jae 0x66e6c; mov rax, r8; ret; 
0x000000000040f374: mov edi, eax; mov eax, 0xba; syscall; 
0x0000000000450ca5: mov edi, eax; mov qword ptr [rsp + 8], rax; call 0x75510; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000048dd81: mov edi, eax; mov qword ptr [rsp], rax; call 0x8e1b0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000041c6b0: mov edi, ebp; call qword ptr [rax + 0x18]; 
0x000000000041c1a8: mov edi, ebp; call qword ptr [rax + 0x40]; 
0x000000000041c7a3: mov edi, ebp; call qword ptr [rax + 0x78]; 
0x000000000048cfa2: mov edi, ebp; call qword ptr [rax]; 
0x000000000041808c: mov edi, ebp; call qword ptr [rbx + 0x10]; 
0x000000000041e907: mov edi, ebp; call qword ptr [rbx + 0x18]; 
0x000000000048ce46: mov edi, ebp; call qword ptr [rbx]; 
0x000000000046d161: mov edi, ebp; call qword ptr [rcx + 0x38]; 
0x000000000040f623: mov edi, ebp; call rax; 
0x0000000000465427: mov edi, ebp; call rbx; 
0x000000000046dcc0: mov edi, ebp; mov dword ptr [rbp - 0x970], r10d; mov byte ptr [rbp - 0x958], r9b; call rax; 
0x0000000000450e39: mov edi, ebp; mov eax, 0x4f; syscall; 
0x0000000000422e9d: mov edi, ebp; mov eax, 0xca; syscall; 
0x0000000000477723: mov edi, ebp; mov eax, 0xe4; syscall; 
0x00000000004519dd: mov edi, ebp; mov eax, 9; syscall; 
0x00000000004527cf: mov edi, ebp; mov rax, r12; pop rbp; pop r12; jmp rax; 
0x0000000000451b56: mov edi, ebp; mov rax, r12; pop rbp; pop r12; pop r13; jmp rax; 
0x000000000044fdd8: mov edi, ebp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000419bea: mov edi, ebp; pop rbp; mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004746d4: mov edi, ebp; pop rbp; pop r12; jmp rax; 
0x00000000004266f4: mov edi, ebp; pop rbp; pop r12; pop r13; jmp rax; 
0x000000000041e87c: mov edi, ebp; pop rbx; pop rbp; jmp rax; 
0x0000000000425e6b: mov edi, ebp; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000040fe58: mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000041e6a0: mov edi, ebx; call qword ptr [rbp + 0x18]; 
0x000000000041ecd1: mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000041f761: mov edi, ebx; call qword ptr [rbp + 0x30]; 
0x000000000041cf2f: mov edi, ebx; call qword ptr [rbp + 0x48]; 
0x0000000000418331: mov edi, ebx; call qword ptr [rbp + 0x60]; 
0x0000000000418b12: mov edi, ebx; call qword ptr [rbp + 0x68]; 
0x000000000041c344: mov edi, ebx; call qword ptr [rbp + 0x70]; 
0x00000000004178e2: mov edi, ebx; call rax; 
0x0000000000457d9c: mov edi, ebx; call rsi; 
0x0000000000426f61: mov edi, ebx; mov eax, 0xca; syscall; 
0x0000000000418e21: mov edi, ebx; sub rdx, rsi; call qword ptr [rax + 0x70]; 
0x000000000041872e: mov edi, edi; call qword ptr [rbp + 0x38]; 
0x000000000041236a: mov edi, edi; call qword ptr [rbx + 0x38]; 
0x00000000004120c1: mov edi, edi; call qword ptr [rcx + 0x38]; 
0x0000000000419524: mov edi, edi; call rax; 
0x000000000048459f: mov edi, edi; dec dword ptr [rax - 0x77]; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000490f9c: mov edi, edi; lea rbx, [r12 + rcx*8]; mov rsi, qword ptr [rbx]; call rax; 
0x0000000000411df8: mov edi, edi; mov dword ptr [rbp - 0x94c], r9d; mov dword ptr [rbp - 0x940], r11d; call rax; 
0x00000000004281dc: mov edi, edi; mov eax, 0xca; syscall; 
0x0000000000490f6d: mov edi, edi; mov rdx, qword ptr [r10]; mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp + 0x10], r10; call rax; 
0x0000000000411ea5: mov edi, edi; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000466f07: mov edi, edx; cmp rax, 9; ja 0x66ee0; mov rax, r8; ret; 
0x0000000000450490: mov edi, edx; mov eax, esi; syscall; 
0x000000000045049f: mov edi, edx; mov eax, r8d; syscall; 
0x00000000004768ff: mov edi, esi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000426b66: mov edi, esi; call rax; 
0x0000000000457d8c: mov edi, esi; mov qword ptr [rbp - 0x70], rsi; call 0x55f00; mov rsi, qword ptr [rbp - 0x70]; mov rdi, rbx; call rsi; 
0x000000000045217c: mov edi, esi; mov rax, qword ptr [rbp - 0x58]; mov r15d, r13d; call rax; 
0x0000000000450a68: mov edi, esi; mov rsi, rdx; cmp r8d, 1; ja 0x50aa0; mov eax, 4; syscall; 
0x0000000000450ac7: mov edi, esi; mov rsi, rdx; cmp r8d, 1; ja 0x50b00; mov eax, 5; syscall; 
0x0000000000477e88: mov edi, esi; mov rsi, rdx; cmp r8d, 1; ja 0x77ec0; mov eax, 6; syscall; 
0x00000000004142e6: mov edi, esp; call qword ptr [rax + 0x38]; 
0x000000000041ed6e: mov edi, esp; call qword ptr [rbx + 0x18]; 
0x00000000004144c5: mov edi, esp; call qword ptr [rcx + 0x38]; 
0x000000000040f49b: mov edi, esp; call rax; 
0x00000000004653ec: mov edi, esp; call rbx; 
0x000000000044f1ca: mov edi, esp; lea r9, [rsp + 0x30]; call rbx; 
0x0000000000415460: mov edi, esp; mov dword ptr [rbp - 0x4f0], r9d; call qword ptr [rax + 0x38]; 
0x0000000000414f23: mov edi, esp; mov dword ptr [rbp - 0x4f8], r9d; call qword ptr [rbx + 0x38]; 
0x00000000004156b5: mov edi, esp; mov dword ptr [rbp - 0x508], r10d; mov qword ptr [rbp - 0x500], r11; call qword ptr [rax + 0x38]; 
0x0000000000426008: mov edi, esp; mov eax, 0xca; syscall; 
0x000000000047063a: mov edi, esp; mov qword ptr [rbp - 0x4d8], r11; call qword ptr [rbx + 0x38]; 
0x00000000004712a6: mov edi, esp; mov qword ptr [rbp - 0x500], r11; mov qword ptr [rbp - 0x4f8], r9; call qword ptr [rax + 0x38]; 
0x0000000000468c1d: mov edi, esp; mov qword ptr [rbp - 0xe8], r8; call rax; 
0x000000000044f320: mov edi, esp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000413e0d: mov edi, esp; sub r15, r13; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000004143b2: mov edi, esp; sub r15, r8; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000046f945: mov edi, esp; sub rbx, r14; mov r13, rbx; sar r13, 2; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x000000000046fe45: mov edi, esp; sub rbx, r8; sar rbx, 2; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x0000000000450ca4: mov edi, r8d; mov qword ptr [rsp + 8], rax; call 0x75510; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000048dd80: mov edi, r8d; mov qword ptr [rsp], rax; call 0x8e1b0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000428c1d: mov edx, 0; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x00000000004822dd: mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x0000000000445b7a: mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000044e866: mov edx, 0; pop rbx; cmove rax, rdx; ret; 
0x00000000004755ab: mov edx, 0x315afff8; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x0000000000402681: mov edx, 0x3c; nop word ptr cs:[rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x00000000004541ba: mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000487122: mov edx, 0x894830e8; or byte ptr [r8 + 2], r15b; ret; 
0x00000000004205db: mov edx, 0x90fffffe; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x000000000040f377: mov edx, 0xf000000; add eax, 0x8944c689; ret 0xeab8; 
0x0000000000432bb9: mov edx, 0xf66bab2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000048f179: mov edx, 0xfc0c7; add byte ptr [rax], al; syscall; 
0x0000000000450a89: mov edx, 0xffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000450cc1: mov edx, 0xffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000464dd3: mov edx, 0xffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000464cff: mov edx, 0xffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004598db: mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000004948f8: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x2e612]; syscall; 
0x000000000046c778: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x567a2]; syscall; 
0x000000000046c4f4: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x56a22]; syscall; 
0x000000000046a470: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x58a9e]; syscall; 
0x000000000046a330: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x58bde]; syscall; 
0x0000000000466868: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x5c6a2]; syscall; 
0x00000000004667a3: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x5c767]; syscall; 
0x0000000000466601: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x5c909]; syscall; 
0x0000000000466527: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x5c9e3]; syscall; 
0x0000000000458738: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x6b162]; syscall; 
0x00000000004585cc: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x6b2ce]; syscall; 
0x00000000004584ac: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x6b3ee]; syscall; 
0x000000000044fa14: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x73e86]; syscall; 
0x0000000000428874: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x97f16]; syscall; 
0x0000000000425c74: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9ab16]; syscall; 
0x0000000000425c14: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9ab76]; syscall; 
0x0000000000425854: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9af36]; syscall; 
0x00000000004255f4: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9b196]; syscall; 
0x000000000042501c: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9b76e]; syscall; 
0x0000000000424fe4: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9b7a6]; syscall; 
0x0000000000426bd4: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9c0c6]; syscall; 
0x0000000000426188: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9cb02]; syscall; 
0x00000000004222e5: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa09a5]; syscall; 
0x00000000004222b4: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa09e6]; syscall; 
0x0000000000422034: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa0c66]; syscall; 
0x0000000000421b10: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa118a]; syscall; 
0x0000000000420726: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa24f4]; syscall; 
0x0000000000420166: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa2ab4]; syscall; 
0x000000000041fdfa: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa2e20]; syscall; 
0x000000000041fab8: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa3162]; syscall; 
0x000000000041e552: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa46c8]; syscall; 
0x000000000041e2b2: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa4968]; syscall; 
0x000000000041df5e: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa4cbc]; syscall; 
0x0000000000418234: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xab666]; syscall; 
0x0000000000410343: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb33f7]; syscall; 
0x0000000000410203: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb3537]; syscall; 
0x000000000040ffcc: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb376e]; syscall; 
0x000000000040ff91: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb37a9]; syscall; 
0x000000000040fead: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb388d]; syscall; 
0x00000000004068e1: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbbec1]; syscall; 
0x0000000000404f3e: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbd82c]; syscall; 
0x0000000000403ddf: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbe8e3]; syscall; 
0x0000000000403dc2: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbe900]; syscall; 
0x0000000000403cec: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbe9d6]; syscall; 
0x00000000004012bd: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xc14fd]; syscall; 
0x000000000040142c: mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000046c8da: mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x000000000042615d: mov edx, 1; mov esi, 0x81; mov eax, ebx; syscall; 
0x0000000000425ffd: mov edx, 1; mov esi, 0x81; mov rdi, r12; mov eax, 0xca; syscall; 
0x0000000000427590: mov edx, 1; mov esi, 0x81; mov rdi, r13; mov eax, 0xca; syscall; 
0x00000000004281d1: mov edx, 1; mov esi, 0x81; mov rdi, r15; mov eax, 0xca; syscall; 
0x0000000000422e92: mov edx, 1; mov esi, 0x81; mov rdi, rbp; mov eax, 0xca; syscall; 
0x0000000000426f56: mov edx, 1; mov esi, 0x81; mov rdi, rbx; mov eax, 0xca; syscall; 
0x000000000041cf29: mov edx, 1; mov rdi, rbx; call qword ptr [rbp + 0x48]; 
0x000000000041ad58: mov edx, 1; mov rsi, rbx; mov edi, 2; mov eax, r9d; syscall; 
0x000000000042111a: mov edx, 2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x0000000000464fda: mov edx, 8; mov eax, 0xd; syscall; 
0x000000000046517c: mov edx, 8; mov rsi, r8; mov eax, 0xe; syscall; 
0x000000000041baf9: mov edx, dword ptr [rbp + 0x40]; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbp; call rax; 
0x000000000047f3e1: mov edx, dword ptr [rbp - 0xc4]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; test edx, edx; jne 0x7f3f4; call rax; 
0x000000000048779d: mov edx, dword ptr [rbx + 0x10]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000418e1d: mov edx, dword ptr [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax + 0x70]; 
0x000000000044444f: mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000442b7d: mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000045464a: mov edx, dword ptr [rcx + rdx]; lea rcx, [rip - 0x64]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x000000000045434e: mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x54360; ret; 
0x0000000000487725: mov edx, dword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000419518: mov edx, dword ptr [rdi + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x0000000000487784: mov edx, dword ptr [rdi + 0x458]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000418414: mov edx, dword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000041e5ed: mov edx, dword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x1e5e8; ret; 
0x00000000004742d5: mov edx, dword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x742d0; ret; 
0x00000000004902b4: mov edx, dword ptr [rdx]; mov qword ptr [rbx + 0x98], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000490f70: mov edx, dword ptr [rdx]; mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp + 0x10], r10; call rax; 
0x0000000000487cdf: mov edx, dword ptr [rip + 0x3b3f3]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000040264a: mov edx, dword ptr [rip + 0xc0688]; mov edi, dword ptr [rsp + 0xc]; mov rsi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000044a6b5: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000044a6d5: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000411ea1: mov edx, dword ptr [rsi + 0x20]; mov rdi, r15; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000043b1c1: mov edx, dword ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000043b0e0: mov edx, dword ptr [rsi + 1]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000043af21: mov edx, dword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043b070: mov edx, dword ptr [rsi + 2]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000043aeb1: mov edx, dword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044ab42: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x000000000044a502: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000043b000: mov edx, dword ptr [rsi + 3]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000043ae41: mov edx, dword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044ab23: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x000000000044a4f3: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000043add1: mov edx, dword ptr [rsi + 4]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044abd4: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000044a564: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000043ad61: mov edx, dword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044abf4: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000044a574: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000043acf1: mov edx, dword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044ab93: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000044a543: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000044ac14: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000044a584: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000043ac81: mov edx, dword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044abb3: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000044a553: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000044ab74: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000044a534: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000043a731: mov edx, dword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043a6b1: mov edx, dword ptr [rsi - 0xb]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043a631: mov edx, dword ptr [rsi - 0xc]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043a5a1: mov edx, dword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043a511: mov edx, dword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043a481: mov edx, dword ptr [rsi - 0xf]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435081: mov edx, dword ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000435261: mov edx, dword ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000435440: mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434e78: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435058: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435238: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435418: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435074: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435254: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435434: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434e94: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435640: mov edx, dword ptr [rsi - 5]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435840: mov edx, dword ptr [rsi - 6]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435a40: mov edx, dword ptr [rsi - 7]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434cb5: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435609: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435809: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435a09: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434c99: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435625: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435825: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435a25: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434cd1: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043a7b1: mov edx, dword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000044ab00: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x000000000044b150: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; vzeroupper; ret; 
0x000000000043b150: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000446f20: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; vzeroupper; ret; 
0x000000000044ab51: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x000000000043af91: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000490876: mov edx, dword ptr [rsi]; mov r8, r12; mov rcx, r14; mov esi, 1; mov edi, 1; call rax; 
0x000000000044aae1: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000044a4b1: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000484446: mov edx, dword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x00000000004843c4: mov edx, dword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x000000000045a096: mov edx, dword ptr [rsp + 0x68]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x60]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000490403: mov edx, dword ptr [rsp]; mov r8, r13; mov rcx, r12; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000490308: mov edx, dword ptr [rsp]; mov r8, rbx; mov rcx, r12; or esi, 2; mov edi, 1; call rax; 
0x0000000000428273: mov edx, eax; je 0x282a8; test rsi, rsi; je 0x28288; lea rax, [rax - 0x10]; ret; 
0x000000000040f380: mov edx, eax; mov eax, 0xea; syscall; 
0x00000000004026dc: mov edx, eax; mov esi, edx; mov edi, 0x3002; mov eax, 0x9e; syscall; 
0x00000000004202d6: mov edx, eax; mov rax, qword ptr [rax]; test rax, rax; jne 0x202d0; ret; 
0x000000000041c79d: mov edx, eax; mov rsi, r12; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x0000000000468c17: mov edx, eax; mov rsi, r14; mov rdi, r12; mov qword ptr [rbp - 0xe8], r8; call rax; 
0x000000000046dcba: mov edx, eax; mov rsi, r14; mov rdi, r13; mov dword ptr [rbp - 0x970], r10d; mov byte ptr [rbp - 0x958], r9b; call rax; 
0x00000000004516db: mov edx, eax; mov rsi, r9; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000004279e4: mov edx, eax; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000048ce00: mov edx, ebp; add rax, qword ptr [rbx]; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000046f952: mov edx, ebp; call qword ptr [rax + 0x38]; 
0x000000000044fc59: mov edx, ebp; call rbx; 
0x0000000000492fb1: mov edx, ebp; mov esi, 0x40; mov rdi, r13; call rbx; 
0x000000000044f318: mov edx, ebp; mov r9, qword ptr [rsp + 0x10]; mov rdi, r12; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000465d03: mov edx, ebp; mov rdi, r12; call rbx; 
0x0000000000412364: mov edx, ebp; mov rsi, r10; mov rdi, r15; call qword ptr [rbx + 0x38]; 
0x0000000000412a09: mov edx, ebp; mov rsi, r10; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x00000000004653fe: mov edx, ebp; mov rsi, r12; call rbx; 
0x000000000048cf9d: mov edx, ebp; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x000000000048ce41: mov edx, ebp; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x0000000000465421: mov edx, ebp; mov rsi, r12; mov rdi, r13; call rbx; 
0x00000000004120bb: mov edx, ebp; mov rsi, r12; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000046543c: mov edx, ebp; mov rsi, r15; mov rdi, r12; call rbx; 
0x000000000041c1a2: mov edx, ebp; mov rsi, r15; mov rdi, rbp; call qword ptr [rax + 0x40]; 
0x000000000045733e: mov edx, ebp; push 0; mov r9, r14; mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; call rbx; 
0x000000000044f1c4: mov edx, ebp; xor r8d, r8d; mov rdi, r12; lea r9, [rsp + 0x30]; call rbx; 
0x000000000046fe4f: mov edx, ebx; call qword ptr [rax + 0x38]; 
0x00000000004519da: mov edx, ebx; mov rdi, rbp; mov eax, 9; syscall; 
0x000000000041274e: mov edx, ebx; mov rsi, r12; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x0000000000470fb7: mov edx, ebx; mov rsi, r9; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000477ef0: mov edx, ecx; cmp r9d, 1; ja 0x77f28; mov eax, 0x106; syscall; 
0x0000000000487c65: mov edx, ecx; mov eax, 0x11; syscall; 
0x0000000000487c65: mov edx, ecx; mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x87c80; ret; 
0x0000000000454235: mov edx, ecx; mov eax, 0x19; syscall; 
0x0000000000454235: mov edx, ecx; mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x54247; ret; 
0x0000000000451a1f: mov edx, ecx; mov ecx, 9; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x0000000000490f99: mov edx, ecx; mov rdi, r15; lea rbx, [r12 + rcx*8]; mov rsi, qword ptr [rbx]; call rax; 
0x000000000041545a: mov edx, ecx; mov rsi, r11; mov rdi, r12; mov dword ptr [rbp - 0x4f0], r9d; call qword ptr [rax + 0x38]; 
0x0000000000414f1d: mov edx, ecx; mov rsi, r11; mov rdi, r12; mov dword ptr [rbp - 0x4f8], r9d; call qword ptr [rbx + 0x38]; 
0x000000000046d15b: mov edx, ecx; mov rsi, r12; mov rdi, r13; call qword ptr [rcx + 0x38]; 
0x0000000000470634: mov edx, ecx; mov rsi, r9; mov rdi, r12; mov qword ptr [rbp - 0x4d8], r11; call qword ptr [rbx + 0x38]; 
0x00000000004712a0: mov edx, ecx; mov rsi, r9; mov rdi, r12; mov qword ptr [rbp - 0x500], r11; mov qword ptr [rbp - 0x4f8], r9; call qword ptr [rax + 0x38]; 
0x0000000000413e13: mov edx, edi; call qword ptr [rax + 0x38]; 
0x000000000045882b: mov edx, edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000466e80: mov edx, edi; mov rdi, rax; cmp rdx, rcx; jae 0x66e6c; mov rax, r8; ret; 
0x0000000000492430: mov edx, edi; mov rsi, qword ptr [r12 + r14*8 + 0x10]; mov rdi, r13; call rax; 
0x00000000004144bf: mov edx, edi; mov rsi, r11; mov rdi, r12; call qword ptr [rcx + 0x38]; 
0x00000000004156af: mov edx, edi; mov rsi, r11; mov rdi, r12; mov dword ptr [rbp - 0x508], r10d; mov qword ptr [rbp - 0x500], r11; call qword ptr [rax + 0x38]; 
0x000000000041c33e: mov edx, edi; mov rsi, r14; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004142e0: mov edx, edi; mov rsi, r8; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000044e375: mov edx, edi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000411df2: mov edx, edx; mov rsi, r14; mov rdi, r15; mov dword ptr [rbp - 0x94c], r9d; mov dword ptr [rbp - 0x940], r11d; call rax; 
0x000000000040f529: mov edx, esi; mov rax, qword ptr [rsp]; call rax; 
0x000000000040f619: mov edx, esi; mov rax, qword ptr [rsp]; mov rsi, r12; mov rdi, r13; call rax; 
0x000000000040f495: mov edx, esi; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000000451855: mov edx, esi; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x0000000000477fb1: mov edx, esp; mov eax, 0x10; syscall; 
0x0000000000451659: mov edx, esp; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000450b6a: mov edx, esp; mov rsi, rbp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000450be0: mov edx, esp; mov rsi, rbp; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000450b69: mov edx, r12d; mov rsi, rbp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000450bdf: mov edx, r12d; mov rsi, rbp; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000040f37f: mov edx, r8d; mov eax, 0xea; syscall; 
0x00000000004516da: mov edx, r8d; mov rsi, r9; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000454368: mov es, word ptr [rbx]; add al, 0x11; ret; 
0x0000000000442b77: mov es, word ptr [rip - 0x7efb7500]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000004515cd: mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000490462: mov esi, 0x1a; mov edi, 1; call rax; 
0x0000000000429d72: mov esi, 0x200098f; lea rdx, [rip + 0x23822]; lea rax, [rip + 0x238db]; cmove rax, rdx; ret; 
0x0000000000424906: mov esi, 0x39480009; ret; 
0x000000000044e81c: mov esi, 0x3ef00148; jmp rax; 
0x0000000000492fb3: mov esi, 0x40; mov rdi, r13; call rbx; 
0x0000000000429b4e: mov esi, 0x4800024a; lea eax, [rip + 0x24b17]; cmove rax, rdx; ret; 
0x0000000000478076: mov esi, 0x480004ae; cmp edi, eax; ja 0x780a8; xor eax, eax; ret; 
0x00000000004933ee: mov esi, 0x48fff934; test ebx, ebx; jne 0x933dd; pop rbx; ret; 
0x000000000042111f: mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000047555c: mov esi, 0x80; syscall; 
0x00000000004948fd: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x2e612]; syscall; 
0x000000000046c77d: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x567a2]; syscall; 
0x000000000046c4f9: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x56a22]; syscall; 
0x000000000046a475: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x58a9e]; syscall; 
0x000000000046a335: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x58bde]; syscall; 
0x000000000046686d: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x5c6a2]; syscall; 
0x00000000004667a8: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x5c767]; syscall; 
0x0000000000466606: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x5c909]; syscall; 
0x000000000046652c: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x5c9e3]; syscall; 
0x000000000045873d: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x6b162]; syscall; 
0x00000000004585d1: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x6b2ce]; syscall; 
0x00000000004584b1: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x6b3ee]; syscall; 
0x000000000044fa19: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x73e86]; syscall; 
0x0000000000428879: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x97f16]; syscall; 
0x0000000000425c79: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9ab16]; syscall; 
0x0000000000425c19: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9ab76]; syscall; 
0x0000000000425859: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9af36]; syscall; 
0x00000000004255f9: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9b196]; syscall; 
0x0000000000425021: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9b76e]; syscall; 
0x0000000000424fe9: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9b7a6]; syscall; 
0x0000000000426bd9: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9c0c6]; syscall; 
0x000000000042618d: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9cb02]; syscall; 
0x00000000004222ea: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa09a5]; syscall; 
0x00000000004222b9: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa09e6]; syscall; 
0x0000000000422039: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa0c66]; syscall; 
0x0000000000421b15: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa118a]; syscall; 
0x000000000042072b: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa24f4]; syscall; 
0x000000000042072b: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa24f4]; syscall; ret; 
0x000000000042016b: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa2ab4]; syscall; 
0x000000000041fdff: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa2e20]; syscall; 
0x000000000041fabd: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa3162]; syscall; 
0x000000000041e557: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa46c8]; syscall; 
0x000000000041e2b7: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa4968]; syscall; 
0x000000000041df63: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa4cbc]; syscall; 
0x000000000041df63: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa4cbc]; syscall; ret; 
0x0000000000418239: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xab666]; syscall; 
0x0000000000410348: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb33f7]; syscall; 
0x0000000000410208: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb3537]; syscall; 
0x000000000040ffd1: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb376e]; syscall; 
0x000000000040ff96: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb37a9]; syscall; 
0x000000000040feb2: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb388d]; syscall; 
0x00000000004068e6: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbbec1]; syscall; 
0x0000000000404f43: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbd82c]; syscall; 
0x0000000000403de4: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbe8e3]; syscall; 
0x0000000000403dc7: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbe900]; syscall; 
0x0000000000403cf1: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbe9d6]; syscall; 
0x00000000004012c2: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xc14fd]; syscall; 
0x0000000000401431: mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000046c8df: mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000426162: mov esi, 0x81; mov eax, ebx; syscall; 
0x0000000000426002: mov esi, 0x81; mov rdi, r12; mov eax, 0xca; syscall; 
0x0000000000427595: mov esi, 0x81; mov rdi, r13; mov eax, 0xca; syscall; 
0x00000000004281d6: mov esi, 0x81; mov rdi, r15; mov eax, 0xca; syscall; 
0x0000000000422e97: mov esi, 0x81; mov rdi, rbp; mov eax, 0xca; syscall; 
0x0000000000426f5b: mov esi, 0x81; mov rdi, rbx; mov eax, 0xca; syscall; 
0x000000000045947a: mov esi, 0x83480142; ret 0xf01; 
0x0000000000410442: mov esi, 0x83480143; ret; 
0x0000000000424983: mov esi, 0x834a0009; xor qword ptr [rax], r9; add dword ptr [rax + 0x39], ecx; ret; 
0x000000000048af2e: mov esi, 0x89000388; ret 0xca83; 
0x00000000004903e5: mov esi, 0xa; mov edi, 1; call rax; 
0x00000000004328b9: mov esi, 0xf66beb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000474ab0: mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000419178: mov esi, 0xffffffff; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x000000000041c6aa: mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000041e901: mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x000000000041e69a: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000041f7f3: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000049087e: mov esi, 1; mov edi, 1; call rax; 
0x00000000004178dc: mov esi, 1; mov rdi, rbx; call rax; 
0x000000000040fe55: mov esi, dword ptr [rax + 0x20]; mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000452179: mov esi, dword ptr [rax]; mov rdi, r14; mov rax, qword ptr [rbp - 0x58]; mov r15d, r13d; call rax; 
0x0000000000452a1b: mov esi, dword ptr [rbp + 0x10]; test r14, r14; jne 0x52a40; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004529bf: mov esi, dword ptr [rbp + 0x10]; test r14, r14; jne 0x52b00; mov rdi, qword ptr [r13]; call rbx; 
0x000000000045298f: mov esi, dword ptr [rbp + 0x10]; test r14, r14; jne 0x52b60; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000490a29: mov esi, dword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x00000000004908bc: mov esi, dword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000457d98: mov esi, dword ptr [rbp - 0x70]; mov rdi, rbx; call rsi; 
0x000000000040f521: mov esi, dword ptr [rbp]; mov rdi, qword ptr [r12]; mov rdx, r14; mov rax, qword ptr [rsp]; call rax; 
0x0000000000418e19: mov esi, dword ptr [rbx + 0x10]; mov rdx, qword ptr [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax + 0x70]; 
0x0000000000490fa3: mov esi, dword ptr [rbx]; call rax; 
0x000000000047e707: mov esi, dword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r13]; call rax; 
0x000000000048b9b1: mov esi, dword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x8d7a0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000048b8ed: mov esi, dword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x8dad0; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000411e9d: mov esi, dword ptr [rsi + 0x18]; mov rdx, qword ptr [r14 + 0x20]; mov rdi, r15; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000043df70: mov esi, dword ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000044d6d7: mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000043df5e: mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000044d6c8: mov esi, dword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x0000000000451cd6: mov esi, dword ptr [rsi]; mov rax, qword ptr [rsp + 8]; mov rdi, r13; call rax; 
0x000000000043df4b: mov esi, dword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000450d2d: mov esi, dword ptr [rsp + 0x10]; mov r8d, eax; mov edi, dword ptr [rsp + 8]; mov eax, 1; syscall; 
0x0000000000450c8d: mov esi, dword ptr [rsp + 0x10]; mov r8d, eax; mov edi, dword ptr [rsp + 8]; xor eax, eax; syscall; 
0x0000000000402655: mov esi, dword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000041eede: mov esi, dword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000465cfe: mov esi, dword ptr [rsp + 0x10]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x0000000000426949: mov esi, dword ptr [rsp + 0x18]; add rsp, 0x18; jmp rax; 
0x000000000044f323: mov esi, dword ptr [rsp + 0x18]; call rbx; 
0x000000000044fc51: mov esi, dword ptr [rsp + 0x18]; mov rcx, r12; mov rdx, r13; call rbx; 
0x0000000000426431: mov esi, dword ptr [rsp + 0x18]; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000457346: mov esi, dword ptr [rsp + 0x18]; xor r8d, r8d; call rbx; 
0x0000000000427d81: mov esi, dword ptr [rsp + 0x28]; mov rdi, r12; call rax; 
0x0000000000426b61: mov esi, dword ptr [rsp + 0x38]; mov rdi, r14; call rax; 
0x000000000045d985: mov esi, dword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000045cf45: mov esi, dword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000045c304: mov esi, dword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; call rbx; 
0x000000000045ab68: mov esi, dword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; call rbx; 
0x000000000045b770: mov esi, dword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000459a9f: mov esi, dword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045a8f2: mov esi, dword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x000000000045ed03: mov esi, dword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; call rbx; 
0x0000000000460016: mov esi, dword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045e919: mov esi, dword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000045a4b3: mov esi, dword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x60]; call rbx; 
0x000000000045a09b: mov esi, dword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x60]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000041e7b1: mov esi, dword ptr [rsp + 0xc]; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000492433: mov esi, dword ptr [rsp + rsi*8 + 0x10]; mov rdi, r13; call rax; 
0x0000000000465182: mov esi, eax; mov eax, 0xe; syscall; 
0x000000000040f37d: mov esi, eax; mov edx, r8d; mov eax, 0xea; syscall; 
0x00000000004142e3: mov esi, eax; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000004143af: mov esi, eax; mov rdi, r12; sub r15, r8; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000046fe42: mov esi, eax; mov rdi, r12; sub rbx, r8; sar rbx, 2; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x0000000000450b6d: mov esi, ebp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000450be3: mov esi, ebp; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000040f68e: mov esi, ebp; mov rax, qword ptr [rsp]; mov r13, r15; add r15, r12; call rax; 
0x000000000040f498: mov esi, ebp; mov rdi, r12; call rax; 
0x0000000000413e0a: mov esi, ebp; mov rdi, r12; sub r15, r13; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000041872b: mov esi, ebp; mov rdi, r15; call qword ptr [rbp + 0x38]; 
0x00000000004266f1: mov esi, ebp; mov rdi, rbp; pop rbp; pop r12; pop r13; jmp rax; 
0x000000000040fe1c: mov esi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000048245f: mov esi, ebp; syscall; 
0x000000000041ad5e: mov esi, ebx; mov edi, 2; mov eax, r9d; syscall; 
0x00000000004144c2: mov esi, ebx; mov rdi, r12; call qword ptr [rcx + 0x38]; 
0x000000000041545d: mov esi, ebx; mov rdi, r12; mov dword ptr [rbp - 0x4f0], r9d; call qword ptr [rax + 0x38]; 
0x0000000000414f20: mov esi, ebx; mov rdi, r12; mov dword ptr [rbp - 0x4f8], r9d; call qword ptr [rbx + 0x38]; 
0x00000000004156b2: mov esi, ebx; mov rdi, r12; mov dword ptr [rbp - 0x508], r10d; mov qword ptr [rbp - 0x500], r11; call qword ptr [rax + 0x38]; 
0x00000000004279e1: mov esi, ebx; mov rdx, r8; pop rbx; pop rbp; pop r12; jmp rax; 
0x00000000004516de: mov esi, ecx; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000040f39d: mov esi, ecx; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000470fba: mov esi, ecx; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000470637: mov esi, ecx; mov rdi, r12; mov qword ptr [rbp - 0x4d8], r11; call qword ptr [rbx + 0x38]; 
0x00000000004712a3: mov esi, ecx; mov rdi, r12; mov qword ptr [rbp - 0x500], r11; mov qword ptr [rbp - 0x4f8], r9; call qword ptr [rax + 0x38]; 
0x0000000000490f6a: mov esi, ecx; mov rdi, r15; mov rdx, qword ptr [r10]; mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp + 0x10], r10; call rax; 
0x0000000000418b94: mov esi, edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000451859: mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000046543f: mov esi, edi; mov rdi, r12; call rbx; 
0x000000000041c1a5: mov esi, edi; mov rdi, rbp; call qword ptr [rax + 0x40]; 
0x0000000000490e59: mov esi, edi; test rax, rax; je 0x90e70; mov edi, 1; jmp rax; 
0x0000000000450a6b: mov esi, edx; cmp r8d, 1; ja 0x50aa0; mov eax, 4; syscall; 
0x0000000000450aca: mov esi, edx; cmp r8d, 1; ja 0x50b00; mov eax, 5; syscall; 
0x0000000000477e8b: mov esi, edx; cmp r8d, 1; ja 0x77ec0; mov eax, 6; syscall; 
0x00000000004026de: mov esi, edx; mov edi, 0x3002; mov eax, 0x9e; syscall; 
0x0000000000412367: mov esi, edx; mov rdi, r15; call qword ptr [rbx + 0x38]; 
0x0000000000412a0c: mov esi, edx; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x0000000000477eed: mov esi, edx; mov rdx, rcx; cmp r9d, 1; ja 0x77f28; mov eax, 0x106; syscall; 
0x0000000000468c1a: mov esi, esi; mov rdi, r12; mov qword ptr [rbp - 0xe8], r8; call rax; 
0x000000000046dcbd: mov esi, esi; mov rdi, r13; mov dword ptr [rbp - 0x970], r10d; mov byte ptr [rbp - 0x958], r9b; call rax; 
0x0000000000411df5: mov esi, esi; mov rdi, r15; mov dword ptr [rbp - 0x94c], r9d; mov dword ptr [rbp - 0x940], r11d; call rax; 
0x000000000041c341: mov esi, esi; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000428a01: mov esi, esp; call rax; 
0x0000000000465401: mov esi, esp; call rbx; 
0x000000000048cfa0: mov esi, esp; mov edi, ebp; call qword ptr [rax]; 
0x000000000048ce44: mov esi, esp; mov edi, ebp; call qword ptr [rbx]; 
0x000000000048ce06: mov esi, esp; mov edi, ebp; call rax; 
0x0000000000477721: mov esi, esp; mov edi, ebp; mov eax, 0xe4; syscall; 
0x000000000046d15e: mov esi, esp; mov rdi, r13; call qword ptr [rcx + 0x38]; 
0x000000000040f620: mov esi, esp; mov rdi, r13; call rax; 
0x0000000000465424: mov esi, esp; mov rdi, r13; call rbx; 
0x00000000004120be: mov esi, esp; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000041c7a0: mov esi, esp; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x00000000004276f2: mov esi, esp; pop r12; pop r13; jmp rax; 
0x00000000004746d0: mov esi, esp; pop rbx; mov rdi, rbp; pop rbp; pop r12; jmp rax; 
0x00000000004746cf: mov esi, r12d; pop rbx; mov rdi, rbp; pop rbp; pop r12; jmp rax; 
0x000000000045ed6b: mov esp, 0x24448b48; or byte ptr [rax - 0x77], cl; fimul dword ptr [rax - 0x75]; add byte ptr [rax + 0x29], cl; ret 0x8348; 
0x0000000000424ad4: mov esp, 0x39480009; ret; 
0x0000000000431261: mov esp, 0x448d48c0; cmp al, dh; ret; 
0x0000000000431291: mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x0000000000431281: mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000042c95e: mov esp, 0x44b60ff9; cmp byte ptr [rax], ah; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000450d50: mov esp, 0x48000247; mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000446122: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000446142: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000446180: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000446102: mov esp, 0x48d231c0; lea eax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000432ab4: mov esp, 0x4e6f0ff3; mov esp, 0xf66bcb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000401e6c: mov esp, 0x89000c0e; ret 0xeac1; 
0x000000000041a089: mov esp, 0x8c48348; mov eax, ebx; pop rbx; pop rbp; ret; 
0x0000000000402c4f: mov esp, 0x90005; add byte ptr [rax - 0x77], cl; ret; 
0x000000000044b3b0: mov esp, 0xa8000000; jne 0x4b480; lea rax, [rdi + 7]; ret; 
0x0000000000445b78: mov esp, 0xbac0; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004183b6: mov esp, 0xbad23145; add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000450402: mov esp, 0xc08348c0; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000446892: mov esp, 0xc08348c0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000004313b2: mov esp, 0xc08348c0; add rax, rdi; vzeroupper; ret; 
0x0000000000446872: mov esp, 0xc08348c0; and byte ptr [rax + 1], cl; clc; sub rax, rdx; vzeroupper; ret; 
0x00000000004313a2: mov esp, 0xc08348c0; and byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x000000000048b8c4: mov esp, 0xc085ffff; setne al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x0000000000475f3a: mov esp, 0xc22948c0; jbe 0x761e0; add rax, rdi; add rax, rcx; ret; 
0x00000000004761a1: mov esp, 0xc22948c0; jbe 0x761e0; add rax, rdi; ret; 
0x00000000004761b1: mov esp, 0xc22948c0; jbe 0x761e0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004761c1: mov esp, 0xc22948c0; jbe 0x761e0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004761d1: mov esp, 0xc22948c0; jbe 0x761e0; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000476cea: mov esp, 0xc22948c0; jbe 0x76f90; add rax, rdi; add rax, rcx; ret; 
0x0000000000476f51: mov esp, 0xc22948c0; jbe 0x76f90; add rax, rdi; ret; 
0x0000000000476f61: mov esp, 0xc22948c0; jbe 0x76f90; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000476f71: mov esp, 0xc22948c0; jbe 0x76f90; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000476f81: mov esp, 0xc22948c0; jbe 0x76f90; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004763f2: mov esp, 0xc23948c0; jbe 0x76450; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000476412: mov esp, 0xc23948c0; jbe 0x76450; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000476432: mov esp, 0xc23948c0; jbe 0x76450; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x00000000004763e2: mov esp, 0xc23948c0; jbe 0x76450; add rax, rdi; vzeroupper; ret; 
0x00000000004771a2: mov esp, 0xc23948c0; jbe 0x77200; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x00000000004771c2: mov esp, 0xc23948c0; jbe 0x77200; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x00000000004771e2: mov esp, 0xc23948c0; jbe 0x77200; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000477192: mov esp, 0xc23948c0; jbe 0x77200; add rax, rdi; vzeroupper; ret; 
0x0000000000446ae2: mov esp, 0xc63948c0; jbe 0x46b60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000446215: mov esp, 0xc80148c0; add rax, rdi; vzeroupper; ret; 
0x0000000000450078: mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000446523: mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000042e3f2: mov esp, 0xd32949d2; jbe 0x2e404; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042fb62: mov esp, 0xd32949d2; jbe 0x2fb74; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000430b42: mov esp, 0xd32949d2; jbe 0x30b54; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000432ab9: mov esp, 0xf66bcb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000477567: mov esp, 0xf80148c0; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000004467a7: mov esp, 0xf80148c0; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x00000000004310fb: mov esp, 0xf80148c0; add rax, rcx; ret; 
0x00000000004312f7: mov esp, 0xf80148c0; add rax, rcx; vzeroupper; ret; 
0x00000000004503c2: mov esp, 0xf80148c0; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000446862: mov esp, 0xf80148c0; sub rax, rdx; vzeroupper; ret; 
0x0000000000431271: mov esp, 0xf80148c0; ret; 
0x0000000000431392: mov esp, 0xf80148c0; vzeroupper; ret; 
0x00000000004518d7: mov esp, 0xffffffff; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x00000000004528e8: mov esp, dword ptr [rbp + 0x10]; test r12, r12; jne 0x52918; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000004908b4: mov esp, dword ptr [rbp - 0x20]; mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x00000000004850bc: mov esp, eax; mov rbp, r9; nop; jmp rdx; 
0x0000000000484f22: mov esp, eax; test eax, eax; jne 0x84fa8; mov rcx, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x0000000000490a35: mov esp, ecx; pop rcx; jmp rcx; 
0x00000000004717a6: mov fs, word ptr [rsi + 0x45ffffe3]; xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000481eb0: mov qword ptr [r12 + 8], rax; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000484f81: mov qword ptr [r12], 0; mov rax, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x0000000000475db1: mov qword ptr [r12], r14; pop r12; pop r13; pop r14; ret; 
0x00000000004944ba: mov qword ptr [r13 + rbx*8], rdx; mov rax, qword ptr [rax + rbx*8]; test rax, rax; je 0x944ca; call rax; 
0x000000000048706d: mov qword ptr [r8], rax; mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000048708a: mov qword ptr [r8], rax; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000043df54: mov qword ptr [r9 - 8], rcx; ret; 
0x000000000048e280: mov qword ptr [r9], r8; add rsp, 8; ret; 
0x000000000047435a: mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000454654: mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x00000000004753cc: mov qword ptr [rax + 0x10], rcx; mov r8, rcx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000475408: mov qword ptr [rax + 0x10], rdi; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000047431c: mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000474aeb: mov qword ptr [rax + 0x18], rdx; xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x000000000045470a: mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x0000000000421be6: mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x0000000000454718: mov qword ptr [rax + 0x20], rsi; ret; 
0x0000000000474ae7: mov qword ptr [rax + 0x28], rdx; mov qword ptr [rax + 0x18], rdx; xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x0000000000474320: mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000047435e: mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x000000000047540c: mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000475171: mov qword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x000000000041f5b4: mov qword ptr [rax + 8], 0; ret; 
0x0000000000474311: mov qword ptr [rax + 8], rcx; mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000454658: mov qword ptr [rax + 8], rdx; ret; 
0x000000000041f5ad: mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x000000000048777c: mov qword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x458]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000487734: mov qword ptr [rax], rdi; pop rbx; ret; 
0x00000000004876a0: mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000474c0c: mov qword ptr [rax], rdx; mov eax, dword ptr [rcx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000474319: mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000487728: mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000004753d7: mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000490707: mov qword ptr [rbp + 8], rax; add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000041ea94: mov qword ptr [rbp + 8], rax; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046fa98: mov qword ptr [rbp - 0x4c8], 0; mov dword ptr [rbp - 0x4f0], 0x20; jmp rax; 
0x000000000047062c: mov qword ptr [rbp - 0x4d0], rcx; mov rdx, rcx; mov rsi, r9; mov rdi, r12; mov qword ptr [rbp - 0x4d8], r11; call qword ptr [rbx + 0x38]; 
0x000000000047063c: mov qword ptr [rbp - 0x4d8], r11; call qword ptr [rbx + 0x38]; 
0x0000000000470faf: mov qword ptr [rbp - 0x4d8], r11; mov rdx, rbx; mov rsi, r9; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000413f61: mov qword ptr [rbp - 0x4e0], 0; mov byte ptr [rbp - 0x508], 0x20; mov qword ptr [rbp - 0x4f8], rsi; jmp rax; 
0x0000000000415452: mov qword ptr [rbp - 0x4e8], rcx; mov rdx, rcx; mov rsi, r11; mov rdi, r12; mov dword ptr [rbp - 0x4f0], r9d; call qword ptr [rax + 0x38]; 
0x0000000000414f15: mov qword ptr [rbp - 0x4e8], rcx; mov rdx, rcx; mov rsi, r11; mov rdi, r12; mov dword ptr [rbp - 0x4f8], r9d; call qword ptr [rbx + 0x38]; 
0x00000000004712af: mov qword ptr [rbp - 0x4f8], r9; call qword ptr [rax + 0x38]; 
0x0000000000413f73: mov qword ptr [rbp - 0x4f8], rsi; jmp rax; 
0x00000000004156be: mov qword ptr [rbp - 0x500], r11; call qword ptr [rax + 0x38]; 
0x00000000004712a8: mov qword ptr [rbp - 0x500], r11; mov qword ptr [rbp - 0x4f8], r9; call qword ptr [rax + 0x38]; 
0x0000000000457d8e: mov qword ptr [rbp - 0x70], rsi; call 0x55f00; mov rsi, qword ptr [rbp - 0x70]; mov rdi, rbx; call rsi; 
0x000000000046d153: mov qword ptr [rbp - 0x8f0], r9; mov rdx, r9; mov rsi, r12; mov rdi, r13; call qword ptr [rcx + 0x38]; 
0x000000000047f527: mov qword ptr [rbp - 0xd8], r11; call rax; 
0x0000000000468c1f: mov qword ptr [rbp - 0xe8], r8; call rax; 
0x00000000004752f9: mov qword ptr [rbp], rax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004201f3: mov qword ptr [rbp], rax; mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000047564d: mov qword ptr [rbp], rax; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x0000000000483925: mov qword ptr [rbx + 0x10], 0; movups xmmword ptr [rbx], xmm0; pop rbx; ret; 
0x00000000004624b6: mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000484561: mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000484496: mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000048b8f8: mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000473070: mov qword ptr [rbx + 0x18], rdi; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000048b9bc: mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000041e6d4: mov qword ptr [rbx + 0x20], rax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041e73c: mov qword ptr [rbx + 0x58], 0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x00000000004752fd: mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004201f7: mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000041b1ee: mov qword ptr [rbx + 0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000041c506: mov qword ptr [rbx + 0x90], rax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000041b688: mov qword ptr [rbx + 0x90], rsi; xor eax, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x00000000004902b6: mov qword ptr [rbx + 0x98], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004630d2: mov qword ptr [rbx + r12*8], rax; lea rax, [rip + 0x5cb63]; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x630e8; call rax; 
0x0000000000463358: mov qword ptr [rbx + rbp*8], rax; lea rax, [rip + 0x5c8dd]; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x6336e; call rax; 
0x0000000000458206: mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000482697: mov qword ptr [rbx], 0; pop rbx; or dword ptr [rip + 0x3ea62], 1; ret; 
0x0000000000421ab3: mov qword ptr [rbx], r12; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000046c5d5: mov qword ptr [rbx], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000487fcd: mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x00000000004879fd: mov qword ptr [rbx], rax; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000428d40: mov qword ptr [rbx], rax; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000048d78c: mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000046715c: mov qword ptr [rcx + rdx*8], rax; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x000000000048e29f: mov qword ptr [rcx], r8; ret; 
0x000000000049053e: mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x0000000000464dcb: mov qword ptr [rcx], rdx; mov rax, qword ptr [rax + 0x58]; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000464cfb: mov qword ptr [rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000048598e: mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000044ad1c: mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000044ad3c: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000044a67c: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000044a65c: mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000044ad7f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000044a6bf: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000044ad9f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000044a6df: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000044ad60: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000044a6a0: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000041e626: mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000041e653: mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000420385: mov qword ptr [rdi + 0x18], rdx; mov rcx, rdx; add rax, rcx; mov qword ptr [rdi + 8], rax; xor eax, eax; ret; 
0x00000000004203cb: mov qword ptr [rdi + 0x18], rsi; mov qword ptr [rdi + 8], rax; xor eax, eax; ret; 
0x000000000045469e: mov qword ptr [rdi + 0x20], rdx; mov byte ptr [rdi + 0x28], 1; ret; 
0x00000000004546b0: mov qword ptr [rdi + 0x20], rsi; ret; 
0x000000000047dd5c: mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000047dd2a: mov qword ptr [rdi + 0x310], rax; ret; 
0x000000000041e657: mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000041e622: mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000041e61a: mov qword ptr [rdi + 0x58], rax; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000490594: mov qword ptr [rdi + 0x98], rsi; ret; 
0x000000000041f670: mov qword ptr [rdi + 0xa0], 0xffffffffffffffff; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000041f663: mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000041840c: mov qword ptr [rdi + 0xd8], rdx; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000044acdc: mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000044a61c: mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000044acfc: mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000044a63c: mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000043af27: mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043aeb7: mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043ae47: mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043add7: mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044abda: mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000043ad67: mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044a56a: mov qword ptr [rdi + 5], rdx; ret; 
0x000000000044abfa: mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000043acf7: mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044a57a: mov qword ptr [rdi + 6], rdx; ret; 
0x000000000044ac1a: mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000043ac87: mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044a58a: mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000486f3f: mov qword ptr [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000486e07: mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000485987: mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000485917: mov qword ptr [rdi + 8], r9; ret; 
0x0000000000487199: mov qword ptr [rdi + 8], rax; mov eax, 0xffffc002; sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000487125: mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x000000000042038f: mov qword ptr [rdi + 8], rax; xor eax, eax; ret; 
0x000000000041e62a: mov qword ptr [rdi + 8], rax; ret; 
0x0000000000485f4c: mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000044b18b: mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000446f4b: mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x000000000044e44e: mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rcx; ret; 
0x000000000044e5cd: mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x000000000044d6ca: mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x0000000000490550: mov qword ptr [rdi + rsi*8], rdx; add rsp, 8; ret; 
0x0000000000434b64: mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434ba2: mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000048587e: mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000434d17: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434e13: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000434d5f: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434ee7: mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004350c7: mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004352b7: mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435488: mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435688: mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435888: mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434b60: mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434b9e: mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434d13: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434e0f: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000434d5b: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434ee3: mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004350c3: mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004352b3: mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435484: mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435684: mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435884: mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434b5c: mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434b9a: mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434d0f: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434e0b: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000434d57: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434edf: mov qword ptr [rdi - 0x22], r9; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004350bf: mov qword ptr [rdi - 0x23], r9; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004352af: mov qword ptr [rdi - 0x24], r9; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435480: mov qword ptr [rdi - 0x25], r9; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435680: mov qword ptr [rdi - 0x26], r9; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435880: mov qword ptr [rdi - 0x27], r9; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434b58: mov qword ptr [rdi - 0x28], r8; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434b96: mov qword ptr [rdi - 0x28], r8; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434eeb: mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043a737: mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004350cb: mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043a6b7: mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004352bb: mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043a637: mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043548c: mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043a5a8: mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043568c: mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043a518: mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043588c: mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043a488: mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000485877: mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x00000000004857fd: mov qword ptr [rdi - 8], r9; ret; 
0x0000000000434b68: mov qword ptr [rdi - 8], rcx; ret; 
0x00000000004380f5: mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434d1b: mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434e17: mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000434d63: mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043a7b7: mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000485870: mov qword ptr [rdi], r11; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000485980: mov qword ptr [rdi], r11; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x00000000004857f7: mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000485911: mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x00000000004857cc: mov qword ptr [rdi], r9; ret; 
0x0000000000481dfb: mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x41503]; mov qword ptr [rsi], rax; ret; 
0x000000000044ab66: mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000044ab96: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000044a546: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000044abb6: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000044a556: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000044abd7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000044a567: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000044abf7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000044a577: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000044ac17: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000044a587: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000044b188: mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000446f48: mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x000000000044ab77: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000044a537: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000043ac8b: mov qword ptr [rdi], rcx; ret; 
0x000000000044e5d2: mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x000000000044ab53: mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x000000000043af93: mov qword ptr [rdi], rdx; ret; 
0x0000000000486fd5: mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000043df51: mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000044d6cf: mov qword ptr [rdi], rsi; ret; 
0x0000000000421bde: mov qword ptr [rdx + 0x28], rcx; mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x000000000041b2cc: mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x000000000041841a: mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000044a0ea: mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x00000000004488da: mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000044a10a: mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x00000000004488fa: mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000044a12a: mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x000000000044891a: mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000449fba: mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x000000000044880a: mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000449f63: mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000044a063: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000448893: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000044a083: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x00000000004488a3: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000044a0a3: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x00000000004488b3: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000044a0c3: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x00000000004488c3: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000044a0e3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x00000000004488d3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000044a103: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x00000000004488f3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000044a123: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000448913: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000449fb3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000448803: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x00000000004487b3: mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x00000000004877a0: mov qword ptr [rdx], rax; pop rbx; ret; 
0x00000000004202e8: mov qword ptr [rdx], rax; ret; 
0x000000000047466b: mov qword ptr [rdx], rcx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004948ba: mov qword ptr [rip + 0x2e653], 0; add rsp, 8; ret; 
0x000000000049446b: mov qword ptr [rip + 0x2e982], 0; add rsp, 8; ret; 
0x00000000004932d3: mov qword ptr [rip + 0x2f936], rbx; test rbx, rbx; jne 0x932c0; pop rbx; ret; 
0x0000000000487217: mov qword ptr [rip + 0x3bdaa], rax; ret; 
0x0000000000487200: mov qword ptr [rip + 0x3bdc1], rax; add rsp, 8; ret; 
0x0000000000484320: mov qword ptr [rip + 0x3ec75], 0; add rsp, 8; ret; 
0x0000000000481c98: mov qword ptr [rip + 0x41671], rax; ret; 
0x0000000000478073: mov qword ptr [rip + 0x4aebe], rax; cmp rdi, rax; ja 0x780a8; xor eax, eax; ret; 
0x0000000000464cd0: mov qword ptr [rip + 0x5cd19], rax; mov qword ptr [rip + 0x5cd1a], rdx; cmp qword ptr fs:[rdi], rsi; je 0x64ce8; ret; 
0x0000000000464cd7: mov qword ptr [rip + 0x5cd1a], rdx; cmp qword ptr fs:[rdi], rsi; je 0x64ce8; ret; 
0x000000000045420c: mov qword ptr [rip + 0x6ce7d], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004262af: mov qword ptr [rip + 0x9a4ca], rax; ret; 
0x00000000004262a1: mov qword ptr [rip + 0x9a4e0], rax; lea rax, [rip - 0xc6f]; mov qword ptr [rip + 0x9a4ca], rax; ret; 
0x00000000004224a5: mov qword ptr [rip + 0x9e2d4], rax; ret; 
0x0000000000422497: mov qword ptr [rip + 0x9e2ea], rax; lea rax, [rip + 0x319b]; mov qword ptr [rip + 0x9e2d4], rax; ret; 
0x000000000042151b: mov qword ptr [rip + 0x9f1ee], rax; ret; 
0x00000000004214f2: mov qword ptr [rip + 0x9f20f], rax; ret; 
0x00000000004214d2: mov qword ptr [rip + 0x9f227], rax; ret; 
0x00000000004211c8: mov qword ptr [rip + 0x9f599], rax; ret; 
0x00000000004211b1: mov qword ptr [rip + 0x9f5a8], rax; ret; 
0x0000000000421197: mov qword ptr [rip + 0x9f5b2], rdx; ret; 
0x0000000000421158: mov qword ptr [rip + 0x9f5b9], rax; ret; 
0x0000000000421148: mov qword ptr [rip + 0x9f5d1], rax; ret; 
0x0000000000422489: mov qword ptr [rip + 0xa07e8], rax; lea rax, [rip + 0x3429]; mov qword ptr [rip + 0x9e2ea], rax; lea rax, [rip + 0x319b]; mov qword ptr [rip + 0x9e2d4], rax; ret; 
0x0000000000421585: mov qword ptr [rip + 0xa172c], rax; ret; 
0x000000000042074f: mov qword ptr [rip + 0xa24de], 0; ret; 
0x00000000004206af: mov qword ptr [rip + 0xa2582], rbx; add dword ptr [rip + 0xa2577], 1; pop rbx; ret; 
0x000000000040200d: mov qword ptr [rip + 0xc0d8c], rax; add rsp, 0x88; pop rbx; ret; 
0x00000000004017c4: mov qword ptr [rip + 0xc1829], 0; pop rdx; ret; 
0x0000000000402cf1: mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000402ce5: mov qword ptr [rsi + 8], rax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000481e05: mov qword ptr [rsi], rax; ret; 
0x0000000000464cf0: mov qword ptr [rsi], rcx; mov rcx, 0xffffffffffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000481104: mov qword ptr [rsi], rdi; mov rax, r8; ret; 
0x0000000000402cee: mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000490f77: mov qword ptr [rsp + 0x10], r10; call rax; 
0x0000000000423bbd: mov qword ptr [rsp + 0x10], r8; call rax; 
0x0000000000423bb8: mov qword ptr [rsp + 0x18], r10; mov qword ptr [rsp + 0x10], r8; call rax; 
0x0000000000480df7: mov qword ptr [rsp + 0x18], rax; call 0x80720; add rsp, 0xd8; ret; 
0x0000000000451594: mov qword ptr [rsp + 0x20], rax; cmp esi, 9; je 0x515c8; mov eax, 0x48; syscall; 
0x0000000000477fa9: mov qword ptr [rsp + 0x28], rax; xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall; 
0x0000000000452e8d: mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000450ca7: mov qword ptr [rsp + 8], rax; call 0x75510; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000451621: mov qword ptr [rsp + 8], rax; xor eax, eax; cmp esi, 9; je 0x51658; mov eax, 0x48; syscall; 
0x000000000041951e: mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000041c798: mov qword ptr [rsp], r8; mov rdx, r8; mov rsi, r12; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x000000000048dd83: mov qword ptr [rsp], rax; call 0x8e1b0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000423bd8: mov qword ptr [rsp], rax; call rdx; 
0x000000000041baff: mov qword ptr [rsp], rcx; mov rdi, rbp; call rax; 
0x0000000000484f80: mov qword ptr fs:[r12], 0; mov rax, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x0000000000421ab2: mov qword ptr fs:[rbx], r12; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000464dca: mov qword ptr fs:[rcx], rdx; mov rax, qword ptr [rax + 0x58]; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000464cfa: mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000464d05: mov qword ptr fs:[rdx], rax; ret; 
0x0000000000464cef: mov qword ptr fs:[rsi], rcx; mov rcx, 0xffffffffffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000044d6c9: mov qword ptr ss:[rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x0000000000402cf0: mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x0000000000487c64: mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000000487c64: mov r10, rcx; mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x87c80; ret; 
0x0000000000454234: mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000000454234: mov r10, rcx; mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x54247; ret; 
0x0000000000451854: mov r10, rsi; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x0000000000464fd9: mov r10d, 8; mov eax, 0xd; syscall; 
0x000000000046517b: mov r10d, 8; mov rsi, r8; mov eax, 0xe; syscall; 
0x00000000004519d9: mov r10d, ebx; mov rdi, rbp; mov eax, 9; syscall; 
0x0000000000451a1e: mov r10d, ecx; mov ecx, 9; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x0000000000434cb0: mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434c94: mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000484440: mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x00000000004843be: mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000470ddc: mov r11, rcx; lea rsi, [rip + 0x4cfda]; mov dword ptr [rbp - 0x530], 1; mov dword ptr [rbp - 0x4e8], 0; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470d14: mov r11, rcx; lea rsi, [rip + 0x4d4a2]; mov dword ptr [rbp - 0x4e0], 1; mov dword ptr [rbp - 0x4f0], 0x20; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470b4b: mov r11, rcx; mov dword ptr [rbp - 0x4d0], 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004708e3: mov r11, rcx; mov dword ptr [rbp - 0x4e8], 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x0000000000470d63: mov r11, rcx; mov dword ptr [rbp - 0x4f8], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470e6b: mov r11, rcx; mov dword ptr [rbp - 0x508], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470723: mov r11, rcx; mov dword ptr [rbp - 0x514], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470e31: mov r11, rcx; mov dword ptr [rbp - 0x520], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004706a3: mov r11, rcx; mov dword ptr [rbp - 0x528], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000046fccb: mov r11, rcx; xor r9d, r9d; mov dword ptr [rbp - 0x4d0], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004135a7: mov r11d, 0x89480003; ret; 
0x000000000047ecd0: mov r11d, dword ptr [rbp - 0xc4]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; test r11d, r11d; jne 0x7ece5; call rax; 
0x00000000004518d6: mov r12, 0xffffffffffffffff; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x00000000004528e7: mov r12, qword ptr [rbp + 0x10]; test r12, r12; jne 0x52918; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000004908b3: mov r12, qword ptr [rbp - 0x20]; mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000484f21: mov r12d, eax; test eax, eax; jne 0x84fa8; mov rcx, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x0000000000452927: mov r13, qword ptr [r12 + 0x10]; test r13, r13; jne 0x52980; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000452957: mov r13, qword ptr [r12 + 0x10]; test r13, r13; jne 0x529e0; mov rdi, qword ptr [r12]; call rbx; 
0x00000000004908b7: mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000040f694: mov r13, r15; add r15, r12; call rax; 
0x00000000004653e8: mov r13, rax; mov rdi, r12; call rbx; 
0x000000000046f94a: mov r13, rbx; sar r13, 2; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x0000000000452a1a: mov r14, qword ptr [r13 + 0x10]; test r14, r14; jne 0x52a40; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004529be: mov r14, qword ptr [r13 + 0x10]; test r14, r14; jne 0x52b00; mov rdi, qword ptr [r13]; call rbx; 
0x000000000045298e: mov r14, qword ptr [r13 + 0x10]; test r14, r14; jne 0x52b60; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000490a28: mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x00000000004908bb: mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000047e706: mov r14, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r13]; call rax; 
0x0000000000452b6a: mov r15, qword ptr [r14 + 0x10]; test r15, r15; jne 0x52bb1; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452b96: mov r15, qword ptr [r14 + 0x10]; test r15, r15; jne 0x52c08; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452a4e: mov r15, qword ptr [r14 + 0x10]; test r15, r15; jne 0x52c62; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452b0e: mov r15, qword ptr [r14 + 0x10]; test r15, r15; jne 0x52cbc; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452ade: mov r15, qword ptr [r14 + 0x10]; test r15, r15; jne 0x52d16; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452aae: mov r15, qword ptr [r14 + 0x10]; test r15, r15; jne 0x52d70; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452a7e: mov r15, qword ptr [r14 + 0x10]; test r15, r15; jne 0x52dca; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452b3e: mov r15, qword ptr [r14 + 0x10]; test r15, r15; jne 0x52e24; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000413e02: mov r15, qword ptr [rbp - 0x4c0]; mov rsi, r13; mov rdi, r12; sub r15, r13; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000490a2c: mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x00000000004908bf: mov r15, qword ptr [rbp - 8]; leave; ret; 
0x00000000004850b5: mov r15, qword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000000452182: mov r15d, r13d; call rax; 
0x0000000000452e2e: mov r8, qword ptr [r15 + 0x10]; test r8, r8; jne 0x52e72; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452e57: mov r8, qword ptr [r15 + 0x10]; test r8, r8; jne 0x52edd; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452bbf: mov r8, qword ptr [r15 + 0x10]; test r8, r8; jne 0x52f4b; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452d24: mov r8, qword ptr [r15 + 0x10]; test r8, r8; jne 0x52fb9; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452c43: mov r8, qword ptr [r15 + 0x10]; test r8, r8; jne 0x53027; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452dd8: mov r8, qword ptr [r15 + 0x10]; test r8, r8; jne 0x53095; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452c9d: mov r8, qword ptr [r15 + 0x10]; test r8, r8; jne 0x53103; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452c70: mov r8, qword ptr [r15 + 0x10]; test r8, r8; jne 0x53171; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452cf7: mov r8, qword ptr [r15 + 0x10]; test r8, r8; jne 0x531df; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452d7e: mov r8, qword ptr [r15 + 0x10]; test r8, r8; jne 0x5324d; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452be9: mov r8, qword ptr [r15 + 0x10]; test r8, r8; jne 0x532bb; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452cca: mov r8, qword ptr [r15 + 0x10]; test r8, r8; jne 0x53329; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452dab: mov r8, qword ptr [r15 + 0x10]; test r8, r8; jne 0x53397; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452c16: mov r8, qword ptr [r15 + 0x10]; test r8, r8; jne 0x53405; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452d51: mov r8, qword ptr [r15 + 0x10]; test r8, r8; jne 0x53473; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452e05: mov r8, qword ptr [r15 + 0x10]; test r8, r8; jne 0x534e1; mov rdi, qword ptr [r15]; call rbx; 
0x000000000048e2a8: mov r8, qword ptr [r8]; mov qword ptr [r9], r8; add rsp, 8; ret; 
0x000000000048e298: mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [rcx], r8; ret; 
0x0000000000481d8d: mov r8, qword ptr [rip + 0x4157c]; mov rax, r8; ret; 
0x0000000000481c8b: mov r8, qword ptr [rip + 0x4167e]; jne 0x81ca0; lea rax, [r8 + 1]; mov qword ptr [rip + 0x41671], rax; ret; 
0x0000000000490878: mov r8, r12; mov rcx, r14; mov esi, 1; mov edi, 1; call rax; 
0x000000000049045c: mov r8, r13; mov rcx, r12; mov esi, 0x1a; mov edi, 1; call rax; 
0x00000000004903df: mov r8, r13; mov rcx, r12; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000049030b: mov r8, rbx; mov rcx, r12; or esi, 2; mov edi, 1; call rax; 
0x00000000004753d0: mov r8, rcx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000421938: mov r8, rdi; pop rbx; pop rbp; mov rax, r8; pop r12; ret; 
0x0000000000465178: mov r8, rsi; mov r10d, 8; mov rsi, r8; mov eax, 0xe; syscall; 
0x000000000047fe44: mov r8b, 0xf; xchg ebp, eax; ret 0x2148; 
0x0000000000450be5: mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000450d31: mov r8d, eax; mov edi, dword ptr [rsp + 8]; mov eax, 1; syscall; 
0x0000000000450c91: mov r8d, eax; mov edi, dword ptr [rsp + 8]; xor eax, eax; syscall; 
0x000000000044b183: mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000446f43: mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x000000000044f31a: mov r9, qword ptr [rsp + 0x10]; mov rdi, r12; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000045b9df: mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; call rbx; 
0x000000000045ecfd: mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; call rbx; 
0x000000000045a4ad: mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x60]; call rbx; 
0x000000000045ab62: mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; call rbx; 
0x000000000045a8ec: mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x0000000000460462: mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; call rbx; 
0x000000000045d97f: mov r9, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000045cf3f: mov r9, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000490459: mov r9, r14; mov r8, r13; mov rcx, r12; mov esi, 0x1a; mov edi, 1; call rax; 
0x00000000004903dc: mov r9, r14; mov r8, r13; mov rcx, r12; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000044fc4d: mov r9, r14; mov rsi, qword ptr [rsp + 0x18]; mov rcx, r12; mov rdx, r13; call rbx; 
0x0000000000457342: mov r9, r14; mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; call rbx; 
0x000000000045b3c9: mov r9, r15; push rax; push rbp; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x60]; call rbx; 
0x000000000044ee9a: mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x4ee88; ret; 
0x000000000046c9b0: mov r9, rax; pop r12; pop r13; mov rax, r9; pop r14; ret; 
0x0000000000470db0: mov r9d, 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000401008: mov rax, 0; test rax, rax; je 0x1016; call rax; 
0x0000000000464f10: mov rax, 0xf; syscall; 
0x0000000000464d14: mov rax, 0xffffffffffffffb0; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000450aa0: mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004519f8: mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000004780a8: mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000004826b4: mov rax, 0xffffffffffffffc0; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x0000000000424350: mov rax, 0xffffffffffffffc0; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x0000000000464d74: mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x0000000000464d54: mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x0000000000464d34: mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x000000000041f714: mov rax, 0xffffffffffffffff; ret; 
0x00000000004774a0: mov rax, 1; ret; 
0x00000000004774b0: mov rax, 2; ret; 
0x00000000004774c0: mov rax, 3; ret; 
0x00000000004774d0: mov rax, 4; ret; 
0x00000000004774e0: mov rax, 5; ret; 
0x00000000004774f0: mov rax, 6; ret; 
0x0000000000477500: mov rax, 7; ret; 
0x000000000048957b: mov rax, qword ptr [r12]; pop rbx; add rax, qword ptr [rdx + 8]; pop rbp; pop r12; jmp rax; 
0x000000000040fe38: mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000419bf4: mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000464dce: mov rax, qword ptr [rax + 0x58]; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000041f53f: mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x1f538; ret; 
0x0000000000474974: mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x0000000000474aa9: mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000419bed: mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000048cdfb: mov rax, qword ptr [rax + 8]; mov rdx, r13; add rax, qword ptr [rbx]; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000484344: mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x0000000000484334: mov rax, qword ptr [rax + 8]; ret; 
0x00000000004630dd: mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x630e8; call rax; 
0x0000000000463363: mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x6336e; call rax; 
0x00000000004944bf: mov rax, qword ptr [rax + rbx*8]; test rax, rax; je 0x944ca; call rax; 
0x00000000004145a5: mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x0000000000464d22: mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000004708f0: mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004904dc: mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x0000000000464d1f: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000004202d8: mov rax, qword ptr [rax]; test rax, rax; jne 0x202d0; ret; 
0x000000000045217e: mov rax, qword ptr [rbp - 0x58]; mov r15d, r13d; call rax; 
0x0000000000486d15: mov rax, qword ptr [rbp - 8]; xor rax, qword ptr fs:[0x28]; jne 0x86da5; leave; ret; 
0x000000000047f51b: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r11]; test r9d, r9d; jne 0x7f537; mov qword ptr [rbp - 0xd8], r11; call rax; 
0x000000000047e709: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r13]; call rax; 
0x000000000047eb4a: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; test ecx, ecx; jne 0x7eb57; call rax; 
0x000000000047f3e7: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; test edx, edx; jne 0x7f3f4; call rax; 
0x000000000047ecd7: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; test r11d, r11d; jne 0x7ece5; call rax; 
0x0000000000487778: mov rax, qword ptr [rbx + 0x10]; mov qword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x458]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000487730: mov rax, qword ptr [rbx + 0x10]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x0000000000487720: mov rax, qword ptr [rbx + 0x10]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000041e790: mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000041e7ad: mov rax, qword ptr [rbx + 0x18]; mov esi, dword ptr [rsp + 0xc]; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000041e873: mov rax, qword ptr [rbx + 0x20]; add rsp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000041ea43: mov rax, qword ptr [rbx + 0x28]; add rsp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000041eeac: mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000041f32e: mov rax, qword ptr [rbx + 0x48]; add rsp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x0000000000454209: mov rax, qword ptr [rbx]; mov qword ptr [rip + 0x6ce7d], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044a0e6: mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x00000000004488d6: mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000044a106: mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x00000000004488f6: mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000044a126: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000448916: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000449fb6: mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000448806: mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000428288: mov rax, qword ptr [rcx + rax + 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x0000000000449f60: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000044a060: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000448890: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000044a080: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x00000000004488a0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000044a0a0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x00000000004488b0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000044a0c0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x00000000004488c0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000044a0e0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x00000000004488d0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000044a100: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x00000000004488f0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000044a120: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000448910: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000449fb0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000448800: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x00000000004487b0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000041e64b: mov rax, qword ptr [rdi + 0x18]; punpckhqdq xmm0, xmm0; mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000464575: mov rax, qword ptr [rdi + 0x20]; mov rbp, rdi; test rax, rax; je 0x64583; call rax; 
0x0000000000494794: mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0x947a4; call rax; 
0x0000000000421094: mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000421be2: mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x000000000041e61e: mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000420664: mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000004904f4: mov rax, qword ptr [rdi + 0x90]; ret; 
0x0000000000490564: mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000474954: mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x74968; ret; 
0x00000000004905a4: mov rax, qword ptr [rdi + 0xa0]; ret; 
0x0000000000490604: mov rax, qword ptr [rdi + 0xa8]; ret; 
0x00000000004905f4: mov rax, qword ptr [rdi + 0xb0]; ret; 
0x00000000004905b4: mov rax, qword ptr [rdi + 0xb8]; ret; 
0x0000000000490574: mov rax, qword ptr [rdi + 0xc0]; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000042078a: mov rax, qword ptr [rdi + 8]; cmp rax, rdx; jae 0x207b8; movzx eax, byte ptr [rax]; ret; 
0x0000000000490e54: mov rax, qword ptr [rdi + 8]; mov rsi, rdi; test rax, rax; je 0x90e70; mov edi, 1; jmp rax; 
0x0000000000432d20: mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x331d3; xor eax, eax; ret; 
0x0000000000432796: mov rax, qword ptr [rdi - 8]; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x331d3; xor eax, eax; ret; 
0x0000000000421504: mov rax, qword ptr [rdi]; cmp rax, 0x2000000; jbe 0x21510; ret; 
0x0000000000421164: mov rax, qword ptr [rdi]; cmp rax, 0x408; jbe 0x21170; ret; 
0x0000000000421564: mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0x21570; ret; 
0x00000000004211a4: mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0x211b0; ret; 
0x000000000048ac94: mov rax, qword ptr [rdi]; cmp rax, rsi; je 0x8aca0; ret; 
0x00000000004202e5: mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000421534: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x9f1f2], 1; mov dword ptr [rip + 0x9f1e4], eax; ret; 
0x00000000004214e4: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x9f242], 1; mov qword ptr [rip + 0x9f20f], rax; ret; 
0x00000000004214c4: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x9f262], 1; mov qword ptr [rip + 0x9f227], rax; ret; 
0x0000000000421554: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa1756], eax; ret; 
0x00000000004211c4: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x9f599], rax; ret; 
0x0000000000421154: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x9f5b9], rax; ret; 
0x0000000000421144: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x9f5d1], rax; ret; 
0x00000000004822d9: mov rax, qword ptr [rdx + rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x0000000000481df4: mov rax, qword ptr [rip + 0x3e2f5]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x41503]; mov qword ptr [rsi], rax; ret; 
0x0000000000481dfe: mov rax, qword ptr [rip + 0x41503]; mov qword ptr [rsi], rax; ret; 
0x00000000004776e0: mov rax, qword ptr [rip + 0x483b1]; test rax, rax; je 0x77720; call rax; 
0x0000000000461c84: mov rax, qword ptr [rip + 0x61165]; ret; 
0x00000000004581a4: mov rax, qword ptr [rip + 0x6b6fd]; ret; 
0x0000000000451934: mov rax, qword ptr [rip + 0x6f7dd]; test rax, rax; je 0x51941; ret; 
0x00000000004214a3: mov rax, qword ptr [rip + 0x9f28e]; mov dword ptr [r11 + 0x24], ebp; pop rbp; mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x0000000000420644: mov rax, qword ptr [rip + 0x9fad5]; ret; 
0x0000000000491139: mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000048e399: mov rax, qword ptr [rsi + 0xa8]; add rsp, 8; ret; 
0x000000000048e3f8: mov rax, qword ptr [rsi + 0xb0]; add rsp, 8; ret; 
0x000000000048e3ac: mov rax, qword ptr [rsi + 0xb8]; add rsp, 8; ret; 
0x00000000004141b8: mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000484f89: mov rax, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x0000000000402659: mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045a0a4: mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000459aa8: mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045a8fb: mov rax, qword ptr [rsp + 0x30]; call rax; 
0x0000000000450cb1: mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000490f72: mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp + 0x10], r10; call rax; 
0x0000000000451cd8: mov rax, qword ptr [rsp + 8]; mov rdi, r13; call rax; 
0x000000000049242a: mov rax, qword ptr [rsp + 8]; mov rdx, r15; mov rsi, qword ptr [r12 + r14*8 + 0x10]; mov rdi, r13; call rax; 
0x0000000000490f93: mov rax, qword ptr [rsp + 8]; mov rdx, r9; mov rdi, r15; lea rbx, [r12 + rcx*8]; mov rsi, qword ptr [rbx]; call rax; 
0x000000000048e075: mov rax, qword ptr [rsp]; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x000000000048dd8c: mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000040f52b: mov rax, qword ptr [rsp]; call rax; 
0x0000000000419174: mov rax, qword ptr [rsp]; mov esi, 0xffffffff; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x000000000040f690: mov rax, qword ptr [rsp]; mov r13, r15; add r15, r12; call rax; 
0x000000000040f490: mov rax, qword ptr [rsp]; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000040f61b: mov rax, qword ptr [rsp]; mov rsi, r12; mov rdi, r13; call rax; 
0x0000000000464d1e: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000451cd7: mov rax, qword ptr ss:[rsp + 8]; mov rdi, r13; call rax; 
0x0000000000475668: mov rax, r12; pop r12; pop r13; ret; 
0x00000000004031c8: mov rax, r12; pop r12; ret; 
0x00000000004527d1: mov rax, r12; pop rbp; pop r12; jmp rax; 
0x0000000000451b58: mov rax, r12; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000000474f44: mov rax, r12; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000042175a: mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x00000000004518e1: mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000417760: mov rax, r12; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040312a: mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000048bb08: mov rax, r12; sar rax, 3; pop rbx; pop rbp; pop r12; ret; 
0x0000000000488215: mov rax, r13; pop r12; pop r13; ret; 
0x00000000004184ed: mov rax, r13; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000004520d8: mov rax, r13; pop rbp; pop r12; pop r13; ret; 
0x00000000004520c3: mov rax, r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004100a9: mov rax, r8; add qword ptr [rip + 0xb36a4], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000481171: mov rax, r8; neg rax; test cl, cl; cmove r8, rax; mov rax, r8; ret; 
0x0000000000426679: mov rax, r8; pop r12; pop r13; ret; 
0x000000000042193d: mov rax, r8; pop r12; ret; 
0x00000000004266e6: mov rax, r8; pop r13; ret; 
0x0000000000477cf2: mov rax, r8; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000041b166: mov rax, r8; pop rbp; pop r12; ret; 
0x0000000000425793: mov rax, r8; pop rbp; ret; 
0x0000000000427c88: mov rax, r8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000425e99: mov rax, r8; pop rbx; pop rbp; pop r12; ret; 
0x000000000041011b: mov rax, r8; pop rbx; pop rbp; ret; 
0x000000000042559c: mov rax, r8; pop rbx; ret; 
0x00000000004502e3: mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000410110: mov rax, r8; ret; 
0x0000000000446aa0: mov rax, r8; vzeroupper; ret; 
0x0000000000406fa5: mov rax, r9; pop r12; ret; 
0x000000000046c9b7: mov rax, r9; pop r14; ret; 
0x000000000046c906: mov rax, r9; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000406f77: mov rax, r9; pop rbx; pop rbp; pop r12; ret; 
0x000000000041c50d: mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000490712: mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000041ce68: mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000466f03: mov rax, rdi; mov rdi, rdx; cmp rax, 9; ja 0x66ee0; mov rax, r8; ret; 
0x0000000000420674: mov rax, rdi; ret; 
0x00000000004846d4: mov rax, rdx; mov rcx, qword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x84714; add rsp, 0x58; ret; 
0x0000000000484b64: mov rax, rdx; mov rcx, qword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x84ba4; add rsp, 0x58; ret; 
0x0000000000484846: mov rax, rdx; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x84894; add rsp, 0x68; ret; 
0x000000000044e920: mov rax, rdx; pop rbx; ret; 
0x0000000000447178: mov rax, rdx; ret; 
0x0000000000490a30: mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x00000000004850be: mov rbp, r9; nop; jmp rdx; 
0x0000000000450e35: mov rbp, rdi; mov rdi, rbp; mov eax, 0x4f; syscall; 
0x0000000000464579: mov rbp, rdi; test rax, rax; je 0x64583; call rax; 
0x000000000048245b: mov rbp, rsp; mov rsi, rbp; syscall; 
0x000000000047496c: mov rbx, rdi; test byte ptr [rdi], 2; jne 0x749e8; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x00000000004509e4: mov rcx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000464cf3: mov rcx, 0xffffffffffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000474315: mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000043df4d: mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000490532: mov rcx, qword ptr [rdi + rsi*8]; cmp al, 8; jne 0x174b; mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x0000000000490f14: mov rcx, qword ptr [rdx + 8]; mov eax, 1; cmp qword ptr [rsi + 8], rcx; ja 0x90f25; sbb eax, eax; ret; 
0x000000000044ad14: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000044ad34: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000044a674: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000044a654: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000044acd4: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000044a614: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000044acf4: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000044a634: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000044d6c2: mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x0000000000435054: mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435070: mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435234: mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435250: mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435414: mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435430: mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435604: mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435620: mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435804: mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435820: mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435a04: mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435a20: mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043279a: mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x331d3; xor eax, eax; ret; 
0x000000000043a5a4: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043a514: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043a484: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432d1c: mov rcx, qword ptr [rsi - 8]; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x331d3; xor eax, eax; ret; 
0x0000000000434e74: mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434e90: mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000044ab60: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000044a520: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000044ab70: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000044a530: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000044ab90: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000044a540: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000044abb0: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000044a550: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000043af24: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043aeb4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043ae44: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043add4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043ad64: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043acf4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043ac84: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000446f40: mov rcx, qword ptr [rsi]; mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x000000000044abd0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000044a560: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000044abf0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000044a570: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000044ac10: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000044a580: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000484f2c: mov rcx, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x000000000044fdd2: mov rcx, qword ptr [rsp + 0x20]; mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000045b76a: mov rcx, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000460010: mov rcx, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045e913: mov rcx, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000048444a: mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x00000000004843c8: mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x00000000004846d7: mov rcx, qword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x84714; add rsp, 0x58; ret; 
0x0000000000484b67: mov rcx, qword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x84ba4; add rsp, 0x58; ret; 
0x0000000000484849: mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x84894; add rsp, 0x68; ret; 
0x000000000043df4c: mov rcx, qword ptr ss:[rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000049045f: mov rcx, r12; mov esi, 0x1a; mov edi, 1; call rax; 
0x00000000004903e2: mov rcx, r12; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000044fc55: mov rcx, r12; mov rdx, r13; call rbx; 
0x000000000049030e: mov rcx, r12; or esi, 2; mov edi, 1; call rax; 
0x000000000049087b: mov rcx, r14; mov esi, 1; mov edi, 1; call rax; 
0x000000000048100a: mov rcx, rax; cmp rcx, rdx; jne 0x80fe8; mov eax, dword ptr [rcx]; ret; 
0x00000000004203c5: mov rcx, rdx; add rax, rcx; mov qword ptr [rdi + 0x18], rsi; mov qword ptr [rdi + 8], rax; xor eax, eax; ret; 
0x0000000000420389: mov rcx, rdx; add rax, rcx; mov qword ptr [rdi + 8], rax; xor eax, eax; ret; 
0x000000000044e36d: mov rcx, rdx; movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000044d6a5: mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000048b5de: mov rcx, rsi; sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x8b5d0; mov eax, 1; ret; 
0x0000000000401c91: mov rdi, 0x401dfa; call 0x21d0; hlt; nop; endbr64; ret; 
0x000000000044eff4: mov rdi, qword ptr [r12 + 0x10]; push 1; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000044ef86: mov rdi, qword ptr [r12 + 0x10]; push 1; xor edx, edx; push 1; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000452931: mov rdi, qword ptr [r12]; call rbx; 
0x000000000040f524: mov rdi, qword ptr [r12]; mov rdx, r14; mov rax, qword ptr [rsp]; call rax; 
0x0000000000476be4: mov rdi, qword ptr [r12]; push 0; lea rcx, [rax + 1]; lea r9, [rsp + 0x28]; call rbx; 
0x000000000045299b: mov rdi, qword ptr [r13]; call rbx; 
0x0000000000452a5b: mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452bcc: mov rdi, qword ptr [r15]; call rbx; 
0x00000000004534eb: mov rdi, qword ptr [r8 + 0x10]; test rdi, rdi; jne 0x5353f; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000045351a: mov rdi, qword ptr [r8 + 0x10]; test rdi, rdi; jne 0x53567; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453413: mov rdi, qword ptr [r8 + 0x10]; test rdi, rdi; jne 0x535ba; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004531ed: mov rdi, qword ptr [r8 + 0x10]; test rdi, rdi; jne 0x536a0; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453035: mov rdi, qword ptr [r8 + 0x10]; test rdi, rdi; jne 0x53758; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452fc7: mov rdi, qword ptr [r8 + 0x10]; test rdi, rdi; jne 0x53786; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452e80: mov rdi, qword ptr [r8 + 0x10]; test rdi, rdi; jne 0x53810; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000045306c: mov rdi, qword ptr [r8 + 0x10]; test rdi, rdi; jne 0x5386c; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453148: mov rdi, qword ptr [r8 + 0x10]; test rdi, rdi; jne 0x53924; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453292: mov rdi, qword ptr [r8 + 0x10]; test rdi, rdi; jne 0x539ae; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000045344a: mov rdi, qword ptr [r8 + 0x10]; test rdi, rdi; jne 0x53a0a; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452ffe: mov rdi, qword ptr [r8 + 0x10]; test rdi, rdi; jne 0x53a38; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000045336e: mov rdi, qword ptr [r8 + 0x10]; test rdi, rdi; jne 0x53a66; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452e92: mov rdi, qword ptr [r8]; call rbx; 
0x0000000000451c36: mov rdi, qword ptr [rbp + 0x10]; test rdi, rdi; jne 0x51c66; mov rdi, qword ptr [rbp]; call rbx; 
0x0000000000451c3f: mov rdi, qword ptr [rbp]; call rbx; 
0x000000000048b9b4: mov rdi, qword ptr [rdi]; call 0x8d7a0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000048b8f0: mov rdi, qword ptr [rdi]; call 0x8dad0; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000484f8e: mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x0000000000484f31: mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x00000000004653f8: mov rdi, qword ptr [rsp + 0x18]; mov rdx, rbp; mov rsi, r12; call rbx; 
0x000000000045d989: mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000045cf49: mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000045c308: mov rdi, qword ptr [rsp + 0x48]; call rbx; 
0x000000000045ed07: mov rdi, qword ptr [rsp + 0x50]; call rbx; 
0x000000000046001a: mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045e91d: mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000045ab6c: mov rdi, qword ptr [rsp + 0x58]; call rbx; 
0x000000000045b774: mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000459aa3: mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045a8f6: mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x000000000045a4b7: mov rdi, qword ptr [rsp + 0x60]; call rbx; 
0x000000000045a09f: mov rdi, qword ptr [rsp + 0x60]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000041eee2: mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000041e7b5: mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000452b72: mov rdi, qword ptr ds:[r14]; call rbx; 
0x00000000004142e5: mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000041ed6d: mov rdi, r12; call qword ptr [rbx + 0x18]; 
0x00000000004144c4: mov rdi, r12; call qword ptr [rcx + 0x38]; 
0x000000000040f49a: mov rdi, r12; call rax; 
0x00000000004653eb: mov rdi, r12; call rbx; 
0x000000000044f1c9: mov rdi, r12; lea r9, [rsp + 0x30]; call rbx; 
0x000000000041545f: mov rdi, r12; mov dword ptr [rbp - 0x4f0], r9d; call qword ptr [rax + 0x38]; 
0x0000000000414f22: mov rdi, r12; mov dword ptr [rbp - 0x4f8], r9d; call qword ptr [rbx + 0x38]; 
0x00000000004156b4: mov rdi, r12; mov dword ptr [rbp - 0x508], r10d; mov qword ptr [rbp - 0x500], r11; call qword ptr [rax + 0x38]; 
0x0000000000426007: mov rdi, r12; mov eax, 0xca; syscall; 
0x0000000000470639: mov rdi, r12; mov qword ptr [rbp - 0x4d8], r11; call qword ptr [rbx + 0x38]; 
0x00000000004712a5: mov rdi, r12; mov qword ptr [rbp - 0x500], r11; mov qword ptr [rbp - 0x4f8], r9; call qword ptr [rax + 0x38]; 
0x0000000000468c1c: mov rdi, r12; mov qword ptr [rbp - 0xe8], r8; call rax; 
0x000000000044f31f: mov rdi, r12; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000413e0c: mov rdi, r12; sub r15, r13; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000004143b1: mov rdi, r12; sub r15, r8; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000046f944: mov rdi, r12; sub rbx, r14; mov r13, rbx; sar r13, 2; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x000000000046fe44: mov rdi, r12; sub rbx, r8; sar rbx, 2; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x000000000046d160: mov rdi, r13; call qword ptr [rcx + 0x38]; 
0x000000000040f622: mov rdi, r13; call rax; 
0x0000000000465426: mov rdi, r13; call rbx; 
0x000000000046dcbf: mov rdi, r13; mov dword ptr [rbp - 0x970], r10d; mov byte ptr [rbp - 0x958], r9b; call rax; 
0x000000000042759a: mov rdi, r13; mov eax, 0xca; syscall; 
0x0000000000426b65: mov rdi, r14; call rax; 
0x000000000045217b: mov rdi, r14; mov rax, qword ptr [rbp - 0x58]; mov r15d, r13d; call rax; 
0x000000000041872d: mov rdi, r15; call qword ptr [rbp + 0x38]; 
0x0000000000412369: mov rdi, r15; call qword ptr [rbx + 0x38]; 
0x00000000004120c0: mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x0000000000419523: mov rdi, r15; call rax; 
0x0000000000490f9b: mov rdi, r15; lea rbx, [r12 + rcx*8]; mov rsi, qword ptr [rbx]; call rax; 
0x0000000000411df7: mov rdi, r15; mov dword ptr [rbp - 0x94c], r9d; mov dword ptr [rbp - 0x940], r11d; call rax; 
0x00000000004281db: mov rdi, r15; mov eax, 0xca; syscall; 
0x0000000000490f6c: mov rdi, r15; mov rdx, qword ptr [r10]; mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp + 0x10], r10; call rax; 
0x0000000000411ea4: mov rdi, r15; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x00000000004017bc: mov rdi, r8; call 0x268b0; mov qword ptr [rip + 0xc1829], 0; pop rdx; ret; 
0x000000000041917d: mov rdi, r8; call qword ptr [rax + 0x18]; 
0x0000000000401def: mov rdi, rax; call 0x18950; nop; pop rbp; ret; 
0x0000000000466e82: mov rdi, rax; cmp rdx, rcx; jae 0x66e6c; mov rax, r8; ret; 
0x000000000040f373: mov rdi, rax; mov eax, 0xba; syscall; 
0x000000000041c6af: mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000041c1a7: mov rdi, rbp; call qword ptr [rax + 0x40]; 
0x000000000041c7a2: mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x000000000041808b: mov rdi, rbp; call qword ptr [rbx + 0x10]; 
0x000000000041e906: mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x000000000041bb03: mov rdi, rbp; call rax; 
0x0000000000450e38: mov rdi, rbp; mov eax, 0x4f; syscall; 
0x0000000000422e9c: mov rdi, rbp; mov eax, 0xca; syscall; 
0x00000000004519dc: mov rdi, rbp; mov eax, 9; syscall; 
0x00000000004527ce: mov rdi, rbp; mov rax, r12; pop rbp; pop r12; jmp rax; 
0x0000000000451b55: mov rdi, rbp; mov rax, r12; pop rbp; pop r12; pop r13; jmp rax; 
0x000000000044fdd7: mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000419be9: mov rdi, rbp; pop rbp; mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004746d3: mov rdi, rbp; pop rbp; pop r12; jmp rax; 
0x00000000004266f3: mov rdi, rbp; pop rbp; pop r12; pop r13; jmp rax; 
0x000000000041e87b: mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x0000000000425e6a: mov rdi, rbp; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000041e69f: mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000041ecd0: mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000041f760: mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000041cf2e: mov rdi, rbx; call qword ptr [rbp + 0x48]; 
0x0000000000418330: mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000418b11: mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x000000000041c343: mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004178e1: mov rdi, rbx; call rax; 
0x0000000000457d9b: mov rdi, rbx; call rsi; 
0x0000000000426f60: mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000418e20: mov rdi, rbx; sub rdx, rsi; call qword ptr [rax + 0x70]; 
0x0000000000466f06: mov rdi, rdx; cmp rax, 9; ja 0x66ee0; mov rax, r8; ret; 
0x00000000004768fe: mov rdi, rsi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000457d8b: mov rdi, rsi; mov qword ptr [rbp - 0x70], rsi; call 0x55f00; mov rsi, qword ptr [rbp - 0x70]; mov rdi, rbx; call rsi; 
0x0000000000450a67: mov rdi, rsi; mov rsi, rdx; cmp r8d, 1; ja 0x50aa0; mov eax, 4; syscall; 
0x0000000000477e87: mov rdi, rsi; mov rsi, rdx; cmp r8d, 1; ja 0x77ec0; mov eax, 6; syscall; 
0x0000000000450a88: mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000450cc0: mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000464dd2: mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000464cfe: mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000490f6f: mov rdx, qword ptr [r10]; mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp + 0x10], r10; call rax; 
0x0000000000490402: mov rdx, qword ptr [r12]; mov r8, r13; mov rcx, r12; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000490307: mov rdx, qword ptr [r12]; mov r8, rbx; mov rcx, r12; or esi, 2; mov edi, 1; call rax; 
0x0000000000411ea0: mov rdx, qword ptr [r14 + 0x20]; mov rdi, r15; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000490875: mov rdx, qword ptr [r14]; mov r8, r12; mov rcx, r14; mov esi, 1; mov edi, 1; call rax; 
0x0000000000419517: mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000041baf8: mov rdx, qword ptr [rbp + 0x40]; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbp; call rax; 
0x000000000048779c: mov rdx, qword ptr [rbx + 0x10]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000418e1c: mov rdx, qword ptr [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax + 0x70]; 
0x0000000000454649: mov rdx, qword ptr [rcx + rdx]; lea rcx, [rip - 0x64]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000487724: mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000487783: mov rdx, qword ptr [rdi + 0x458]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000418413: mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000041e5ec: mov rdx, qword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x1e5e8; ret; 
0x00000000004742d4: mov rdx, qword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x742d0; ret; 
0x00000000004902b3: mov rdx, qword ptr [rdx]; mov qword ptr [rbx + 0x98], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000487cde: mov rdx, qword ptr [rip + 0x3b3f3]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000402649: mov rdx, qword ptr [rip + 0xc0688]; mov edi, dword ptr [rsp + 0xc]; mov rsi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000044a6b4: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000044a6d4: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000043af20: mov rdx, qword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043aeb0: mov rdx, qword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043ae40: mov rdx, qword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043add0: mov rdx, qword ptr [rsi + 4]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044abd3: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000044a563: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000043ad60: mov rdx, qword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044abf3: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000044a573: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000043acf0: mov rdx, qword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044ac13: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000044a583: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000043ac80: mov rdx, qword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043a730: mov rdx, qword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043a6b0: mov rdx, qword ptr [rsi - 0xb]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043a630: mov rdx, qword ptr [rsi - 0xc]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043a5a0: mov rdx, qword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043a510: mov rdx, qword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043a480: mov rdx, qword ptr [rsi - 0xf]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434cb4: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435608: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435808: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435a08: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434c98: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435624: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435824: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435a24: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434cd0: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043a7b0: mov rdx, qword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000044ab50: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x000000000043af90: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000484445: mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x00000000004843c3: mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x000000000045a095: mov rdx, qword ptr [rsp + 0x68]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x60]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000411df1: mov rdx, r10; mov rsi, r14; mov rdi, r15; mov dword ptr [rbp - 0x94c], r9d; mov dword ptr [rbp - 0x940], r11d; call rax; 
0x000000000048cdff: mov rdx, r13; add rax, qword ptr [rbx]; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000046f951: mov rdx, r13; call qword ptr [rax + 0x38]; 
0x000000000044fc58: mov rdx, r13; call rbx; 
0x000000000044f317: mov rdx, r13; mov r9, qword ptr [rsp + 0x10]; mov rdi, r12; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000412363: mov rdx, r13; mov rsi, r10; mov rdi, r15; call qword ptr [rbx + 0x38]; 
0x0000000000412a08: mov rdx, r13; mov rsi, r10; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000048cf9c: mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x000000000048ce40: mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x00000000004120ba: mov rdx, r13; mov rsi, r12; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000041c1a1: mov rdx, r13; mov rsi, r15; mov rdi, rbp; call qword ptr [rax + 0x40]; 
0x000000000044f1c3: mov rdx, r13; xor r8d, r8d; mov rdi, r12; lea r9, [rsp + 0x30]; call rbx; 
0x000000000040f528: mov rdx, r14; mov rax, qword ptr [rsp]; call rax; 
0x000000000040f618: mov rdx, r14; mov rax, qword ptr [rsp]; mov rsi, r12; mov rdi, r13; call rax; 
0x000000000040f494: mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000000413e12: mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000049242f: mov rdx, r15; mov rsi, qword ptr [r12 + r14*8 + 0x10]; mov rdi, r13; call rax; 
0x00000000004144be: mov rdx, r15; mov rsi, r11; mov rdi, r12; call qword ptr [rcx + 0x38]; 
0x00000000004156ae: mov rdx, r15; mov rsi, r11; mov rdi, r12; mov dword ptr [rbp - 0x508], r10d; mov qword ptr [rbp - 0x500], r11; call qword ptr [rax + 0x38]; 
0x000000000041c33d: mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004142df: mov rdx, r15; mov rsi, r8; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000041c79c: mov rdx, r8; mov rsi, r12; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x0000000000468c16: mov rdx, r8; mov rsi, r14; mov rdi, r12; mov qword ptr [rbp - 0xe8], r8; call rax; 
0x000000000046dcb9: mov rdx, r8; mov rsi, r14; mov rdi, r13; mov dword ptr [rbp - 0x970], r10d; mov byte ptr [rbp - 0x958], r9b; call rax; 
0x00000000004279e3: mov rdx, r8; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000490f98: mov rdx, r9; mov rdi, r15; lea rbx, [r12 + rcx*8]; mov rsi, qword ptr [rbx]; call rax; 
0x000000000046d15a: mov rdx, r9; mov rsi, r12; mov rdi, r13; call qword ptr [rcx + 0x38]; 
0x0000000000428272: mov rdx, rax; je 0x282a8; test rsi, rsi; je 0x28288; lea rax, [rax - 0x10]; ret; 
0x00000000004202d5: mov rdx, rax; mov rax, qword ptr [rax]; test rax, rax; jne 0x202d0; ret; 
0x0000000000492fb0: mov rdx, rbp; mov esi, 0x40; mov rdi, r13; call rbx; 
0x0000000000465d02: mov rdx, rbp; mov rdi, r12; call rbx; 
0x00000000004653fd: mov rdx, rbp; mov rsi, r12; call rbx; 
0x0000000000465420: mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x000000000046543b: mov rdx, rbp; mov rsi, r15; mov rdi, r12; call rbx; 
0x000000000045733d: mov rdx, rbp; push 0; mov r9, r14; mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; call rbx; 
0x000000000046fe4e: mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x000000000041274d: mov rdx, rbx; mov rsi, r12; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x0000000000470fb6: mov rdx, rbx; mov rsi, r9; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000477eef: mov rdx, rcx; cmp r9d, 1; ja 0x77f28; mov eax, 0x106; syscall; 
0x0000000000415459: mov rdx, rcx; mov rsi, r11; mov rdi, r12; mov dword ptr [rbp - 0x4f0], r9d; call qword ptr [rax + 0x38]; 
0x0000000000414f1c: mov rdx, rcx; mov rsi, r11; mov rdi, r12; mov dword ptr [rbp - 0x4f8], r9d; call qword ptr [rbx + 0x38]; 
0x0000000000470633: mov rdx, rcx; mov rsi, r9; mov rdi, r12; mov qword ptr [rbp - 0x4d8], r11; call qword ptr [rbx + 0x38]; 
0x000000000047129f: mov rdx, rcx; mov rsi, r9; mov rdi, r12; mov qword ptr [rbp - 0x500], r11; mov qword ptr [rbp - 0x4f8], r9; call qword ptr [rax + 0x38]; 
0x0000000000466e7f: mov rdx, rdi; mov rdi, rax; cmp rdx, rcx; jae 0x66e6c; mov rax, r8; ret; 
0x000000000044e374: mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000477fb0: mov rdx, rsp; mov eax, 0x10; syscall; 
0x0000000000451658: mov rdx, rsp; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000492432: mov rsi, qword ptr [r12 + r14*8 + 0x10]; mov rdi, r13; call rax; 
0x000000000040f520: mov rsi, qword ptr [r13]; mov rdi, qword ptr [r12]; mov rdx, r14; mov rax, qword ptr [rsp]; call rax; 
0x0000000000411e9c: mov rsi, qword ptr [r14 + 0x18]; mov rdx, qword ptr [r14 + 0x20]; mov rdi, r15; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000451cd5: mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 8]; mov rdi, r13; call rax; 
0x000000000040fe54: mov rsi, qword ptr [rax + 0x20]; mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000452178: mov rsi, qword ptr [rax]; mov rdi, r14; mov rax, qword ptr [rbp - 0x58]; mov r15d, r13d; call rax; 
0x0000000000457d97: mov rsi, qword ptr [rbp - 0x70]; mov rdi, rbx; call rsi; 
0x0000000000418e18: mov rsi, qword ptr [rbx + 0x10]; mov rdx, qword ptr [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax + 0x70]; 
0x0000000000490fa2: mov rsi, qword ptr [rbx]; call rax; 
0x000000000048b9b0: mov rsi, qword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x8d7a0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000048b8ec: mov rsi, qword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x8dad0; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000044d6c7: mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000043df4a: mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000450d2c: mov rsi, qword ptr [rsp + 0x10]; mov r8d, eax; mov edi, dword ptr [rsp + 8]; mov eax, 1; syscall; 
0x0000000000450c8c: mov rsi, qword ptr [rsp + 0x10]; mov r8d, eax; mov edi, dword ptr [rsp + 8]; xor eax, eax; syscall; 
0x0000000000402654: mov rsi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000041eedd: mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000465cfd: mov rsi, qword ptr [rsp + 0x10]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x0000000000426948: mov rsi, qword ptr [rsp + 0x18]; add rsp, 0x18; jmp rax; 
0x000000000044f322: mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000044fc50: mov rsi, qword ptr [rsp + 0x18]; mov rcx, r12; mov rdx, r13; call rbx; 
0x0000000000426430: mov rsi, qword ptr [rsp + 0x18]; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000457345: mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; call rbx; 
0x0000000000427d80: mov rsi, qword ptr [rsp + 0x28]; mov rdi, r12; call rax; 
0x0000000000426b60: mov rsi, qword ptr [rsp + 0x38]; mov rdi, r14; call rax; 
0x000000000045d984: mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000045cf44: mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000045c303: mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; call rbx; 
0x000000000045ab67: mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; call rbx; 
0x000000000045b76f: mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000459a9e: mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045a8f1: mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x000000000045ed02: mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; call rbx; 
0x0000000000460015: mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045e918: mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000045a4b2: mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x60]; call rbx; 
0x000000000045a09a: mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x60]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000412366: mov rsi, r10; mov rdi, r15; call qword ptr [rbx + 0x38]; 
0x0000000000412a0b: mov rsi, r10; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x00000000004144c1: mov rsi, r11; mov rdi, r12; call qword ptr [rcx + 0x38]; 
0x000000000041545c: mov rsi, r11; mov rdi, r12; mov dword ptr [rbp - 0x4f0], r9d; call qword ptr [rax + 0x38]; 
0x0000000000414f1f: mov rsi, r11; mov rdi, r12; mov dword ptr [rbp - 0x4f8], r9d; call qword ptr [rbx + 0x38]; 
0x00000000004156b1: mov rsi, r11; mov rdi, r12; mov dword ptr [rbp - 0x508], r10d; mov qword ptr [rbp - 0x500], r11; call qword ptr [rax + 0x38]; 
0x0000000000428a00: mov rsi, r12; call rax; 
0x0000000000465400: mov rsi, r12; call rbx; 
0x000000000048cf9f: mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x000000000048ce43: mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x000000000048ce05: mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000477720: mov rsi, r12; mov edi, ebp; mov eax, 0xe4; syscall; 
0x000000000046d15d: mov rsi, r12; mov rdi, r13; call qword ptr [rcx + 0x38]; 
0x000000000040f61f: mov rsi, r12; mov rdi, r13; call rax; 
0x0000000000465423: mov rsi, r12; mov rdi, r13; call rbx; 
0x00000000004120bd: mov rsi, r12; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000041c79f: mov rsi, r12; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x00000000004276f1: mov rsi, r12; pop r12; pop r13; jmp rax; 
0x000000000040f497: mov rsi, r13; mov rdi, r12; call rax; 
0x0000000000413e09: mov rsi, r13; mov rdi, r12; sub r15, r13; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000041872a: mov rsi, r13; mov rdi, r15; call qword ptr [rbp + 0x38]; 
0x00000000004266f0: mov rsi, r13; mov rdi, rbp; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000000468c19: mov rsi, r14; mov rdi, r12; mov qword ptr [rbp - 0xe8], r8; call rax; 
0x000000000046dcbc: mov rsi, r14; mov rdi, r13; mov dword ptr [rbp - 0x970], r10d; mov byte ptr [rbp - 0x958], r9b; call rax; 
0x0000000000411df4: mov rsi, r14; mov rdi, r15; mov dword ptr [rbp - 0x94c], r9d; mov dword ptr [rbp - 0x940], r11d; call rax; 
0x000000000041c340: mov rsi, r14; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000046543e: mov rsi, r15; mov rdi, r12; call rbx; 
0x000000000041c1a4: mov rsi, r15; mov rdi, rbp; call qword ptr [rax + 0x40]; 
0x0000000000465181: mov rsi, r8; mov eax, 0xe; syscall; 
0x00000000004142e2: mov rsi, r8; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000004143ae: mov rsi, r8; mov rdi, r12; sub r15, r8; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000046fe41: mov rsi, r8; mov rdi, r12; sub rbx, r8; sar rbx, 2; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x00000000004516dd: mov rsi, r9; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000040f39c: mov rsi, r9; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000470fb9: mov rsi, r9; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000470636: mov rsi, r9; mov rdi, r12; mov qword ptr [rbp - 0x4d8], r11; call qword ptr [rbx + 0x38]; 
0x00000000004712a2: mov rsi, r9; mov rdi, r12; mov qword ptr [rbp - 0x500], r11; mov qword ptr [rbp - 0x4f8], r9; call qword ptr [rax + 0x38]; 
0x0000000000490f69: mov rsi, r9; mov rdi, r15; mov rdx, qword ptr [r10]; mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp + 0x10], r10; call rax; 
0x0000000000450b6c: mov rsi, rbp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000450be2: mov rsi, rbp; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000040f68d: mov rsi, rbp; mov rax, qword ptr [rsp]; mov r13, r15; add r15, r12; call rax; 
0x000000000048245e: mov rsi, rbp; syscall; 
0x000000000041ad5d: mov rsi, rbx; mov edi, 2; mov eax, r9d; syscall; 
0x00000000004279e0: mov rsi, rbx; mov rdx, r8; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000490e58: mov rsi, rdi; test rax, rax; je 0x90e70; mov edi, 1; jmp rax; 
0x0000000000450a6a: mov rsi, rdx; cmp r8d, 1; ja 0x50aa0; mov eax, 4; syscall; 
0x0000000000450ac9: mov rsi, rdx; cmp r8d, 1; ja 0x50b00; mov eax, 5; syscall; 
0x0000000000477e8a: mov rsi, rdx; cmp r8d, 1; ja 0x77ec0; mov eax, 6; syscall; 
0x0000000000477eec: mov rsi, rdx; mov rdx, rcx; cmp r9d, 1; ja 0x77f28; mov eax, 0x106; syscall; 
0x00000000004850bb: mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000000490a34: mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000043df6f: mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000422e8a: mov ss, word ptr [rbp + rdi*8 + 0x3145ffff]; sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov rdi, rbp; mov eax, 0xca; syscall; 
0x00000000004191e9: mov ss, word ptr [rdx + 0x45fffffb]; xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000418b66: mov ss, word ptr [rsi + rdi*8 + 0x3145ffff]; sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000043df79: mov word ptr [r9 - 2], cx; ret; 
0x000000000046bd73: mov word ptr [rax - 7], ds; jmp qword ptr [rsi + 0xf]; 
0x000000000041fab4: mov word ptr [rbp + 0x31], es; sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa3162]; syscall; 
0x000000000044ac5c: mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000044a5bc: mov word ptr [rdi + 0x10], cx; ret; 
0x000000000044ad64: mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000044a6a4: mov word ptr [rdi + 0x18], cx; ret; 
0x000000000043b1c7: mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000044ab28: mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x000000000044a4f8: mov word ptr [rdi + 4], dx; ret; 
0x000000000044ab7a: mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000044a53a: mov word ptr [rdi + 8], dx; ret; 
0x000000000044e45e: mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], cx; ret; 
0x000000000044e5e3: mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], cx; vzeroupper; ret; 
0x000000000044d6e8: mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x000000000043526c: mov word ptr [rdi - 2], cx; ret; 
0x0000000000435084: mov word ptr [rdi - 2], dx; ret; 
0x0000000000435268: mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000044b133: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000446f13: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000044aaf3: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000044a4c3: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000044d3f6: mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000043b1cb: mov word ptr [rdi], cx; ret; 
0x000000000044e5e8: mov word ptr [rdi], cx; vzeroupper; ret; 
0x000000000044aae3: mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000044b123: mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x000000000043b233: mov word ptr [rdi], dx; ret; 
0x0000000000446f03: mov word ptr [rdi], dx; vzeroupper; ret; 
0x000000000043df76: mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000044d6ed: mov word ptr [rdi], si; ret; 
0x000000000044a038: mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x0000000000448878: mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000449fe3: mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x0000000000449ff3: mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x0000000000448843: mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x0000000000448833: mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x0000000000428c1a: mov word ptr [rdx], es; add byte ptr [rdx], bh; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000046a2d6: mov word ptr [rip + 0x445b0100], es; mov eax, eax; pop rbp; pop r12; ret; 
0x000000000044d3f9: mov word ptr [rsi - 2], cx; ret; 
0x000000000044d6e7: mov word ptr ss:[rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x0000000000474957: movabs al, byte ptr [0x30788348000000]; je 0x74968; ret; 
0x000000000041f673: movabs al, byte ptr [0x48ffffffff000000]; mov dword ptr [rdi + 0xa8], 0; ret; 
0x000000000044dbcb: movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000046b614: movabs al, byte ptr [0x8304768b41000000]; ret; 
0x000000000046b640: movabs al, byte ptr [0x8324348b41000000]; ret; 
0x000000000046cbf3: movabs al, byte ptr [0x852c8d4c000000]; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x0000000000418416: movabs al, byte ptr [0xe08a8948000000]; add byte ptr [rax], al; ret; 
0x000000000042fe6c: movabs al, byte ptr [0xf10eb834900000c]; xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004665fa: movabs byte ptr [0x1bad23145fffedf], al; add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, 0xca; lea rdi, [rip + 0x5c909]; syscall; 
0x0000000000456e83: movabs byte ptr [0x488d48e68948fffa], al; sbb cl, byte ptr [rax - 0x77]; ret 0x8948; 
0x000000000043016a: movabs byte ptr [0xf10eb8349000009], al; xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000048b7e9: movabs dword ptr [0x5810438948ffffce], eax; pop rdx; pop rbx; ret; 
0x00000000004738c2: movabs dword ptr [0xc483480000441f0f], eax; or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x000000000048b8c3: movabs r12, 0x48c0950fc085ffff; add esp, 8; movzx eax, al; neg eax; ret; 
0x00000000004329b8: movabs rbp, 0xf66d1ef0f66bdb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000432ab8: movabs rsp, 0xf66d1ef0f66bcb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000040f350: movaps xmmword ptr [rsp + 0xd0], xmm0; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040f358: movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040f360: movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000045984f: movd mm1, esi; movd xmm3, eax; punpckldq xmm1, xmm3; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x0000000000459853: movd mm3, eax; punpckldq xmm1, xmm3; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x000000000045984e: movd xmm1, esi; movd xmm3, eax; punpckldq xmm1, xmm3; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x0000000000459852: movd xmm3, eax; punpckldq xmm1, xmm3; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x000000000044ac50: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000044a5b0: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000044ac90: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000044a5f0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000044a5e0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000044ac70: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000044a5d0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000044ad10: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000044a670: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000044a650: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000044acd0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000044a610: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000044acf0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000044a630: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000044a750: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000044adb0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000044a6f0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000044add0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000044a710: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000044a730: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000044ac30: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000044ac40: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000044a5a0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000044a590: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000044a754: movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000044adb4: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000044a6f4: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000044add4: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000044a714: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000044a734: movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043ac11: movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000044e3c6: movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000044ae1d: movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000044a75d: movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000043b281: movdqu xmmword ptr [rdi + 0x11], xmm0; lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b211: movdqu xmmword ptr [rdi + 0x12], xmm0; lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b1a1: movdqu xmmword ptr [rdi + 0x13], xmm0; lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b131: movdqu xmmword ptr [rdi + 0x14], xmm0; lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b0c1: movdqu xmmword ptr [rdi + 0x15], xmm0; lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b051: movdqu xmmword ptr [rdi + 0x16], xmm0; lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043afe1: movdqu xmmword ptr [rdi + 0x17], xmm0; lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043af71: movdqu xmmword ptr [rdi + 0x18], xmm0; lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043af01: movdqu xmmword ptr [rdi + 0x19], xmm0; lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043ae91: movdqu xmmword ptr [rdi + 0x1a], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043ae21: movdqu xmmword ptr [rdi + 0x1b], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043adb1: movdqu xmmword ptr [rdi + 0x1c], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043ad41: movdqu xmmword ptr [rdi + 0x1d], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043acd1: movdqu xmmword ptr [rdi + 0x1e], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043ac61: movdqu xmmword ptr [rdi + 0x1f], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043ac07: movdqu xmmword ptr [rdi + 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000043ae9f: movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043ae2f: movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043adbf: movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043ad4f: movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044adbd: movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000044a6fd: movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000043acdf: movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044addd: movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000044a71d: movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000043ac6f: movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044adfd: movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000044a73d: movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043b28f: movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b21f: movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b1af: movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b13f: movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b0cf: movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b05f: movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043afef: movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043af7f: movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043af0f: movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044e3cb: movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000044e33c: movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000044e3d1: movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000043a3fb: movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000043a46b: movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043aba6: movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043ab26: movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043aa96: movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043aa16: movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a996: movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a916: movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a896: movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a816: movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a796: movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a716: movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a696: movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a616: movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a586: movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a4f6: movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a466: movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a3f1: movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000043ab97: movdqu xmmword ptr [rdi - 0x21], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043ab17: movdqu xmmword ptr [rdi - 0x22], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043aa87: movdqu xmmword ptr [rdi - 0x23], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043aa07: movdqu xmmword ptr [rdi - 0x24], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a987: movdqu xmmword ptr [rdi - 0x25], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a907: movdqu xmmword ptr [rdi - 0x26], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a887: movdqu xmmword ptr [rdi - 0x27], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a807: movdqu xmmword ptr [rdi - 0x28], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a707: movdqu xmmword ptr [rdi - 0x2a], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a687: movdqu xmmword ptr [rdi - 0x2b], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a607: movdqu xmmword ptr [rdi - 0x2c], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a577: movdqu xmmword ptr [rdi - 0x2d], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a4e7: movdqu xmmword ptr [rdi - 0x2e], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a457: movdqu xmmword ptr [rdi - 0x2f], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a3e7: movdqu xmmword ptr [rdi - 0x30], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000044ac34: movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000044ac44: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000044a5a4: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000044ac97: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000044acb7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000044a5f7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000044a5e7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000044ac77: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000044a5d7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000044ad18: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000044ad38: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000044a678: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000044a658: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000044ad7b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000044a6bb: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000044ad9b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000044a6db: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000044ad5c: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000044a69c: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000044acd8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000044a618: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000044acf8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000044a638: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000044ac58: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000044a5b8: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000044e3c2: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000044ae19: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000044a759: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000044adb9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000044a6f9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000044add9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000044a719: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000044adf9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000044a739: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043ac1a: movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000043ac74: movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000048715f: movhps xmm0, qword ptr [rsp - 0x18]; movups xmmword ptr [rdi], xmm0; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000420318: movntps xmmword ptr [rax + 0x18], xmm2; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000044ac51: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000044a5b1: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000044ac91: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000044a5f1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000044a5e1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000044ac71: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000044a5d1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000044ad11: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000044a671: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000044a651: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000044acd1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000044a611: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000044acf1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000044a631: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000044a751: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000044adb1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000044a6f1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000044add1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000044a711: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000044a731: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000044ac31: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000044ac41: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000044a5a1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000044a591: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000044a755: movq mm2, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000044adb5: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000044a6f5: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000044add5: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000044a715: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000044a735: movq mm2, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043ac12: movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000044e3c7: movq qword ptr [rdi + 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000044ae1e: movq qword ptr [rdi + 0x10], mm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000044a75e: movq qword ptr [rdi + 0x10], mm2; ret; 
0x000000000043b282: movq qword ptr [rdi + 0x11], mm0; lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b212: movq qword ptr [rdi + 0x12], mm0; lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b1a2: movq qword ptr [rdi + 0x13], mm0; lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b132: movq qword ptr [rdi + 0x14], mm0; lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b0c2: movq qword ptr [rdi + 0x15], mm0; lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b052: movq qword ptr [rdi + 0x16], mm0; lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043afe2: movq qword ptr [rdi + 0x17], mm0; lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043af72: movq qword ptr [rdi + 0x18], mm0; lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043af02: movq qword ptr [rdi + 0x19], mm0; lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043ae92: movq qword ptr [rdi + 0x1a], mm0; lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043ae22: movq qword ptr [rdi + 0x1b], mm0; lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043adb2: movq qword ptr [rdi + 0x1c], mm0; lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043ad42: movq qword ptr [rdi + 0x1d], mm0; lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043acd2: movq qword ptr [rdi + 0x1e], mm0; lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043ac62: movq qword ptr [rdi + 0x1f], mm0; lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043ac08: movq qword ptr [rdi + 0x20], mm0; lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000043aea0: movq qword ptr [rdi + 0xa], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043ae30: movq qword ptr [rdi + 0xb], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043adc0: movq qword ptr [rdi + 0xc], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043ad50: movq qword ptr [rdi + 0xd], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044adbe: movq qword ptr [rdi + 0xd], mm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000044a6fe: movq qword ptr [rdi + 0xd], mm2; ret; 
0x000000000043ace0: movq qword ptr [rdi + 0xe], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044adde: movq qword ptr [rdi + 0xe], mm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000044a71e: movq qword ptr [rdi + 0xe], mm2; ret; 
0x000000000043ac70: movq qword ptr [rdi + 0xf], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044adfe: movq qword ptr [rdi + 0xf], mm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000044a73e: movq qword ptr [rdi + 0xf], mm2; ret; 
0x000000000043b290: movq qword ptr [rdi + 1], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b220: movq qword ptr [rdi + 2], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b1b0: movq qword ptr [rdi + 3], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b140: movq qword ptr [rdi + 4], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b0d0: movq qword ptr [rdi + 5], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043b060: movq qword ptr [rdi + 6], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043aff0: movq qword ptr [rdi + 7], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043af80: movq qword ptr [rdi + 8], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043af10: movq qword ptr [rdi + 9], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044e3cc: movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000044e33d: movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000044e3d2: movq qword ptr [rdi + rdx - 0x20], mm0; ret; 
0x000000000043a3fc: movq qword ptr [rdi - 0x10], mm0; ret; 
0x000000000043a46c: movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000043aba7: movq qword ptr [rdi - 0x11], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043ab27: movq qword ptr [rdi - 0x12], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043aa97: movq qword ptr [rdi - 0x13], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043aa17: movq qword ptr [rdi - 0x14], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a997: movq qword ptr [rdi - 0x15], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a917: movq qword ptr [rdi - 0x16], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a897: movq qword ptr [rdi - 0x17], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a817: movq qword ptr [rdi - 0x18], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a797: movq qword ptr [rdi - 0x19], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a717: movq qword ptr [rdi - 0x1a], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a697: movq qword ptr [rdi - 0x1b], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a617: movq qword ptr [rdi - 0x1c], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a587: movq qword ptr [rdi - 0x1d], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a4f7: movq qword ptr [rdi - 0x1e], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a467: movq qword ptr [rdi - 0x1f], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a3f2: movq qword ptr [rdi - 0x20], mm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000043ab98: movq qword ptr [rdi - 0x21], mm0; lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043ab18: movq qword ptr [rdi - 0x22], mm0; lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043aa88: movq qword ptr [rdi - 0x23], mm0; lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043aa08: movq qword ptr [rdi - 0x24], mm0; lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a988: movq qword ptr [rdi - 0x25], mm0; lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a908: movq qword ptr [rdi - 0x26], mm0; lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a888: movq qword ptr [rdi - 0x27], mm0; lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a808: movq qword ptr [rdi - 0x28], mm0; lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a708: movq qword ptr [rdi - 0x2a], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a688: movq qword ptr [rdi - 0x2b], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a608: movq qword ptr [rdi - 0x2c], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a578: movq qword ptr [rdi - 0x2d], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a4e8: movq qword ptr [rdi - 0x2e], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a458: movq qword ptr [rdi - 0x2f], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043a3e8: movq qword ptr [rdi - 0x30], mm0; lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000044ac35: movq qword ptr [rdi], mm0; lea rax, [rdi + 0xf]; ret; 
0x000000000044ac45: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000044a5a5: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000044ac98: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000044acb8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000044a5f8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000044a5e8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000044ac78: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000044a5d8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000044ad19: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000044ad39: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000044a679: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000044a659: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000044ad7c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000044a6bc: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000044ad9c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000044a6dc: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000044ad5d: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000044a69d: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000044acd9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000044a619: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000044acf9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000044a639: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000044ac59: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000044a5b9: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000044e3c3: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000044ae1a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000044a75a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000044adba: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000044a6fa: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000044adda: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000044a71a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000044adfa: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000044a73a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043ac1b: movq qword ptr [rdi], mm0; ret; 
0x000000000043ac75: movq qword ptr [rdi], mm1; ret; 
0x000000000048769d: movsb byte ptr [rdi], byte ptr [rsi]; add eax, dword ptr [rax]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x00000000004262a5: movsb byte ptr [rdi], byte ptr [rsi]; or dword ptr [rax], eax; lea rax, [rip - 0xc6f]; mov qword ptr [rip + 0x9a4ca], rax; ret; 
0x00000000004262b3: movsb byte ptr [rdi], byte ptr [rsi]; or dword ptr [rax], eax; ret; 
0x00000000004107d8: movsb byte ptr [rdi], byte ptr [rsi]; or edi, edi; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000044d63e: movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000044d630: movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000466d59: movsb byte ptr [rdi], byte ptr [rsi]; stc; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000004529f7: movsd dword ptr [rdi], dword ptr [rsi]; add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; jge 0x529ff; call rbx; 
0x000000000046e1d5: movsd dword ptr [rdi], dword ptr [rsi]; clc; idiv bh; dec dword ptr [rbp + 0x63]; ret; 
0x000000000046e899: movsd dword ptr [rdi], dword ptr [rsi]; clc; idiv bh; jmp qword ptr [rsi - 0x70]; 
0x0000000000458b4f: movsd dword ptr [rdi], dword ptr [rsi]; cli; jmp qword ptr [rsi + 0x66]; 
0x0000000000485832: movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x0000000000458b4e: movsd dword ptr [rdi], dword ptr cs:[rsi]; cli; jmp qword ptr [rsi + 0x66]; 
0x000000000048e21c: movss xmm0, dword ptr [rip + 0x227b4]; divss xmm0, dword ptr [rip + 0x227b0]; ret; 
0x0000000000483980: movsx eax, dl; neg eax; ret; 
0x000000000046a24e: movsx ecx, byte ptr [rsi]; cmp edi, ecx; ja 0x6a238; mov eax, r8d; ret; 
0x000000000044d22e: movsxd rax, ecx; ret; 
0x000000000044a48c: movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000044d262: movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000464d1b: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000004807ea: movsxd rdx, ebx; mov edi, dword ptr [rbp - 0x460]; lea rsi, [rbp - 0x430]; mov eax, 0x14; syscall; 
0x0000000000418727: movsxd rdx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp + 0x38]; 
0x000000000048e21d: movups xmm0, xmmword ptr [rip + 0x227b4]; divss xmm0, dword ptr [rip + 0x227b0]; ret; 
0x000000000044d5bb: movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000044d5be: movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000044d75c: movups xmm3, xmmword ptr [rsi + rdx - 0x20]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000044d803: movups xmmword ptr [r11], xmm4; ret; 
0x000000000044d88a: movups xmmword ptr [r11], xmm8; ret; 
0x00000000004749ba: movups xmmword ptr [rax + 0x30], xmm0; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000475179: movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x0000000000474362: movups xmmword ptr [rax], xmm0; ret; 
0x0000000000421068: movups xmmword ptr [rbp + 0x28], xmm1; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000041f3be: movups xmmword ptr [rbp + 0x38], xmm0; pop rbp; pop r12; ret; 
0x000000000041b252: movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x000000000041b256: movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x000000000041ebae: movups xmmword ptr [rbx + 0x38], xmm0; mov dword ptr [rbx], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000041ec55: movups xmmword ptr [rbx + 0x38], xmm0; pop rbx; pop rbp; pop r12; ret; 
0x000000000041e744: movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x000000000041b24e: movups xmmword ptr [rbx + 8], xmm0; movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x000000000041b695: movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x000000000048392d: movups xmmword ptr [rbx], xmm0; pop rbx; ret; 
0x000000000044d88b: movups xmmword ptr [rbx], xmm0; ret; 
0x000000000044d804: movups xmmword ptr [rbx], xmm4; ret; 
0x000000000041f653: movups xmmword ptr [rcx + 0x10], xmm0; movups xmmword ptr [rcx + 0x20], xmm0; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000041f657: movups xmmword ptr [rcx + 0x20], xmm0; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000041f65b: movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000041f65f: movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000044d7f6: movups xmmword ptr [rcx - 0x10], xmm6; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000044d7fa: movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000044d7ff: movups xmmword ptr [rcx - 0x30], xmm0; movups xmmword ptr [r11], xmm4; ret; 
0x000000000044d7fe: movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000044d7f3: movups xmmword ptr [rcx], xmm5; movups xmmword ptr [rcx - 0x10], xmm6; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000044d764: movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000044d87e: movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x000000000044d882: movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x000000000044d886: movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x000000000041f5a4: movups xmmword ptr [rdi + 0x58], xmm0; test rax, rax; je 0x1f5bc; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x000000000041f46e: movups xmmword ptr [rdi + 0xa0], xmm0; ret; 
0x000000000041e65b: movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000044d5c6: movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000044d768: movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000044d73b: movups xmmword ptr [rdi + rdx - 0x10], xmm4; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x000000000044d76d: movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000044d740: movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x000000000044d745: movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x000000000044d74a: movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000487164: movups xmmword ptr [rdi], xmm0; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000044d761: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000044d5c3: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000044d87b: movups xmmword ptr [rdi], xmm4; movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x000000000045985e: movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x00000000004573ba: movzx eax, al; add eax, 1; push rax; call rbx; 
0x0000000000477f75: movzx eax, al; add rsp, 0x58; ret; 
0x000000000048b8d0: movzx eax, al; neg eax; ret; 
0x000000000048758d: movzx eax, al; pop rbx; pop rbp; pop r12; ret; 
0x00000000004314e4: movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000042ca82: movzx eax, byte ptr [rax + rcx + 0x40]; movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000042c99c: movzx eax, byte ptr [rax + rcx + 0x60]; movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000042b40d: movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042c937: movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000042c960: movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000042c980: movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000430d97: movzx eax, byte ptr [rax + rdi]; movzx edx, byte ptr [rdx + rdi]; sub eax, edx; vzeroupper; ret; 
0x000000000041f7bf: movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049149c: movzx eax, byte ptr [rax]; add rsp, 0x18; pop rbx; pop rbp; mov eax, r8d; ret; 
0x000000000041e960: movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000420793: movzx eax, byte ptr [rax]; ret; 
0x00000000004141b4: movzx eax, byte ptr [rbx + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000431b94: movzx eax, byte ptr [rdi + rcx + 0x20]; movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000431bb4: movzx eax, byte ptr [rdi + rcx + 0x40]; movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000431b7a: movzx eax, byte ptr [rdi + rcx + 0x60]; movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000042fcf4: movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000431904: movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000042c7d4: movzx eax, byte ptr [rdi + rdx + 0x20]; movzx edx, byte ptr [rsi + rdx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000042c7f4: movzx eax, byte ptr [rdi + rdx + 0x40]; movzx edx, byte ptr [rsi + rdx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000042c814: movzx eax, byte ptr [rdi + rdx + 0x60]; movzx edx, byte ptr [rsi + rdx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000445af8: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x55ebd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000444478: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x5753d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004428c8: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x590ed]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000440768: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x5b24d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042b2a3: movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000042c7ba: movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x000000000042b238: movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000044c720: movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000044c780: movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000044c770: movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000044c760: movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000044c750: movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000044c740: movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000044c730: movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000044cada: movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x4cc55; xor eax, eax; ret; 
0x0000000000432aa0: movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x0000000000432853: movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000044c707: movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000445b13: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x55ea3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000444493: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x57523]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004428e3: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x590d3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000440783: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x5b233]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000431980: movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000004314c1: movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x000000000042b253: movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000430f63: movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x000000000041e8c0: movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044ee96: movzx eax, byte ptr [rsi + rdx]; mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x4ee88; ret; 
0x0000000000494a10: movzx eax, byte ptr [rsp + 0xf]; add rsp, 0x10; pop rbx; ret; 
0x000000000044e8b0: movzx eax, cl; pop rbx; ret; 
0x000000000044e371: movzx eax, dh; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000004598d5: movzx eax, dh; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000044e860: movzx eax, dl; and dh, 0xf0; mov edx, 0; pop rbx; cmove rax, rdx; ret; 
0x000000000044e370: movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000004598d4: movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000041504a: movzx ecx, byte ptr [rbx + rax]; lea rax, [rip + 0xa81cb]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000041459a: movzx ecx, byte ptr [rbx + rax]; lea rax, [rip + 0xa8e7b]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000044cd5a: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x4cd50; ret; 
0x000000000044ce0a: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x4ce00; ret; 
0x000000000044d0ca: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x4d0c0; sub rax, 1; ret; 
0x000000000042b234: movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042b4f6: movzx ecx, byte ptr [rsi + rdx]; test al, al; jne 0x2b4e0; xor eax, eax; sub eax, ecx; ret; 
0x000000000042cab7: movzx ecx, byte ptr [rsi + rdx]; test eax, eax; jne 0x2caa0; sub eax, ecx; vzeroupper; ret; 
0x0000000000430f3c: movzx ecx, byte ptr [rsi + rdx]; test eax, eax; jne 0x30f20; sub eax, ecx; vzeroupper; ret; 
0x0000000000432aa4: movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000044d6bc: movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000042b250: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000430f60: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x0000000000431983: movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000044d6e0: movzx ecx, word ptr [rsi + rdx - 2]; movzx esi, word ptr [rsi]; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x000000000044b130: movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000446f10: movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x00000000004282f0: movzx edx, byte ptr [rcx + rax]; cmp dl, r8b; jne 0x282e0; sub rax, 0x10; ret; 
0x000000000040f2b8: movzx edx, byte ptr [rcx]; test dl, dl; jne 0xf298; ret; 
0x000000000042ca87: movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000042c9a1: movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000042b411: movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042c93b: movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000042c965: movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000042c985: movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000430d9b: movzx edx, byte ptr [rdx + rdi]; sub eax, edx; vzeroupper; ret; 
0x000000000044cf7a: movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x4cf70; lea rax, [rcx - 1]; ret; 
0x0000000000431b99: movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000431bb9: movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000431b7f: movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x00000000004446af: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x57306]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000442b6f: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x58e46]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042fcf8: movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000431908: movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000042c7d9: movzx edx, byte ptr [rsi + rdx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000042c7f9: movzx edx, byte ptr [rsi + rdx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000042c819: movzx edx, byte ptr [rsi + rdx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000042b2a7: movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000042c7be: movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x0000000000430b23: movzx edx, byte ptr [rsi + rdx]; test r8d, r8d; je 0x30b2d; xchg edx, eax; sub eax, edx; ret; 
0x000000000044c724: movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000044c784: movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000044c774: movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000044c764: movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000044c754: movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000044c744: movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000044c734: movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000043abc0: movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000432857: movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000044c70b: movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x000000000043b2a0: movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x00000000004314c4: movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x000000000044e8f0: movzx edx, cl; mov eax, 0; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x00000000004314ea: movzx edx, dl; sub eax, edx; ret; 
0x000000000043ab40: movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000044b120: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x000000000043b230: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000446f00: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x000000000041ed65: movzx esi, byte ptr [r14]; lea r15, [r14 + 1]; mov rdi, r12; call qword ptr [rbx + 0x18]; 
0x000000000041ed66: movzx esi, byte ptr [rsi]; lea r15, [r14 + 1]; mov rdi, r12; call qword ptr [rbx + 0x18]; 
0x000000000044d6e5: movzx esi, word ptr [rsi]; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x0000000000430f0a: movzx r8d, byte ptr [r8 + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000049149b: movzx r8d, byte ptr [rax]; add rsp, 0x18; pop rbx; pop rbp; mov eax, r8d; ret; 
0x000000000044ee95: movzx r8d, byte ptr [rsi + rdx]; mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x4ee88; ret; 
0x00000000004765f7: mul byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000046c734: mul dword ptr [rdi + 5]; add byte ptr [rcx], al; mov eax, r8d; pop rbx; ret; 
0x00000000004509eb: neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000450a8f: neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000450cc7: neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000481175: neg eax; test cl, cl; cmove r8, rax; mov rax, r8; ret; 
0x0000000000483983: neg eax; ret; 
0x0000000000481174: neg rax; test cl, cl; cmove r8, rax; mov rax, r8; ret; 
0x0000000000477478: nop dword ptr [rax + rax]; add rax, 3; ret; 
0x0000000000426938: nop dword ptr [rax + rax]; add rsp, 0x18; ret; 
0x00000000004738c3: nop dword ptr [rax + rax]; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000457503: nop dword ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000431278: nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000048711b: nop dword ptr [rax + rax]; bts rax, 0x30; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x0000000000422ae3: nop dword ptr [rax + rax]; call rax; 
0x0000000000491143: nop dword ptr [rax + rax]; cmp al, 0x50; jne 0x91173; xor eax, eax; add rsp, 8; ret; 
0x00000000004911a3: nop dword ptr [rax + rax]; cmp al, 0x50; jne 0x911d3; xor eax, eax; add rsp, 8; ret; 
0x000000000044b4a8: nop dword ptr [rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x000000000044b4b8: nop dword ptr [rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x000000000044b4c8: nop dword ptr [rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x000000000044b4d8: nop dword ptr [rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x000000000044b4e8: nop dword ptr [rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x000000000044b438: nop dword ptr [rax + rax]; lea rax, [rdi + 2]; ret; 
0x000000000044b448: nop dword ptr [rax + rax]; lea rax, [rdi + 3]; ret; 
0x000000000044b458: nop dword ptr [rax + rax]; lea rax, [rdi + 4]; ret; 
0x000000000044b468: nop dword ptr [rax + rax]; lea rax, [rdi + 5]; ret; 
0x000000000044b478: nop dword ptr [rax + rax]; lea rax, [rdi + 6]; ret; 
0x000000000044b488: nop dword ptr [rax + rax]; lea rax, [rdi + 8]; ret; 
0x000000000044b498: nop dword ptr [rax + rax]; lea rax, [rdi + 9]; ret; 
0x00000000004515c3: nop dword ptr [rax + rax]; lea rdx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000044aac8: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000044a498: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000044aaeb: nop dword ptr [rax + rax]; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000419bfb: nop dword ptr [rax + rax]; mov eax, 0xffffffff; pop rbp; ret; 
0x000000000041a9b8: nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000045048b: nop dword ptr [rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x000000000044a4cb: nop dword ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000454713: nop dword ptr [rax + rax]; mov qword ptr [rax + 0x20], rsi; ret; 
0x00000000004546a8: nop dword ptr [rax + rax]; mov qword ptr [rdi + 0x20], rsi; ret; 
0x0000000000490548: nop dword ptr [rax + rax]; mov qword ptr [rdi + rsi*8], rdx; add rsp, 8; ret; 
0x000000000048e2a3: nop dword ptr [rax + rax]; mov r8, qword ptr [r8]; mov qword ptr [r9], r8; add rsp, 8; ret; 
0x0000000000450a9b: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004780a3: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000004774a8: nop dword ptr [rax + rax]; mov rax, 2; ret; 
0x00000000004774b8: nop dword ptr [rax + rax]; mov rax, 3; ret; 
0x00000000004774c8: nop dword ptr [rax + rax]; mov rax, 4; ret; 
0x00000000004774d8: nop dword ptr [rax + rax]; mov rax, 5; ret; 
0x00000000004774e8: nop dword ptr [rax + rax]; mov rax, 6; ret; 
0x00000000004774f8: nop dword ptr [rax + rax]; mov rax, 7; ret; 
0x000000000040fe33: nop dword ptr [rax + rax]; mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000048e3f3: nop dword ptr [rax + rax]; mov rax, qword ptr [rsi + 0xb0]; add rsp, 8; ret; 
0x000000000045039b: nop dword ptr [rax + rax]; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000446b58: nop dword ptr [rax + rax]; mov rax, r8; vzeroupper; ret; 
0x000000000044ab5b: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000044a52b: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000450a83: nop dword ptr [rax + rax]; mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000450cbb: nop dword ptr [rax + rax]; mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000044a50b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000048ce3b: nop dword ptr [rax + rax]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x0000000000492fab: nop dword ptr [rax + rax]; mov rdx, rbp; mov esi, 0x40; mov rdi, r13; call rbx; 
0x0000000000452173: nop dword ptr [rax + rax]; mov rsi, qword ptr [rax]; mov rdi, r14; mov rax, qword ptr [rbp - 0x58]; mov r15d, r13d; call rax; 
0x0000000000427d78: nop dword ptr [rax + rax]; mov rsi, qword ptr [rsp + 0x28]; mov rdi, r12; call rax; 
0x00000000004289f8: nop dword ptr [rax + rax]; mov rsi, r12; call rax; 
0x000000000041e95b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044c77b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000044c76b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000044c75b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000044c74b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000044c73b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000044c72b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000043197b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000446f0b: nop dword ptr [rax + rax]; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000464f04: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x000000000044d0f5: nop dword ptr [rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000041b69b: nop dword ptr [rax + rax]; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000004874fb: nop dword ptr [rax + rax]; pop rbp; ret; 
0x000000000041f3db: nop dword ptr [rax + rax]; pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x0000000000420323: nop dword ptr [rax + rax]; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000041f843: nop dword ptr [rax + rax]; sub rax, rcx; sub eax, 1; ret; 
0x00000000004752a3: nop dword ptr [rax + rax]; sub rcx, rax; sar rcx, 2; lea eax, [rcx - 1]; ret; 
0x0000000000459643: nop dword ptr [rax + rax]; sub rsp, 8; call 0x59030; or dword ptr [rip + 0x69784], 2; add rsp, 8; ret; 
0x000000000043139b: nop dword ptr [rax + rax]; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000044e823: nop dword ptr [rax + rax]; xor eax, eax; pop rbx; ret; 
0x000000000041a54b: nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000430f4b: nop dword ptr [rax + rax]; xor eax, eax; vzeroupper; ret; 
0x0000000000402688: nop dword ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000044b258: nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x0000000000455e8b: nop dword ptr [rax + rax]; endbr64; lea rax, [rip + 0x6b385]; ret; 
0x00000000004509c8: nop dword ptr [rax + rax]; endbr64; mov eax, 0x18; syscall; 
0x0000000000454258: nop dword ptr [rax + rax]; endbr64; mov eax, 0x63; syscall; 
0x000000000041ec88: nop dword ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x0000000000451528: nop dword ptr [rax + rax]; endbr64; mov eax, 3; syscall; 
0x000000000045422b: nop dword ptr [rax + rax]; endbr64; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000000464d2b: nop dword ptr [rax + rax]; endbr64; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x00000000004205fb: nop dword ptr [rax + rax]; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x0000000000420658: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000004214fb: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi]; cmp rax, 0x2000000; jbe 0x21510; ret; 
0x000000000042113b: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x9f5d1], rax; ret; 
0x0000000000461c78: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0x61165]; ret; 
0x0000000000458198: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0x6b6fd]; ret; 
0x0000000000420638: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0x9fad5]; ret; 
0x000000000041f688: nop dword ptr [rax + rax]; endbr64; xor eax, eax; ret; 
0x000000000042062b: nop dword ptr [rax + rax]; endbr64; ret; 
0x000000000044b427: nop dword ptr [rax + rax]; nop; lea rax, [rdi + 1]; ret; 
0x000000000044b417: nop dword ptr [rax + rax]; nop; lea rax, [rdi]; ret; 
0x0000000000477497: nop dword ptr [rax + rax]; nop; mov rax, 1; ret; 
0x0000000000401d53: nop dword ptr [rax + rax]; ret; 
0x0000000000465434: nop dword ptr [rax]; add r15, r14; mov rdx, rbp; mov rsi, r15; mov rdi, r12; call rbx; 
0x000000000047746c: nop dword ptr [rax]; add rax, 1; ret; 
0x000000000048cf95: nop dword ptr [rax]; add rbx, 8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x0000000000474675: nop dword ptr [rax]; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000480fbc: nop dword ptr [rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000048acd4: nop dword ptr [rax]; add rsp, 8; ret; 
0x00000000004331fc: nop dword ptr [rax]; and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret; 
0x0000000000431269: nop dword ptr [rax]; bsf eax, eax; add rax, rdi; ret; 
0x0000000000431289: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000043125d: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x00000000004761ac: nop dword ptr [rax]; bsf eax, eax; sub rdx, rax; jbe 0x761e0; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000476f5c: nop dword ptr [rax]; bsf eax, eax; sub rdx, rax; jbe 0x76f90; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000040ff45: nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000487fe4: nop dword ptr [rax]; call rax; 
0x000000000048e3a5: nop dword ptr [rax]; cmp al, 0x40; jne 0x8e3e0; mov rax, qword ptr [rsi + 0xb8]; add rsp, 8; ret; 
0x00000000004782f4: nop dword ptr [rax]; cmp byte ptr [r8 + 8], 0x2f; jne 0x782bf; leave; mov eax, 1; ret; 
0x0000000000481d21: nop dword ptr [rax]; cmp rax, r8; ja 0x81d38; add rsp, 8; ret; 
0x000000000048720c: nop dword ptr [rax]; lea rax, [rip + 0x3bdc9]; mov qword ptr [rip + 0x3bdaa], rax; ret; 
0x000000000044881d: nop dword ptr [rax]; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x000000000041b5d4: nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x0000000000474d8d: nop dword ptr [rax]; mov eax, dword ptr [rcx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044a00c: nop dword ptr [rax]; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x000000000047535c: nop dword ptr [rax]; mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000459631: nop dword ptr [rax]; mov eax, dword ptr [rip + 0x6979e]; test eax, eax; je 0x59648; ret; 
0x000000000044a4fd: nop dword ptr [rax]; mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000041ad54: nop dword ptr [rax]; mov edx, 1; mov rsi, rbx; mov edi, 2; mov eax, r9d; syscall; 
0x000000000043aa2c: nop dword ptr [rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043563c: nop dword ptr [rax]; mov edx, dword ptr [rsi - 5]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043583c: nop dword ptr [rax]; mov edx, dword ptr [rsi - 6]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435a3c: nop dword ptr [rax]; mov edx, dword ptr [rsi - 7]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000044b14d: nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; vzeroupper; ret; 
0x000000000043b149: nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000423bb5: nop dword ptr [rax]; mov qword ptr [rsp + 0x18], r10; mov qword ptr [rsp + 0x10], r8; call rax; 
0x0000000000464f0c: nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000465119: nop dword ptr [rax]; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004519f1: nop dword ptr [rax]; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000048772d: nop dword ptr [rax]; mov rax, qword ptr [rbx + 0x10]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x0000000000449f5d: nop dword ptr [rax]; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x00000000004487ad: nop dword ptr [rax]; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000040f5cd: nop dword ptr [rax]; mov rax, qword ptr [rsp]; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000044e91d: nop dword ptr [rax]; mov rax, rdx; pop rbx; ret; 
0x000000000044a54d: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000044a55d: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000451544: nop dword ptr [rax]; mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000450da4: nop dword ptr [rax]; mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000043a72c: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043a59c: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043a50c: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434ccc: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043a7ac: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043af89: nop dword ptr [rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000040f615: nop dword ptr [rax]; mov rdx, r14; mov rax, qword ptr [rsp]; mov rsi, r12; mov rdi, r13; call rax; 
0x0000000000451651: nop dword ptr [rax]; mov rdx, rsp; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000426945: nop dword ptr [rax]; mov rsi, qword ptr [rsp + 0x18]; add rsp, 0x18; jmp rax; 
0x0000000000426b5d: nop dword ptr [rax]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, r14; call rax; 
0x000000000047771d: nop dword ptr [rax]; mov rsi, r12; mov edi, ebp; mov eax, 0xe4; syscall; 
0x000000000041afd1: nop dword ptr [rax]; mov rsi, rbx; mov edi, 2; mov eax, r9d; syscall; 
0x000000000044a5ac: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000044a5cc: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000044a64c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000044a60d: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000044a62c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000044ac3d: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000044a599: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000044c71d: nop dword ptr [rax]; movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x0000000000431bfd: nop dword ptr [rax]; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000044e8a9: nop dword ptr [rax]; movzx eax, cl; pop rbx; ret; 
0x000000000042b24d: nop dword ptr [rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000043abbc: nop dword ptr [rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043b299: nop dword ptr [rax]; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000043ab3c: nop dword ptr [rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000043b229: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000446ef9: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x000000000041f534: nop dword ptr [rax]; or dword ptr [rax + 0x74], 0x80; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x1f538; ret; 
0x00000000004276ec: nop dword ptr [rax]; pop rbp; mov rsi, r12; pop r12; pop r13; jmp rax; 
0x000000000042740c: nop dword ptr [rax]; pop rbp; pop r12; pop r13; jmp rax; 
0x000000000041f6f5: nop dword ptr [rax]; pop rbp; ret; 
0x0000000000489589: nop dword ptr [rax]; pop rbx; pop rbp; pop r12; ret; 
0x00000000004910d5: nop dword ptr [rax]; test dil, dil; jne 0x91113; mov eax, 8; add rsp, 8; ret; 
0x000000000044632d: nop dword ptr [rax]; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000040f2c1: nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000047697d: nop dword ptr [rax]; xor eax, eax; vzeroupper; ret; 
0x000000000041b191: nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x000000000041ebc9: nop dword ptr [rax]; endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x1ebe0; ret; 
0x000000000048ba79: nop dword ptr [rax]; endbr64; mov eax, 0x26; syscall; 
0x0000000000487c4c: nop dword ptr [rax]; endbr64; mov eax, 0x27; syscall; 
0x0000000000487c4c: nop dword ptr [rax]; endbr64; mov eax, 0x27; syscall; ret; 
0x0000000000477e5c: nop dword ptr [rax]; endbr64; mov eax, 0x68; syscall; 
0x0000000000477e5c: nop dword ptr [rax]; endbr64; mov eax, 0x68; syscall; ret; 
0x0000000000477e4c: nop dword ptr [rax]; endbr64; mov eax, 0x6b; syscall; 
0x0000000000477e4c: nop dword ptr [rax]; endbr64; mov eax, 0x6b; syscall; ret; 
0x0000000000477e6c: nop dword ptr [rax]; endbr64; mov eax, 0x6c; syscall; 
0x0000000000477e6c: nop dword ptr [rax]; endbr64; mov eax, 0x6c; syscall; ret; 
0x0000000000478059: nop dword ptr [rax]; endbr64; mov eax, 0xc; syscall; 
0x00000000004205ec: nop dword ptr [rax]; endbr64; mov eax, 0xffffffff; ret; 
0x000000000045181c: nop dword ptr [rax]; endbr64; mov eax, 1; syscall; 
0x0000000000450d89: nop dword ptr [rax]; endbr64; mov eax, 8; syscall; 
0x00000000004202ec: nop dword ptr [rax]; endbr64; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000049264c: nop dword ptr [rax]; endbr64; mov eax, dword ptr [rdi]; test eax, eax; jne 0x92660; ret; 
0x0000000000455e9c: nop dword ptr [rax]; endbr64; mov eax, dword ptr [rip + 0x6d9e6]; test eax, eax; je 0x55eb0; ret; 
0x000000000049058c: nop dword ptr [rax]; endbr64; mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000487c5c: nop dword ptr [rax]; endbr64; mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000000484339: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x0000000000490559: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000049059c: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x00000000004905fc: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x00000000004905ed: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x00000000004905ac: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x00000000004581ac: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rip + 0x6b6fd]; ret; 
0x0000000000420669: nop dword ptr [rax]; endbr64; mov rax, rdi; ret; 
0x000000000044e35d: nop dword ptr [rax]; endbr64; test rdx, rdx; jne 0x4e36d; mov rax, rdi; ret; 
0x000000000044652c: nop dword ptr [rax]; endbr64; test rsi, rsi; jne 0x4653d; xor rax, rax; ret; 
0x000000000042060c: nop dword ptr [rax]; endbr64; xor eax, eax; ret; 
0x00000000004545ec: nop dword ptr [rax]; endbr64; ret; 
0x0000000000407224: nop dword ptr [rax]; ret; 
0x0000000000477477: nop dword ptr cs:[rax + rax]; add rax, 3; ret; 
0x000000000044b4a7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x000000000044b4b7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x000000000044b4c7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x000000000044b4d7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x000000000044b4e7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x000000000044b437: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x000000000044b447: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x000000000044b457: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x000000000044b467: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x000000000044b477: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x000000000044b487: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x000000000044b497: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x00000000004203d7: nop dword ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000490547: nop dword ptr cs:[rax + rax]; mov qword ptr [rdi + rsi*8], rdx; add rsp, 8; ret; 
0x0000000000464f03: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x000000000044d0f4: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000402687: nop dword ptr cs:[rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000477487: nop dword ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000458197: nop dword ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rip + 0x6b6fd]; ret; 
0x0000000000420637: nop dword ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rip + 0x9fad5]; ret; 
0x000000000044b426: nop dword ptr cs:[rax + rax]; nop; lea rax, [rdi + 1]; ret; 
0x000000000044b416: nop dword ptr cs:[rax + rax]; nop; lea rax, [rdi]; ret; 
0x0000000000477496: nop dword ptr cs:[rax + rax]; nop; mov rax, 1; ret; 
0x0000000000494417: nop dword ptr cs:[rax + rax]; ret; 
0x0000000000426937: nop word ptr [rax + rax]; add rsp, 0x18; ret; 
0x0000000000457502: nop word ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000431277: nop word ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000048711a: nop word ptr [rax + rax]; bts rax, 0x30; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x0000000000491142: nop word ptr [rax + rax]; cmp al, 0x50; jne 0x91173; xor eax, eax; add rsp, 8; ret; 
0x00000000004911a2: nop word ptr [rax + rax]; cmp al, 0x50; jne 0x911d3; xor eax, eax; add rsp, 8; ret; 
0x00000000004515c2: nop word ptr [rax + rax]; lea rdx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000044aac7: nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000044a497: nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000419bfa: nop word ptr [rax + rax]; mov eax, 0xffffffff; pop rbp; ret; 
0x000000000045048a: nop word ptr [rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x000000000044a4ca: nop word ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000004546a7: nop word ptr [rax + rax]; mov qword ptr [rdi + 0x20], rsi; ret; 
0x0000000000450a9a: nop word ptr [rax + rax]; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004780a2: nop word ptr [rax + rax]; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000040fe32: nop word ptr [rax + rax]; mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000446b57: nop word ptr [rax + rax]; mov rax, r8; vzeroupper; ret; 
0x000000000044a52a: nop word ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000450ae2: nop word ptr [rax + rax]; mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000048ce3a: nop word ptr [rax + rax]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x0000000000492faa: nop word ptr [rax + rax]; mov rdx, rbp; mov esi, 0x40; mov rdi, r13; call rbx; 
0x00000000004289f7: nop word ptr [rax + rax]; mov rsi, r12; call rax; 
0x000000000041e95a: nop word ptr [rax + rax]; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000446f0a: nop word ptr [rax + rax]; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x00000000004874fa: nop word ptr [rax + rax]; pop rbp; ret; 
0x000000000041f3da: nop word ptr [rax + rax]; pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x0000000000420322: nop word ptr [rax + rax]; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000041f842: nop word ptr [rax + rax]; sub rax, rcx; sub eax, 1; ret; 
0x00000000004752a2: nop word ptr [rax + rax]; sub rcx, rax; sar rcx, 2; lea eax, [rcx - 1]; ret; 
0x000000000041a54a: nop word ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000430f4a: nop word ptr [rax + rax]; xor eax, eax; vzeroupper; ret; 
0x0000000000455e8a: nop word ptr [rax + rax]; endbr64; lea rax, [rip + 0x6b385]; ret; 
0x000000000041ec87: nop word ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x00000000004205fa: nop word ptr [rax + rax]; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x0000000000420657: nop word ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000004214fa: nop word ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi]; cmp rax, 0x2000000; jbe 0x21510; ret; 
0x000000000041f687: nop word ptr [rax + rax]; endbr64; xor eax, eax; ret; 
0x000000000042062a: nop word ptr [rax + rax]; endbr64; ret; 
0x000000000045288a: nop word ptr [rax + rax]; ret; 
0x0000000000477476: nop word ptr cs:[rax + rax]; add rax, 3; ret; 
0x000000000044b4a6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x000000000044b4b6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x000000000044b4c6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x000000000044b4d6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x000000000044b4e6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x000000000044b436: nop word ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x000000000044b446: nop word ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x000000000044b456: nop word ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x000000000044b466: nop word ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x000000000044b476: nop word ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x000000000044b486: nop word ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x000000000044b496: nop word ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x00000000004203d6: nop word ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000490546: nop word ptr cs:[rax + rax]; mov qword ptr [rdi + rsi*8], rdx; add rsp, 8; ret; 
0x0000000000464f02: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x000000000044d0f3: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000402686: nop word ptr cs:[rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000477486: nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000458196: nop word ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rip + 0x6b6fd]; ret; 
0x0000000000420636: nop word ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rip + 0x9fad5]; ret; 
0x000000000044b425: nop word ptr cs:[rax + rax]; nop; lea rax, [rdi + 1]; ret; 
0x000000000044b415: nop word ptr cs:[rax + rax]; nop; lea rax, [rdi]; ret; 
0x0000000000477495: nop word ptr cs:[rax + rax]; nop; mov rax, 1; ret; 
0x0000000000494416: nop word ptr cs:[rax + rax]; ret; 
0x0000000000486da6: not bh; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000455e86: not cl; cli; jmp qword ptr [rsi + 0xf]; 
0x000000000044e820: notrack jmp rax; nop dword ptr [rax + rax]; xor eax, eax; pop rbx; ret; 
0x000000000044aac4: notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000044a494: notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000004624b2: or ah, byte ptr [rcx]; add al, byte ptr [rax]; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000044f426: or al, 0; add byte ptr [rax - 0x73], cl; adc eax, 0xa90; cmovne rax, rdx; ret; 
0x000000000042fe77: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000444e6f: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042fea5: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004017c9: or al, 0; add byte ptr [rax], al; add byte ptr [rax], al; pop rdx; ret; 
0x000000000042580d: or al, 0; add byte ptr [rax], al; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x00000000004780b2: or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000042435d: or al, 0; add byte ptr [rax], al; mov rax, r8; ret; 
0x0000000000478065: or al, 0; add byte ptr [rax], al; syscall; 
0x0000000000467666: or al, 0; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000402012: or al, 0; add rsp, 0x88; pop rbx; ret; 
0x000000000040264e: or al, 0; mov edi, dword ptr [rsp + 0xc]; mov rsi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004012d1: or al, 0; syscall; 
0x0000000000481d70: or al, 0x13; clc; jmp qword ptr [rsi + 0x66]; 
0x000000000044d69a: or al, 0x16; cmp rdi, r9; jb 0x4d808; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044da05: or al, 0x16; cmp rdi, r9; jb 0x4dbd5; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044de50: or al, 0x16; cmp rdi, r9; jb 0x4e090; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000042b236: or al, 0x16; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042b4f8: or al, 0x16; test al, al; jne 0x2b4e0; xor eax, eax; sub eax, ecx; ret; 
0x000000000042cab9: or al, 0x16; test eax, eax; jne 0x2caa0; sub eax, ecx; vzeroupper; ret; 
0x0000000000430f3e: or al, 0x16; test eax, eax; jne 0x30f20; sub eax, ecx; vzeroupper; ret; 
0x0000000000425596: or al, 0x18; add rsp, 0x10; mov rax, r8; pop rbx; ret; 
0x0000000000461570: or al, 0x1b; cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000041bb01: or al, 0x24; mov rdi, rbp; call rax; 
0x0000000000410b64: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10b74; add rsp, 0xd8; ret; 
0x0000000000410c22: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10c32; add rsp, 0xd8; ret; 
0x00000000004515b5: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x51603; add rsp, 0x68; ret; 
0x0000000000451644: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x51693; add rsp, 0x18; ret; 
0x00000000004516fc: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5174b; add rsp, 0x58; ret; 
0x000000000045179a: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x517eb; add rsp, 0x58; ret; 
0x00000000004651a2: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x65246; add rsp, 0x98; ret; 
0x00000000004670cf: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x670f5; add rsp, 0x38; ret; 
0x000000000046c882: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6c892; add rsp, 0xd8; ret; 
0x0000000000484613: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84643; add rsp, 0x38; ret; 
0x00000000004846df: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84714; add rsp, 0x58; ret; 
0x0000000000484851: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84894; add rsp, 0x68; ret; 
0x0000000000484b6f: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84ba4; add rsp, 0x58; ret; 
0x0000000000487816: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x87823; add rsp, 0x28; ret; 
0x000000000048b87f: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8b88c; add rsp, 0x38; ret; 
0x000000000042578d: or al, 0x28; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x000000000042827b: or al, 0x48; lea eax, [rax - 0x10]; ret; 
0x0000000000454349: or al, 0x48; lea ecx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x54360; ret; 
0x000000000041e7b4: or al, 0x48; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000487cdd: or al, 0x48; mov edx, dword ptr [rip + 0x3b3f3]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000402653: or al, 0x48; mov esi, dword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000481c93: or al, 0x49; lea eax, [rax + 1]; mov qword ptr [rip + 0x41671], rax; ret; 
0x00000000004515e8: or al, 0x75; ret 0xd8f7; 
0x00000000004163fa: or al, 0x7e; ret; 
0x000000000041197e: or al, 0x83; ret; 
0x000000000046d5df: or al, 0x84; ror byte ptr [rdi], cl; mov dl, dl; sbb al, 0; add dh, dh; ret 0xf40; 
0x000000000048d451: or al, 0x85; sal byte ptr [rsp + 0x48], 1; ret 0xb70f; 
0x0000000000468fea: or al, 0x89; fdiv st(6); ret; 
0x0000000000464ecb: or al, 0x89; jae 0x64f0f; xor eax, eax; pop rbx; ret; 
0x000000000044e8db: or al, 0x89; ret 0xe283; 
0x0000000000440774: or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043df5d: or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000454367: or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000045434c: or al, 0x8e; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x54360; ret; 
0x000000000044a48e: or al, 0x93; lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000044aac2: or al, 0xb; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000044a492: or al, 0xb; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000402175: or al, 0xc; add byte ptr [rax], al; adc byte ptr [rax], al; add dh, dh; ret 0x7402; 
0x000000000040212b: or al, 0xc; add byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rbx + 0xc0c0415], cl; add dh, dh; ret 0x7408; 
0x0000000000402135: or al, 0xc; add dh, dh; ret 0x7408; 
0x000000000046dbf7: or al, 0xe9; ret; 
0x000000000046bd6b: or al, 0xf; test byte ptr [rdi - 0x1600000f], ah; mov word ptr [rax - 7], ds; jmp qword ptr [rsi + 0xf]; 
0x000000000043adc3: or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x000000000046aa93: or al, 0xf6; ret 0xf01; 
0x00000000004730b3: or al, 0xf6; ret 0xf04; 
0x000000000046d5b4: or al, 0xf6; ret 0xf08; 
0x0000000000467947: or al, 0xf6; ret; 
0x0000000000490534: or al, 0xf7; cmp al, 8; jne 0x174b; mov qword ptr [rcx], rdx; add rsp, 8; ret; 
0x0000000000450526: or al, 0xfb; dec dword ptr [rax - 0x77]; ret; 
0x000000000041504c: or al, 3; lea rax, [rip + 0xa81cb]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000041459c: or al, 3; lea rax, [rip + 0xa8e7b]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000041e2c5: or al, byte ptr [r8]; syscall; 
0x0000000000453264: or al, byte ptr [rax + rax]; add byte ptr [rcx + rcx*4 + 0x44], cl; and al, 8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000412cd9: or al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0x1a]; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x0000000000430057: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004439f1: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000430085: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000420754: or al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004903e6: or al, byte ptr [rax]; add byte ptr [rax], al; mov edi, 1; call rax; 
0x0000000000451aa5: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000451aa5: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x51ab4; ret; 
0x0000000000452f2c: or al, byte ptr [rax]; add byte ptr [rcx + rcx*4 + 0x44], cl; and al, 8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004206b4: or al, byte ptr [rax]; add dword ptr [rip + 0xa2577], 1; pop rbx; ret; 
0x000000000042248e: or al, byte ptr [rax]; lea rax, [rip + 0x3429]; mov qword ptr [rip + 0x9e2ea], rax; lea rax, [rip + 0x319b]; mov qword ptr [rip + 0x9e2d4], rax; ret; 
0x000000000041b2ca: or al, byte ptr [rax]; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x00000000004206ad: or al, byte ptr [rax]; mov qword ptr [rip + 0xa2582], rbx; add dword ptr [rip + 0xa2577], 1; pop rbx; ret; 
0x00000000004145a3: or al, byte ptr [rax]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000042155c: or al, byte ptr [rax]; ret; 
0x0000000000418248: or al, byte ptr [rax]; syscall; 
0x000000000041df72: or al, byte ptr [rax]; syscall; ret; 
0x0000000000402180: or al, byte ptr [rcx + 0xc0bf50d]; add byte ptr [rax], al; and byte ptr [rax], al; add dh, dh; ret 0x7440; 
0x0000000000402171: or al, byte ptr [rcx + 0xc0c040d]; add byte ptr [rax], al; adc byte ptr [rax], al; add dh, dh; ret 0x7402; 
0x0000000000402127: or al, byte ptr [rcx + 0xc0c4e0d]; add byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rbx + 0xc0c0415], cl; add dh, dh; ret 0x7408; 
0x0000000000454c27: or al, byte ptr [rcx + rcx*8 + 0x1f0f1574]; add byte ptr [rax - 0x7d], cl; ret 0x8801; 
0x000000000041fe0d: or al, byte ptr cs:[rax]; syscall; 
0x0000000000483388: or al, ch; and cl, byte ptr [rbx]; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000424a7b: or al, ch; call rax; 
0x0000000000490a74: or al, ch; idiv dil; jmp qword ptr [rsi + 0xf]; 
0x0000000000450d4e: or al, ch; mov esp, 0x48000247; mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000450cab: or al, ch; pop rdi; add al, byte ptr [rax]; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000048a0e8: or al, ch; ret 0xf9c7; 
0x0000000000428148: or al, ch; test al, 0xff; dec dword ptr [rbx + 0x9082454]; ret 0x37e9; 
0x0000000000473be7: or al, ch; ret; 
0x000000000041fe9a: or bh, al; add al, 1; add byte ptr [rax], al; add cl, ch; retf 0xfffd; jmp qword ptr [rsi + 0xf]; 
0x0000000000482582: or bh, al; jmp qword ptr [rsi + 0x2e]; 
0x000000000047e221: or bh, bh; adc eax, 0x42f18; xor eax, eax; add rsp, 8; ret; 
0x00000000004108fd: or bh, bh; dec dword ptr [rcx - 0x77]; ret; 
0x0000000000402410: or bh, bh; push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000401d3f: or bh, byte ptr [rdi + 0x4b1030]; call 0x92880; mov byte ptr [rip + 0xc04cf], 1; pop rbp; ret; 
0x0000000000452825: or bl, byte ptr [rbp + 0x41]; pop rsp; pop r13; ret; 
0x00000000004857f0: or bl, ch; shld r8, r9, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000049116b: or bl, ch; iretd; nop; xor eax, eax; ret; 
0x000000000043af83: or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x000000000049116a: or bl, r13b; iretd; nop; xor eax, eax; ret; 
0x0000000000462488: or byte ptr [r11 + 0x1974fdf8], al; pop rbx; ret; 
0x000000000041b250: or byte ptr [r15], cl; adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x000000000041ea96: or byte ptr [r15], r9b; mov dh, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041e82e: or byte ptr [r8 + 0x39], r9b; ret 0x870f; 
0x000000000042078c: or byte ptr [r8 + 0x39], r9b; sal byte ptr [rbx + 0x25], 1; movzx eax, byte ptr [rax]; ret; 
0x0000000000487127: or byte ptr [r8 + 2], r15b; ret; 
0x000000000048719b: or byte ptr [r8 - 0x3ffe], r15b; sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000448808: or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000004823b1: or byte ptr [r8 - 0x77], cl; ret 0x8548; 
0x000000000045202c: or byte ptr [r8 - 0x77], cl; ret 0xe083; 
0x00000000004786f2: or byte ptr [r8 - 0x7b], cl; sal byte ptr [rdi + riz + 0x48], 0x89; ret; 
0x000000000048235d: or byte ptr [r8 - 0x7b], cl; sal byte ptr [rsp + rdi + 0x48], 0x89; ret; 
0x0000000000419ff3: or byte ptr [r9 + 0x800ce], r8b; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x7589; 
0x0000000000452621: or byte ptr [r9 - 0x75], cl; add dword ptr [rbx + 0x94901e0], eax; ret; 
0x00000000004488c7: or byte ptr [r9 - 0x76b7f7be], cl; clc; ret; 
0x0000000000452613: or byte ptr [r9 - 0x77], cl; adc byte ptr [r11 + 0x94801e0], al; ror byte ptr [rcx - 0x77], 1; or byte ptr [r9 - 0x75], cl; add dword ptr [rbx + 0x94901e0], eax; ret; 
0x0000000000419666: or byte ptr [rax + 0x2b], cl; adc dword ptr [rax - 0x3f], ecx; cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x000000000041e82f: or byte ptr [rax + 0x39], cl; ret 0x870f; 
0x000000000047d674: or byte ptr [rax + 0x39], cl; ret 0xd74; 
0x000000000042078d: or byte ptr [rax + 0x39], cl; sal byte ptr [rbx + 0x25], 1; movzx eax, byte ptr [rax]; ret; 
0x00000000004243de: or byte ptr [rax + 0x39], cl; ret; 
0x0000000000402ce8: or byte ptr [rax + 0x9e], bh; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000402ce7: or byte ptr [rax + 0x9e], r15b; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000490f17: or byte ptr [rax + 1], bh; cmp qword ptr [rsi + 8], rcx; ja 0x90f25; sbb eax, eax; ret; 
0x00000000004738a9: or byte ptr [rax + 1], bh; pop rbx; pop rbp; ret; 
0x0000000000450d37: or byte ptr [rax + 1], bh; syscall; 
0x0000000000487efe: or byte ptr [rax + 1], cl; ret; 
0x0000000000490f16: or byte ptr [rax + 1], dil; cmp qword ptr [rsi + 8], rcx; ja 0x90f25; sbb eax, eax; ret; 
0x0000000000487128: or byte ptr [rax + 2], bh; ret; 
0x000000000048d065: or byte ptr [rax + 3], cl; add byte ptr [r13 + 0x31], r8b; jmp qword ptr [rsi - 0x7d]; 
0x0000000000485b84: or byte ptr [rax + 3], cl; add dword ptr [rdi], ecx; xchg edx, eax; ret 0x8948; 
0x0000000000421169: or byte ptr [rax + rax], al; add byte ptr [rsi + 1], dh; ret; 
0x0000000000484347: or byte ptr [rax + rcx*2 + 0x2b], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000484346: or byte ptr [rax + rcx*2 + 0x2b], spl; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000048b0ee: or byte ptr [rax - 0x39], cl; ret 0xffff; 
0x0000000000401007: or byte ptr [rax - 0x39], cl; rol byte ptr [rax], 0; add byte ptr [rax], al; test rax, rax; je 0x1016; call rax; 
0x000000000048719c: or byte ptr [rax - 0x3ffe], bh; sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000429d30: or byte ptr [rax - 0x73], cl; add eax, 0x9508; lea rdx, [rip + 0xea91]; cmovne rax, rdx; ret; 
0x0000000000429bc0: or byte ptr [rax - 0x73], cl; add eax, 0x9658; lea rdx, [rip + 0xebe1]; cmovne rax, rdx; ret; 
0x0000000000429a60: or byte ptr [rax - 0x73], cl; add eax, 0xc1b8; lea rdx, [rip + 0x11851]; cmovne rax, rdx; ret; 
0x000000000044f421: or byte ptr [rax - 0x73], cl; add eax, 0xcb7; lea rdx, [rip + 0xa90]; cmovne rax, rdx; ret; 
0x000000000048650c: or byte ptr [rax - 0x73], cl; push rdi; add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x0000000000486bb4: or byte ptr [rax - 0x73], cl; push rsi; add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x00000000004776df: or byte ptr [rax - 0x75], cl; add eax, 0x483b1; test rax, rax; je 0x77720; call rax; 
0x000000000048ac7c: or byte ptr [rax - 0x75], cl; xchg ebp, eax; push rax; add al, 0; add bl, ch; ret; 
0x000000000041b043: or byte ptr [rax - 0x75], cl; xor ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000428d3f: or byte ptr [rax - 0x77], cl; add edi, dword ptr [rax + 1]; pop rbx; pop rbp; pop r12; ret; 
0x000000000045ed70: or byte ptr [rax - 0x77], cl; fimul dword ptr [rax - 0x75]; add byte ptr [rax + 0x29], cl; ret 0x8348; 
0x0000000000448809: or byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000004527cd: or byte ptr [rax - 0x77], cl; out dx, eax; mov rax, r12; pop rbp; pop r12; jmp rax; 
0x000000000041e87a: or byte ptr [rax - 0x77], cl; out dx, eax; pop rbx; pop rbp; jmp rax; 
0x000000000042468e: or byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000004823b2: or byte ptr [rax - 0x77], cl; ret 0x8548; 
0x000000000045202d: or byte ptr [rax - 0x77], cl; ret 0xe083; 
0x000000000044880d: or byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000422b14: or byte ptr [rax - 0x77], cl; ret; 
0x0000000000422b13: or byte ptr [rax - 0x77], r9b; ret; 
0x0000000000452772: or byte ptr [rax - 0x7b], cl; div byte ptr [rbp + 8]; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000041eb8d: or byte ptr [rax - 0x7b], cl; push qword ptr [rsp + rax - 0x58]; add dword ptr [rcx + rbp - 0x77], esi; ret 0xff3; 
0x00000000004786f3: or byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + riz + 0x48], 0x89; ret; 
0x000000000048235e: or byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rdi + 0x48], 0x89; ret; 
0x0000000000423e46: or byte ptr [rax - 0x7d], cl; ret 0x4110; 
0x0000000000489947: or byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000040485a: or byte ptr [rax - 0x7d], cl; ret; 
0x000000000041a077: or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x00000000004108fc: or byte ptr [rax], 0xff; dec dword ptr [rcx - 0x77]; ret; 
0x0000000000430327: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000443b91: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000430265: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000046b212: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004632b4: or byte ptr [rax], al; add byte ptr [rax], al; add cl, ch; retf 0xfffd; jmp qword ptr [rsi - 0x70]; 
0x00000000004910de: or byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000464fdb: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xd; syscall; 
0x000000000046517d: or byte ptr [rax], al; add byte ptr [rax], al; mov rsi, r8; mov eax, 0xe; syscall; 
0x000000000044e949: or byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000450d95: or byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000450d95: or byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x50da8; ret; 
0x00000000004246fe: or byte ptr [rax], al; add byte ptr [rbp + 0x3e850ff6], al; add al, byte ptr [rax]; add byte ptr [rbp - 0x7cfdb9], cl; add dh, byte ptr [rsp - 0x77]; ret 0xb48b; 
0x0000000000452ef5: or byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x44], cl; and al, 8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000041225a: or byte ptr [rax], al; add byte ptr [rcx - 0x7d], al; in al, dx; add dword ptr [rax - 0x8ff43], eax; jmp qword ptr [rax]; 
0x0000000000432930: or byte ptr [rax], al; add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000419ff8: or byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x7589; 
0x0000000000410106: or byte ptr [rax], al; call 0x3080; xor r8d, r8d; mov rax, r8; ret; 
0x00000000004100ff: or byte ptr [rax], al; lea rdi, [rip + 0x85745]; call 0x3080; xor r8d, r8d; mov rax, r8; ret; 
0x000000000044525e: or byte ptr [rax], r8b; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000452f62: or byte ptr [rax], r8b; add byte ptr [rcx + rcx*4 + 0x44], cl; and al, 8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000410117: or byte ptr [rbp + 0x31], al; ror byte ptr [rcx + rcx*4 - 0x40], 0x5b; pop rbp; ret; 
0x0000000000489583: or byte ptr [rbp + 0x41], bl; pop rsp; jmp rax; 
0x000000000045277b: or byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x000000000048abe3: or byte ptr [rbp + 0x440f4cf6], al; ret 0x8d48; 
0x0000000000429d51: or byte ptr [rbp - 0x11], dh; test byte ptr [rip + 0x98fda], 2; lea rdx, [rip + 0x2404e]; lea rax, [rip + 0x24097]; cmove rax, rdx; ret; 
0x0000000000429d34: or byte ptr [rbp - 0x72b80000], dl; adc eax, 0xea91; cmovne rax, rdx; ret; 
0x0000000000462489: or byte ptr [rbx + 0x1974fdf8], al; pop rbx; ret; 
0x0000000000462467: or byte ptr [rbx + 0x37403fe], al; ret; 
0x000000000041c55e: or byte ptr [rbx + 0x48], bl; sub eax, edx; pop rbp; pop r12; ret; 
0x0000000000428c77: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000041bf24: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000487937: or byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000403339: or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000418170: or byte ptr [rbx - 0x76fefbb9], al; ret 0xe281; 
0x00000000004880e5: or byte ptr [rbx - 0x7af0f802], al; ret 1; 
0x000000000047dd1c: or byte ptr [rbx], al; add byte ptr [rax], al; lea rax, [rax + rdx*4]; mov dword ptr [rdi + 0x2fc], ecx; mov qword ptr [rdi + 0x310], rax; ret; 
0x0000000000475558: or byte ptr [rbx], al; add byte ptr [rax], al; mov esi, 0x80; syscall; 
0x000000000047dd5f: or byte ptr [rbx], al; add byte ptr [rax], al; ret; 
0x0000000000486f3b: or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x00000000004554f3: or byte ptr [rcx + 0x3e895], cl; add dh, dh; ret 0x7402; 
0x0000000000419ff4: or byte ptr [rcx + 0x800ce], al; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x7589; 
0x000000000048b78b: or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000486181: or byte ptr [rcx + 1], cl; ret 0x8d48; 
0x000000000042261b: or byte ptr [rcx + 1], cl; ror dword ptr [rax + 0xf], 1; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x0000000000485f50: or byte ptr [rcx + rax - 0x3e], cl; mov rax, rdx; pop rbx; ret; 
0x0000000000490f76: or byte ptr [rcx + rcx*4 + 0x54], cl; and al, 0x10; call rax; 
0x000000000040d404: or byte ptr [rcx + rcx*4 + 0xc], cl; and al, 0xe8; ret 0xff9d; 
0x000000000040dd03: or byte ptr [rcx + rcx*4 + 0xc], cl; and al, 0xe8; ret; 
0x000000000048e29e: or byte ptr [rcx + rcx*4 + 1], cl; ret; 
0x000000000040e804: or byte ptr [rcx + rcx*4 + 4], cl; and al, 0xe8; ret 0xff89; 
0x0000000000451cdc: or byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x000000000048cdfe: or byte ptr [rcx + rcx*4 - 0x16], cl; add rax, qword ptr [rbx]; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000048cf9b: or byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x00000000004520c2: or byte ptr [rcx + rcx*4 - 0x18], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004825b4: or byte ptr [rcx + rcx*4 - 0x20], al; pop rbp; pop r12; ret; 
0x0000000000467163: or byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop r12; ret; 
0x000000000048d705: or byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004518e0: or byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop r12; ret; 
0x00000000004185f0: or byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000481eb4: or byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x0000000000490f97: or byte ptr [rcx + rcx*4 - 0x36], cl; mov rdi, r15; lea rbx, [r12 + rcx*8]; mov rsi, qword ptr [rbx]; call rax; 
0x00000000004188b7: or byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000418376: or byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; ret; 
0x0000000000427c87: or byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000419522: or byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x000000000049242e: or byte ptr [rcx + rcx*4 - 6], cl; mov rsi, qword ptr [r12 + r14*8 + 0x10]; mov rdi, r13; call rax; 
0x0000000000486f42: or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x0000000000452622: or byte ptr [rcx - 0x75], cl; add dword ptr [rbx + 0x94901e0], eax; ret; 
0x000000000041995b: or byte ptr [rcx - 0x75], cl; sub byte ptr [r13 - 0x7b], r8b; sal byte ptr [rbx + rbp*2 + 0x49], 0x2b; and byte ptr [r8 + 1], r9b; ret; 
0x00000000004488c8: or byte ptr [rcx - 0x76b7f7be], cl; clc; ret; 
0x0000000000487089: or byte ptr [rcx - 0x77], 0; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000047a5d2: or byte ptr [rcx - 0x77], al; xchg esp, eax; and al, 0xe8; add eax, dword ptr [rax]; add dh, dh; ret 0x7402; 
0x0000000000452614: or byte ptr [rcx - 0x77], cl; adc byte ptr [r11 + 0x94801e0], al; ror byte ptr [rcx - 0x77], 1; or byte ptr [r9 - 0x75], cl; add dword ptr [rbx + 0x94901e0], eax; ret; 
0x000000000047a5df: or byte ptr [rcx - 0x77], cl; test byte ptr [rax + rax*8], ah; add byte ptr [rax], al; add dh, dh; ret 0x7404; 
0x000000000048cb68: or byte ptr [rcx - 0x7d], cl; ret 0x4808; 
0x000000000048cbbb: or byte ptr [rcx - 0x7d], cl; ret 0x4d08; 
0x0000000000451d4c: or byte ptr [rcx - 0xa], al; ret; 
0x0000000000428151: or byte ptr [rcx], cl; ret 0x37e9; 
0x0000000000428981: or byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x00000000004551aa: or byte ptr [rcx], dh; rol byte ptr [rax - 0x6af0ffc8], cl; ret 0x8348; 
0x0000000000455978: or byte ptr [rcx], dh; rol byte ptr [rax - 0x6af0ffc8], cl; ret 0x8d48; 
0x0000000000455957: or byte ptr [rcx], dh; rol byte ptr [rax - 0x6bf0ffc8], cl; ret 0x8d48; 
0x000000000047e230: or byte ptr [rdi + 0x31d], 4; xor eax, eax; ret; 
0x000000000047e2e0: or byte ptr [rdi + 0x31d], 4; ret; 
0x0000000000490f20: or byte ptr [rdi + 2], dh; sbb eax, eax; ret; 
0x0000000000490f1f: or byte ptr [rdi + 2], r14b; sbb eax, eax; ret; 
0x00000000004053bc: or byte ptr [rdi + rcx - 0x7b], dl; ret; 
0x00000000004782fb: or byte ptr [rdi], ch; jne 0x782bf; leave; mov eax, 1; ret; 
0x000000000041b251: or byte ptr [rdi], cl; adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x000000000041eb3f: or byte ptr [rdi], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000477f74: or byte ptr [rdi], cl; mov dh, 0xc0; add rsp, 0x58; ret; 
0x000000000048b8cf: or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000041ea97: or byte ptr [rdi], cl; mov dh, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048d18d: or byte ptr [rdi], cl; test byte ptr [rax + rax + 0x438b0000], al; adc byte ptr [rbp + 0x2d840fc0], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x00000000004904d5: or byte ptr [rdi], cl; test dword ptr [rdx + 0x12], ebp; idiv edi; mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x0000000000490537: or byte ptr [rdi], cl; test dword ptr [rip + 0x48fff712], ecx; mov dword ptr [rcx], edx; add rsp, 8; ret; 
0x0000000000402675: or byte ptr [rdi], cl; xchg esp, eax; ret 0xd284; 
0x000000000044d3d5: or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000043df47: or byte ptr [rdx + 0xf], dh; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000040ff25: or byte ptr [rdx], ah; add byte ptr [rax - 0x39], r9b; rcl byte ptr [rax], 0x22; add byte ptr [rax + 0x39], r9b; ret; 
0x0000000000468bf5: or byte ptr [rdx], ah; add byte ptr [rax - 0x77], r9b; fimul dword ptr [rax + 0x29]; ret 0x2948; 
0x000000000041b93b: or byte ptr [rdx], ah; add byte ptr [rax - 0x77], r9b; ret 0x294c; 
0x000000000041c694: or byte ptr [rdx], ah; add byte ptr [rax - 0x77], r9b; ret 0x294d; 
0x000000000047f0bd: or byte ptr [rip - 0x7cb7208c], ah; ret; 
0x00000000004515cc: or byte ptr [rsi + 0x10], bh; mov eax, 0x48; syscall; 
0x000000000046541b: or byte ptr [rsi - 0x73], cl; cmp al, 0x30; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x00000000004668bd: or ch, cl; lea edx, [rbx + 0x1f0ffffa]; add byte ptr [rax], r8b; xor eax, eax; ret; 
0x0000000000487cd4: or cl, byte ptr [rax + 0x3b]; add eax, 0x3b3f4; jae 0x87cea; mov rdx, qword ptr [rip + 0x3b3f3]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000418e49: or cl, byte ptr [rax + 1]; ret 0x8948; 
0x000000000041bf16: or cl, byte ptr [rax + 1]; ret 0x8949; 
0x0000000000487698: or cl, byte ptr [rax - 0x73]; adc eax, 0x3a400; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x000000000041886c: or cl, byte ptr [rax - 0x7d]; ret; 
0x000000000046a415: or cl, byte ptr [rbx + 0x5b010005]; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000041686a: or cl, ch; ret 0xfff3; 
0x000000000048acce: or cl, ch; sub al, 0x53; mov bh, 0xff; nop dword ptr [rax]; add rsp, 8; ret; 
0x000000000042fcf2: or dh, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000043aea3: or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000475296: or dh, byte ptr [rdi + rcx + 0x48]; cmp eax, esi; ja 0x75290; lea eax, [rdx + rdi]; ret; 
0x000000000041f836: or dh, byte ptr [rdi + rcx + 0x48]; cmp ecx, esi; ja 0x1f830; lea eax, [rdx + rdi]; ret; 
0x000000000041a087: or dh, byte ptr [rsp + rdi*4 + 0x48]; add esp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x00000000004254ab: or dh, dh; ret 0xf02; 
0x000000000048acf2: or dl, byte ptr [rbx - 0x49]; jmp qword ptr [rsi + 0x2e]; 
0x000000000041f538: or dword ptr [rax + 0x74], 0x80; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x1f538; ret; 
0x000000000040f1b9: or dword ptr [rax + rax*8 - 0x38b78d8c], eax; ret 0xfff0; 
0x00000000004646e6: or dword ptr [rax - 0x7d], ecx; ret 0x4101; 
0x000000000044707e: or dword ptr [rax - 1], ecx; ret 0xc148; 
0x0000000000428eb8: or dword ptr [rax], eax; adc byte ptr [rax - 0x73], cl; adc eax, 0x242fe; lea rax, [rip + 0x24247]; cmovne rax, rdx; ret; 
0x0000000000429978: or dword ptr [rax], eax; adc byte ptr [rax - 0x73], cl; adc eax, 0xfffffc9e; lea rax, [rip + 0x232e7]; cmove rax, rdx; ret; 
0x0000000000402c52: or dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000430237: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044510f: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000430175: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000426252: or dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000451a22: or dword ptr [rax], eax; add byte ptr [rax], al; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x00000000004519e0: or dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000452e8a: or dword ptr [rax], eax; add byte ptr [rcx + rcx*4 + 0x44], cl; and al, 8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000412a05: or dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r10; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x0000000000429d74: or dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x23822; lea rax, [rip + 0x238db]; cmove rax, rdx; ret; 
0x0000000000429c04: or dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x23982; lea rax, [rip + 0x23a3b]; cmove rax, rdx; ret; 
0x0000000000429aa4: or dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x23af2; lea rax, [rip + 0x23bab]; cmove rax, rdx; ret; 
0x0000000000429d06: or dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x23c60; lea rax, [rip + 0x23ca9]; cmove rax, rdx; ret; 
0x0000000000429b96: or dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x23dc0; lea rax, [rip + 0x23e09]; cmove rax, rdx; ret; 
0x0000000000429a36: or dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x23f30; lea rax, [rip + 0x23f79]; cmove rax, rdx; ret; 
0x0000000000429d58: or dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x2404e; lea rax, [rip + 0x24097]; cmove rax, rdx; ret; 
0x0000000000429be8: or dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x241ae; lea rax, [rip + 0x241f7]; cmove rax, rdx; ret; 
0x0000000000429a88: or dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x2431e; lea rax, [rip + 0x24367]; cmove rax, rdx; ret; 
0x0000000000429b48: or dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x24abe; lea rax, [rip + 0x24b17]; cmove rax, rdx; ret; 
0x0000000000429c5f: or dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; add eax, 0x1d427; lea rdx, [rip + 0x1ecc0]; cmovne rax, rdx; ret; 
0x0000000000428e8f: or dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; add eax, 0x1e107; lea rdx, [rip + 0x1e2e0]; cmovne rax, rdx; ret; 
0x0000000000428e2f: or dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; add eax, 0xfd7; lea rdx, [rip + 0x26d0]; cmovne rax, rdx; ret; 
0x0000000000429a54: or dword ptr [rax], eax; add dh, byte ptr [rdi + rax*2 - 0xa]; ret 0x7520; 
0x000000000042826f: or dword ptr [rax], eax; add dword ptr [rax - 0x77], ecx; ret 0x3174; 
0x000000000042153c: or dword ptr [rax], eax; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x9f1e4], eax; ret; 
0x0000000000421515: or dword ptr [rax], eax; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x9f1ee], rax; ret; 
0x00000000004214ec: or dword ptr [rax], eax; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x9f20f], rax; ret; 
0x00000000004214cc: or dword ptr [rax], eax; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x9f227], rax; ret; 
0x000000000042239e: or dword ptr [rax], eax; add rsp, 0x10; pop rbp; ret; 
0x00000000004290cd: or dword ptr [rax], eax; cmp rax, rdx; lea rdx, [rip + 0x1d677]; lea rax, [rip + 0x1d2b0]; cmove rax, rdx; ret; 
0x000000000042910d: or dword ptr [rax], eax; cmp rax, rdx; lea rdx, [rip + 0x1d7d7]; lea rax, [rip + 0x1d410]; cmove rax, rdx; ret; 
0x0000000000429dad: or dword ptr [rax], eax; cmp rax, rdx; lea rdx, [rip + 0x74e7]; lea rax, [rip + 0x72d0]; cmove rax, rdx; ret; 
0x0000000000428dcf: or dword ptr [rax], eax; lea rax, [rip + 0x1cd57]; lea rdx, [rip + 0x22400]; cmovne rax, rdx; ret; 
0x000000000042249c: or dword ptr [rax], eax; lea rax, [rip + 0x319b]; mov qword ptr [rip + 0x9e2d4], rax; ret; 
0x0000000000422397: or dword ptr [rax], eax; lea rax, [rip + 0x9e400]; add rsp, 0x10; pop rbp; ret; 
0x0000000000426298: or dword ptr [rax], eax; lea rax, [rip - 0x9e1]; mov qword ptr [rip + 0x9a4e0], rax; lea rax, [rip - 0xc6f]; mov qword ptr [rip + 0x9a4ca], rax; ret; 
0x00000000004262a6: or dword ptr [rax], eax; lea rax, [rip - 0xc6f]; mov qword ptr [rip + 0x9a4ca], rax; ret; 
0x0000000000401d48: or dword ptr [rax], eax; mov byte ptr [rip + 0xc04cf], 1; pop rbp; ret; 
0x00000000004214a8: or dword ptr [rax], eax; mov dword ptr [r11 + 0x24], ebp; pop rbp; mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x0000000000420649: or dword ptr [rax], eax; ret; 
0x0000000000424ff8: or dword ptr [rax], eax; syscall; 
0x0000000000425030: or dword ptr [rax], eax; syscall; pop rbp; ret; 
0x000000000042619c: or dword ptr [rax], eax; syscall; pop rbx; ret; 
0x0000000000433026: or dword ptr [rbp - 0xcffffff], 0xf; outsd dx, dword ptr [rsi]; push rdi; ret 0xff3; 
0x000000000046c893: or dword ptr [rbp - 2], edi; jmp qword ptr [rsi + 0xf]; 
0x000000000044fea5: or dword ptr [rbx - 0x72b7fffc], 0x3d; ror byte ptr [rdx - 0x3417fffc], 1; xor ebx, edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000041b6a0: or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000041d34a: or dword ptr [rcx + rax - 0x28], 0x3e; jmp rax; 
0x000000000044f642: or dword ptr [rcx - 0x77], 0xc68348d2; add dword ptr [rax - 0x7d], ecx; ret 0x8801; 
0x0000000000452e89: or dword ptr [rcx], 0; add byte ptr [rcx + rcx*4 + 0x44], cl; and al, 8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000401cc6: or dword ptr [rdi + 0x4c1b10], edi; jmp rax; 
0x0000000000466f0c: or dword ptr [rdi - 0x2f], esi; mov rax, r8; ret; 
0x000000000040f1b5: or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b78d8c], eax; ret 0xfff0; 
0x0000000000417512: or dword ptr [rdi], ecx; xchg bh, al; add al, byte ptr [rax]; add byte ptr [rcx - 0x76b3d395], cl; ret 0x8348; 
0x0000000000472f16: or dword ptr [rdi], ecx; xchg dword ptr [rbx], esi; add al, 0; add byte ptr [rbx - 0x7cb7fb8e], cl; ret 0xb804; 
0x000000000048269f: or dword ptr [rip + 0x3ea62], 1; ret; 
0x0000000000459651: or dword ptr [rip + 0x69784], 2; add rsp, 8; ret; 
0x00000000004839f7: or dword ptr [rsi - 0x1a], esi; cmp ecx, r8d; je 0x8394a; mov eax, ecx; sub eax, r8d; ret; 
0x00000000004822a3: or dword ptr [rsi - 6], eax; jmp qword ptr [rsi + 0xf]; 
0x0000000000429ba3: or dword ptr [rsi], edi; add al, byte ptr [rax]; cmove rax, rdx; ret; 
0x0000000000456be9: or eax, 0x10; mov dword ptr [rip + 0x6cc02], eax; pop rbx; ret; 
0x0000000000424f8e: or eax, 0x10009b8; pop rbp; ret; 
0x0000000000456c4a: or eax, 0x18; mov dword ptr [rip + 0x6cba1], eax; ret; 
0x000000000044adc1: or eax, 0x1c478d48; ret; 
0x00000000004172ca: or eax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000472e42: or eax, 0x401f0f08; add byte ptr [rbx - 0x7cb7fbbe], cl; ret 0x4104; 
0x0000000000446635: or eax, 0x48fad348; test edx, edx; je 0x46660; bsf rax, rdx; ret; 
0x000000000049053a: or eax, 0x48fff712; mov dword ptr [rcx], edx; add rsp, 8; ret; 
0x0000000000445aca: or eax, 0x55ef1; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000004446b5: or eax, 0x57306; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000044444a: or eax, 0x57571; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000442b75: or eax, 0x58e46; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000004031c2: or eax, 0x5be43145; pop rbp; mov rax, r12; pop r12; ret; 
0x0000000000422a8a: or eax, 0x5d5bc031; pop r12; ret; 
0x000000000044adb8: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000044a6f8: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000042fd87: or eax, 0x83480000; ret 0x4910; 
0x00000000004436b1: or eax, 0x83480000; ret 0xe910; 
0x000000000042fdb5: or eax, 0x83480000; ret 0xeb10; 
0x000000000041b2c7: or eax, 0xa6a14; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x0000000000401e3f: or eax, 0xb80004ee; add dword ptr [rax], eax; add byte ptr [rax], al; leave; ret; 
0x000000000044ffe2: or eax, 0xc2bc0f48; shr rax, 2; ret; 
0x000000000047c3bc: or eax, 0xe8f7894c; sti; ret; 
0x000000000043ad4a: or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043ad53: or eax, 0xf7f0ff3; ret; 
0x000000000045464f: or eax, 0xffffff9c; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x00000000004509f1: or eax, 0xffffffff; ret; 
0x0000000000456b7a: or eax, 1; mov dword ptr [rip + 0x6cc71], eax; ret; 
0x0000000000431949: or eax, 1; ret; 
0x0000000000456b49: or eax, 2; mov dword ptr [rip + 0x6cca2], eax; pop rbx; ret; 
0x00000000004026d9: or eax, 2; mov edx, eax; mov esi, edx; mov edi, 0x3002; mov eax, 0x9e; syscall; 
0x0000000000456baa: or eax, 3; mov dword ptr [rip + 0x6cc41], eax; ret; 
0x0000000000456c1a: or eax, 8; mov dword ptr [rip + 0x6cbd1], eax; ret; 
0x00000000004756a6: or eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x810; cmove rax, rdx; ret; 
0x00000000004769b6: or eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x8b0; cmove rax, rdx; ret; 
0x000000000042ff67: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000443851: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042ff95: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000451a75: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000451a75: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x51a84; ret; 
0x000000000048bc45: or eax, dword ptr [rax]; add byte ptr [rbp + 0x1bf0142], cl; add byte ptr [rax], al; add byte ptr [rcx - 0x4cf7b], cl; jmp qword ptr [rsi + 0x2e]; 
0x000000000047049e: or eax, dword ptr [rax]; add byte ptr [rcx - 0x77], cl; ret 0xb8; 
0x0000000000403d00: or eax, dword ptr [rax]; syscall; 
0x0000000000462483: or eax, dword ptr [rbx + 0x438901e8]; or byte ptr [rbx + 0x1974fdf8], al; pop rbx; ret; 
0x0000000000445eb7: or eax, ecx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000042624d: or eax, edi; add eax, 0x9ca48; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000445ebe: or eax, edx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x00000000004190e8: or ebp, eax; ret 0xd7; 
0x000000000043af13: or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x000000000048efb0: or ecx, dword ptr [eax - 0x7d]; ret; 
0x000000000044d625: or ecx, dword ptr [rax - 0x73]; adc al, 0xe; cmp rdi, rdx; jb 0x4d632; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000048efb1: or ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000042b407: or ecx, esi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000431940: or ecx, esi; sub rax, rcx; je 0x31950; sbb eax, eax; or eax, 1; ret; 
0x000000000044a360: or edi, dword ptr [rsi]; jmp rcx; 
0x00000000004107d9: or edi, edi; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000451a29: or edx, 0x40; mov eax, ecx; syscall; 
0x00000000004120b6: or edx, dword ptr [rax + rax]; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x00000000004500cb: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x000000000044651f: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000004466e0: or edx, ecx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000490311: or esi, 2; mov edi, 1; call rax; 
0x000000000044d623: or esi, dword ptr [rbx + rcx + 0x48]; lea edx, [rsi + rcx]; cmp rdi, rdx; jb 0x4d632; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044e3a7: or esi, ebx; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000043ae33: or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x000000000041b6a1: or esp, dword ptr [rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000451a28: or r10d, 0x40; mov eax, ecx; syscall; 
0x000000000043af82: or r11b, r14b; movq qword ptr [rdi], mm1; ret; 
0x000000000043af12: or r11d, r14d; movq qword ptr [rdi], mm1; ret; 
0x000000000042fcf1: or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000043aea2: or r14b, r11b; movq qword ptr [rdi], mm1; ret; 
0x000000000043ae32: or r14d, r11d; movq qword ptr [rdi], mm1; ret; 
0x000000000041df71: or r8b, byte ptr [rax]; syscall; 
0x000000000041df71: or r8b, byte ptr [rax]; syscall; ret; 
0x00000000004756a5: or r8d, dword ptr [r8]; add byte ptr [rax - 0x73], cl; add eax, 0x810; cmove rax, rdx; ret; 
0x00000000004172c9: or rax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000472e41: or rax, 0x401f0f08; add byte ptr [rbx - 0x7cb7fbbe], cl; ret 0x4104; 
0x00000000004509f0: or rax, 0xffffffffffffffff; ret; 
0x0000000000445eb6: or rax, rcx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x0000000000445ebd: or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000042b406: or rcx, rsi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000043193f: or rcx, rsi; sub rax, rcx; je 0x31950; sbb eax, eax; or eax, 1; ret; 
0x00000000004500ca: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x000000000044651e: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000004466df: or rdx, rcx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000402a3e: out 0, al; add byte ptr [rax], al; add rsp, 0x98; ret; 
0x0000000000418119: out 0, eax; add byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000048e218: out 0x20, eax; je 0x8e22c; movss xmm0, dword ptr [rip + 0x227b4]; divss xmm0, dword ptr [rip + 0x227b0]; ret; 
0x0000000000429985: out 0x32, eax; add al, byte ptr [rax]; cmove rax, rdx; ret; 
0x0000000000418843: out 0x41, al; call qword ptr [rbp + 0x38]; 
0x00000000004276f3: out 0x41, al; pop rsp; pop r13; jmp rax; 
0x00000000004754d4: out 0x41, eax; and ebx, 0xffffffbb; cmp r11d, 0xa; je 0x754e0; ret; 
0x00000000004839f9: out 0x44, al; cmp ecx, eax; je 0x8394a; mov eax, ecx; sub eax, r8d; ret; 
0x0000000000415461: out 0x44, eax; mov dword ptr [rbp - 0x4f0], ecx; call qword ptr [rax + 0x38]; 
0x0000000000414f24: out 0x44, eax; mov dword ptr [rbp - 0x4f8], ecx; call qword ptr [rbx + 0x38]; 
0x00000000004156b6: out 0x44, eax; mov dword ptr [rbp - 0x508], edx; mov qword ptr [rbp - 0x500], r11; call qword ptr [rax + 0x38]; 
0x0000000000426248: out 0x45, al; test al, al; jne 0x26259; mov dword ptr [rip + 0x9ca48], 0; ret; 
0x0000000000486fd4: out 0x48, al; mov dword ptr [rdi], esi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000041c7a1: out 0x48, al; mov edi, ebp; call qword ptr [rax + 0x78]; 
0x000000000044f321: out 0x48, eax; mov esi, dword ptr [rsp + 0x18]; call rbx; 
0x00000000004282f8: out 0x48, eax; sub eax, 0x10; ret; 
0x000000000044e293: out 0x49, eax; jmp qword ptr [rdx - 0x2f]; 
0x0000000000434ee6: out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000046d15f: out 0x4c, al; mov edi, ebp; call qword ptr [rcx + 0x38]; 
0x000000000040f621: out 0x4c, al; mov edi, ebp; call rax; 
0x0000000000465425: out 0x4c, al; mov edi, ebp; call rbx; 
0x00000000004120bf: out 0x4c, al; mov edi, edi; call qword ptr [rcx + 0x38]; 
0x000000000044f1cb: out 0x4c, eax; lea ecx, [rsp + 0x30]; call rbx; 
0x000000000047063b: out 0x4c, eax; mov dword ptr [rbp - 0x4d8], ebx; call qword ptr [rbx + 0x38]; 
0x00000000004712a7: out 0x4c, eax; mov dword ptr [rbp - 0x500], ebx; mov qword ptr [rbp - 0x4f8], r9; call qword ptr [rax + 0x38]; 
0x0000000000468c1e: out 0x4c, eax; mov dword ptr [rbp - 0xe8], eax; call rax; 
0x0000000000434d16: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434e12: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000434d5e: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000046fe46: out 0x4c, eax; sub ebx, eax; sar rbx, 2; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x000000000046f946: out 0x4c, eax; sub ebx, esi; mov r13, rbx; sar r13, 2; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x00000000004143b3: out 0x4d, eax; sub edi, eax; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000413e0e: out 0x4d, eax; sub edi, ebp; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000004746d1: out 0x5b, al; mov rdi, rbp; pop rbp; pop r12; jmp rax; 
0x00000000004933f6: out 0x5b, al; ret; 
0x000000000048e3c7: out 0x60, eax; jne 0x170f; xor eax, eax; add rsp, 8; ret; 
0x0000000000429db5: out 0x74, eax; add byte ptr [rax], al; lea rax, [rip + 0x72d0]; cmove rax, rdx; ret; 
0x0000000000411a1b: out 0x83, al; ret; 
0x000000000048cfa1: out 0x89, al; out dx, eax; call qword ptr [rax]; 
0x000000000048ce45: out 0x89, al; out dx, eax; call qword ptr [rbx]; 
0x000000000048ce07: out 0x89, al; out dx, eax; call rax; 
0x0000000000477722: out 0x89, al; out dx, eax; mov eax, 0xe4; syscall; 
0x00000000004666b8: out 0xe8, eax; ret 0xf9aa; 
0x00000000004217a7: out 0xe8, eax; ret; 
0x000000000046de8f: out 0xe8, eax; wait; xor ecx, edi; dec dword ptr [rax - 0x77]; ret 0xb848; 
0x000000000049038c: out 0xe9, al; scasd eax, dword ptr [rdi]; adc esi, edi; jmp qword ptr [rsi + 0x66]; 
0x000000000044e864: out 0xf0, al; mov edx, 0; pop rbx; cmove rax, rdx; ret; 
0x000000000043a71a: out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000043a79a: out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000485e31: out 0xfc, eax; jmp qword ptr [rsi + 0x2e]; 
0x0000000000481c70: out 0xfc, eax; jmp qword ptr [rsi + 0x66]; 
0x0000000000451ccd: out 0xfe, al; je 0x5205d; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 8]; mov rdi, r13; call rax; 
0x0000000000415e67: out 0xff, al; jmp qword ptr [rsi + 0xf]; 
0x000000000046a1f4: out 0xff, eax; jmp qword ptr [rsi + 0xf]; 
0x00000000004695ab: out 0xff, eax; jmp qword ptr [rsi - 0x70]; 
0x0000000000470fbe: out 0xff, eax; push rax; cmp byte ptr [rax + 0x39], cl; ret; 
0x0000000000408146: out 1, eax; add byte ptr [rbx + rcx*4 + 4], cl; and al, 0xe9; xchg edi, eax; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000429cb3: out 2, al; lea rax, [rip + 0x148b4]; lea rdx, [rip + 0x16afd]; cmovne rax, rdx; ret; 
0x000000000042917a: out 2, al; lea rax, [rip + 0x3a3d]; lea rdx, [rip + 0x5296]; cmovne rax, rdx; ret; 
0x00000000004299c1: out 2, al; lea rax, [rip + 0x7a26]; lea rdx, [rip + 0x21b2f]; cmovne rax, rdx; ret; 
0x000000000048aebd: out 2, al; syscall; 
0x00000000004947d6: out 2, eax; add byte ptr [rax + 0x39], cl; ret; 
0x000000000044f073: out 6, eax; add byte ptr [rax + 0x39], cl; ret; 
0x00000000004222c6: out 9, al; or al, byte ptr [rax]; syscall; 
0x000000000046b3d9: out dx, al; adc byte ptr [rcx + 0x39], cl; ret; 
0x0000000000401e40: out dx, al; add al, 0; mov eax, 1; leave; ret; 
0x000000000046aa43: out dx, al; add al, 0xc7; add al, 0x30; add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; ret; 
0x000000000048346e: out dx, al; fcomi st(7); jmp qword ptr [rsi + 0x48]; 
0x000000000048ca62: out dx, al; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000043ab20: out dx, al; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000450b6e: out dx, al; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000434eea: out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000450be4: out dx, al; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000040f68f: out dx, al; mov rax, qword ptr [rsp]; mov r13, r15; add r15, r12; call rax; 
0x000000000040f499: out dx, al; mov rdi, r12; call rax; 
0x0000000000413e0b: out dx, al; mov rdi, r12; sub r15, r13; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000041872c: out dx, al; mov rdi, r15; call qword ptr [rbp + 0x38]; 
0x00000000004266f2: out dx, al; mov rdi, rbp; pop rbp; pop r12; pop r13; jmp rax; 
0x000000000043ab2a: out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000444fbe: out dx, al; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000045dd9f: out dx, al; ret 0; 
0x000000000040fe1d: out dx, al; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000486fb3: out dx, al; xor al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x000000000042151e: out dx, al; int1; or dword ptr [rax], eax; ret; 
0x00000000004641b2: out dx, al; stc; jmp qword ptr [rsi + 0x66]; 
0x0000000000482460: out dx, al; syscall; 
0x000000000047b279: out dx, eax; add ah, byte ptr [rsi + 0xf]; jo 0x7b240; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000046e2a9: out dx, eax; add dword ptr [rax - 0x93343], eax; jmp qword ptr [rax]; 
0x000000000044fcba: out dx, eax; add dword ptr [rbp - 0x57c03b0], ecx; add ecx, dword ptr [rdi]; xchg esi, eax; ret 0xc085; 
0x0000000000479d23: out dx, eax; add ecx, dword ptr [rax + 0x29]; ret 0x8948; 
0x000000000041f76d: out dx, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000041f7c5: out dx, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041c6b1: out dx, eax; call qword ptr [rax + 0x18]; 
0x000000000041c1a9: out dx, eax; call qword ptr [rax + 0x40]; 
0x000000000041c7a4: out dx, eax; call qword ptr [rax + 0x78]; 
0x000000000048cfa3: out dx, eax; call qword ptr [rax]; 
0x000000000041808d: out dx, eax; call qword ptr [rbx + 0x10]; 
0x000000000041e908: out dx, eax; call qword ptr [rbx + 0x18]; 
0x000000000048ce47: out dx, eax; call qword ptr [rbx]; 
0x000000000046d162: out dx, eax; call qword ptr [rcx + 0x38]; 
0x000000000040f624: out dx, eax; call rax; 
0x0000000000465428: out dx, eax; call rbx; 
0x000000000046f4e6: out dx, eax; fdiv st(7), st(0); jmp qword ptr [rsi + 0xf]; 
0x000000000043aba0: out dx, eax; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000046dcc1: out dx, eax; mov dword ptr [rbp - 0x970], r10d; mov byte ptr [rbp - 0x958], r9b; call rax; 
0x0000000000450e3a: out dx, eax; mov eax, 0x4f; syscall; 
0x0000000000422e9e: out dx, eax; mov eax, 0xca; syscall; 
0x0000000000477724: out dx, eax; mov eax, 0xe4; syscall; 
0x00000000004519de: out dx, eax; mov eax, 9; syscall; 
0x0000000000434d1a: out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434e16: out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000434d62: out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004527d0: out dx, eax; mov rax, r12; pop rbp; pop r12; jmp rax; 
0x0000000000451b57: out dx, eax; mov rax, r12; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000000413e11: out dx, eax; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000044fdd9: out dx, eax; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000043abaa: out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004450bd: out dx, eax; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000419beb: out dx, eax; pop rbp; mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004746d5: out dx, eax; pop rbp; pop r12; jmp rax; 
0x00000000004266f5: out dx, eax; pop rbp; pop r12; pop r13; jmp rax; 
0x000000000041e87d: out dx, eax; pop rbx; pop rbp; jmp rax; 
0x0000000000425e6c: out dx, eax; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000431c73: out dx, eax; push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000431c88: out dx, eax; push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000431c9d: out dx, eax; push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000044cea3: out dx, eax; ret 0xf66; 
0x0000000000420446: out dx, eax; ror byte ptr [rdi], 0x11; pop rbx; ret; 
0x000000000040fe59: out dx, eax; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000403767: out dx, eax; sbb al, ch; ret 0xffd9; 
0x000000000043318c: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x2373; 
0x0000000000433175: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000043315e: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x0000000000431c1a: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000429d53: out dx, eax; test byte ptr [rip + 0x98fda], 2; lea rdx, [rip + 0x2404e]; lea rax, [rip + 0x24097]; cmove rax, rdx; ret; 
0x0000000000431ef1: out dx, eax; xchg esi, eax; add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000431fae: out dx, eax; xchg esi, eax; lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000431f5d: out dx, eax; xchg esi, eax; rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000442fbe: outsb dx, byte ptr [rsi]; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044b2ce: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x00000000004532d2: outsb dx, byte ptr [rsi]; add eax, dword ptr [rax]; add byte ptr [rcx + rcx*4 + 0x44], cl; and al, 8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000048b29f: outsb dx, byte ptr [rsi]; ret 0x160f; 
0x0000000000421bf8: outsb dx, byte ptr [rsi]; ret 0x4866; 
0x000000000047cd65: outsb dx, byte ptr [rsi]; ret 0x4966; 
0x000000000041c1c3: outsb dx, byte ptr [rsi]; ret 0x4d83; 
0x000000000048ba04: outsb dx, byte ptr [rsi]; ret 0x8348; 
0x000000000047ccd9: outsb dx, byte ptr [rsi]; ret 0x8944; 
0x00000000004245eb: outsb dx, byte ptr [rsi]; ret 0x894c; 
0x0000000000457772: outsb dx, byte ptr [rsi]; ret 0x8d48; 
0x000000000041db84: outsb dx, byte ptr [rsi]; ret 0xde9; 
0x000000000041bd66: outsb dx, byte ptr [rsi]; ret 0xe083; 
0x0000000000420c20: outsb dx, byte ptr [rsi]; ret 0xe480; 
0x000000000041cccb: outsb dx, byte ptr [rsi]; ret 0xf66; 
0x000000000047cd29: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; shl dword ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0x290f; 
0x00000000004870f4: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0x110f; 
0x00000000004834b8: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0xf41; 
0x00000000004834b3: outsb dx, byte ptr [rsi]; shl dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0xf41; 
0x000000000041a17d: outsb dx, byte ptr [rsi]; shl dword ptr [rsi + 0xf], 0x6c; ror byte ptr [rdi], 0x11; add ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret 0x34e9; 
0x000000000047cd2e: outsb dx, byte ptr [rsi]; shl dword ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0x290f; 
0x000000000042104b: outsb dx, byte ptr [rsi]; shl dword ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0x4d83; 
0x00000000004541b6: outsb dx, byte ptr [rsi]; test byte ptr [rsi], 0; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x000000000040f9a2: outsb dx, byte ptr [rsi]; ret; 
0x000000000044f20e: outsb dx, byte ptr [rsi]; sti; jmp qword ptr [rsi + 0xf]; 
0x0000000000467642: outsd dx, dword ptr [rsi]; adc ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000044d880: outsd dx, dword ptr [rsi]; adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x000000000046a587: outsd dx, dword ptr [rsi]; adc dword ptr [rsi + 0xf], esp; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000041f05d: outsd dx, dword ptr [rsi]; add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000432d08: outsd dx, dword ptr [rsi]; call 0xf6a15c1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000432ced: outsd dx, dword ptr [rsi]; fdiv dword ptr [rdx - 0x10f09928]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000432aed: outsd dx, dword ptr [rsi]; fdiv qword ptr [rdx - 0x10f09924]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000429ff8: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x000000000043e92e: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x0000000000432c6d: outsd dx, dword ptr [rsi]; fnstenv [rdx - 0x10f09927]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042a03e: outsd dx, dword ptr [rsi]; fsub st(1), st(0); imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x0000000000411f03: outsd dx, dword ptr [rsi]; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000004329b7: outsd dx, dword ptr [rsi]; movabs rbp, 0xf66d1ef0f66bdb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000432ab7: outsd dx, dword ptr [rsi]; movabs rsp, 0xf66d1ef0f66bcb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043e4f8: outsd dx, dword ptr [rsi]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x0000000000432bed: outsd dx, dword ptr [rsi]; push rdi; fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004329ed: outsd dx, dword ptr [rsi]; push rdi; fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043302d: outsd dx, dword ptr [rsi]; push rdi; ret 0xff3; 
0x00000000004765fa: outsd dx, dword ptr [rsi]; push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x0000000000432f8d: outsd dx, dword ptr [rsi]; push rdi; ret; 
0x000000000044a756: outsd dx, dword ptr [rsi]; push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000043281d: outsd dx, dword ptr [rsi]; push rsi; fbstp tbyte ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004328ed: outsd dx, dword ptr [rsi]; push rsi; fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000044adb6: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000044a6f6: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000044a736: outsd dx, dword ptr [rsi]; push rsi; psllq mm1, qword ptr [rdi]; jg 0x4a744; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000046764a: outsd dx, dword ptr [rsi]; ret 0x290f; 
0x00000000004683d5: outsd dx, dword ptr [rsi]; ret 0x2be; 
0x000000000041a188: outsd dx, dword ptr [rsi]; ret 0x34e9; 
0x000000000041a16b: outsd dx, dword ptr [rsi]; ret 0x4866; 
0x0000000000420adb: outsd dx, dword ptr [rsi]; ret 0x8948; 
0x000000000046766b: outsd dx, dword ptr [rsi]; ret 0xf66; 
0x000000000041a23d: outsd dx, dword ptr [rsi]; ret 0xff3; 
0x0000000000467646: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000043304d: outsd dx, dword ptr [rsi]; sal byte ptr [rdx - 0x10f0992e], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043316e: outsd dx, dword ptr [rsi]; sal byte ptr [rdx - 0x10f09930], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x0000000000432fad: outsd dx, dword ptr [rsi]; sal qword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004330ed: outsd dx, dword ptr [rsi]; sal qword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000490794: outsd dx, dword ptr [rsi]; xchg ebp, eax; cmp ah, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004814fa: outsd dx, dword ptr [rsi]; xchg ebp, eax; cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000490c96: outsd dx, dword ptr [rsi]; xchg ebp, eax; cmp dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000043e3a0: outsd dx, dword ptr [rsi]; cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000044ce4c: outsd dx, dword ptr [rsi]; ret; 
0x000000000047614d: pcmpeqb mm1, qword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x761b0; xor eax, eax; ret; 
0x0000000000477464: pcmpeqb mm3, qword ptr [rcx]; add rax, 2; ret; 
0x000000000047744f: pcmpeqb mm3, qword ptr [rsi]; ret; 
0x00000000004463bf: pcmpeqb mm4, mm0; pmovmskb edx, xmm4; test edx, edx; je 0x463ce; bsf eax, edx; ret; 
0x000000000047614c: pcmpeqb xmm1, xmmword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x761b0; xor eax, eax; ret; 
0x00000000004463be: pcmpeqb xmm4, xmm0; pmovmskb edx, xmm4; test edx, edx; je 0x463ce; bsf eax, edx; ret; 
0x0000000000476efd: pcmpeqd mm1, qword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x76f60; xor eax, eax; ret; 
0x0000000000476efc: pcmpeqd xmm1, xmmword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x76f60; xor eax, eax; ret; 
0x0000000000487bd4: pcmpistri xmm0, xmmword ptr [rax], 0x12; jae 0x87bd0; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000487b46: pcmpistri xmm2, xmm2, 0x3a; cmp edx, ecx; jle 0x87bf0; ret; 
0x000000000044d2d8: pcmpistri xmm3, xmm3, 0x3a; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000044e5ba: pextrw edi, mm0, 0x77; ret; 
0x0000000000442b6e: pi2fd mm6, qword ptr [rsi - 0x72b7f1ec]; mov es, word ptr [rip - 0x7efb7500]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000445da0: pmovmskb eax, mm0; test eax, eax; je 0x45db0; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x0000000000431246: pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000476152: pmovmskb eax, mm1; test eax, eax; jne 0x761b0; xor eax, eax; ret; 
0x0000000000476122: pmovmskb eax, mm1; test eax, eax; jne 0x761d0; xor eax, eax; ret; 
0x0000000000476f02: pmovmskb eax, mm1; test eax, eax; jne 0x76f60; xor eax, eax; ret; 
0x0000000000476ed2: pmovmskb eax, mm1; test eax, eax; jne 0x76f80; xor eax, eax; ret; 
0x0000000000445d9f: pmovmskb eax, xmm0; test eax, eax; je 0x45db0; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x0000000000431245: pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000476151: pmovmskb eax, xmm1; test eax, eax; jne 0x761b0; xor eax, eax; ret; 
0x0000000000476121: pmovmskb eax, xmm1; test eax, eax; jne 0x761d0; xor eax, eax; ret; 
0x0000000000476f01: pmovmskb eax, xmm1; test eax, eax; jne 0x76f60; xor eax, eax; ret; 
0x0000000000476ed1: pmovmskb eax, xmm1; test eax, eax; jne 0x76f80; xor eax, eax; ret; 
0x000000000044b251: pmovmskb edx, mm3; test eax, eax; jne 0x4b264; nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x00000000004463c3: pmovmskb edx, mm4; test edx, edx; je 0x463ce; bsf eax, edx; ret; 
0x000000000044b250: pmovmskb edx, xmm3; test eax, eax; jne 0x4b264; nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x00000000004463c2: pmovmskb edx, xmm4; test edx, edx; je 0x463ce; bsf eax, edx; ret; 
0x0000000000425e6f: pop r12; jmp rax; 
0x00000000004266e4: pop r12; mov rax, r8; pop r13; ret; 
0x00000000004266f7: pop r12; pop r13; jmp rax; 
0x000000000046c9b3: pop r12; pop r13; mov rax, r9; pop r14; ret; 
0x0000000000426d56: pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x0000000000403554: pop r12; pop r13; pop r14; pop r15; pop rbp; ret; 
0x00000000004018c3: pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000040f259: pop r12; pop r13; pop r14; ret; 
0x0000000000411161: pop r12; pop r13; ret; 
0x0000000000456d05: pop r12; shl eax, cl; ret; 
0x000000000040312f: pop r12; ret; 
0x00000000004266f9: pop r13; jmp rax; 
0x000000000046c9b5: pop r13; mov rax, r9; pop r14; ret; 
0x0000000000426d58: pop r13; pop r14; pop r15; jmp rax; 
0x0000000000403556: pop r13; pop r14; pop r15; pop rbp; ret; 
0x00000000004018c5: pop r13; pop r14; pop r15; ret; 
0x0000000000477cf8: pop r13; pop r14; ret; 
0x0000000000411163: pop r13; ret; 
0x0000000000426d5a: pop r14; pop r15; jmp rax; 
0x0000000000403558: pop r14; pop r15; pop rbp; ret; 
0x00000000004018c7: pop r14; pop r15; ret; 
0x000000000040f25d: pop r14; ret; 
0x0000000000426d5c: pop r15; jmp rax; 
0x000000000040355a: pop r15; pop rbp; ret; 
0x00000000004018c9: pop r15; ret; 
0x000000000041e73e: pop r8; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x000000000041e61c: pop r8; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000041f5a6: pop r8; test rax, rax; je 0x1f5bc; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x000000000041e73f: pop rax; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x000000000048ead1: pop rax; add dword ptr [rax], eax; add byte ptr [rax - 0x80], al; call qword ptr [rcx]; 
0x000000000045ab70: pop rax; call rbx; 
0x0000000000475922: pop rax; dec dword ptr [rcx - 0x77]; ret 0x3948; 
0x00000000004843d0: pop rax; jmp qword ptr [rax]; 
0x000000000041e61d: pop rax; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000045b778: pop rax; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000459aa7: pop rax; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045a8fa: pop rax; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x000000000045ed06: pop rax; mov rdi, qword ptr [rsp + 0x50]; call rbx; 
0x0000000000460019: pop rax; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045e91c: pop rax; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000045a4b6: pop rax; mov rdi, qword ptr [rsp + 0x60]; call rbx; 
0x000000000045a09e: pop rax; mov rdi, qword ptr [rsp + 0x60]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000041832f: pop rax; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000464dd1: pop rax; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000468fe9: pop rax; or al, 0x89; fdiv st(6); ret; 
0x0000000000467946: pop rax; or al, 0xf6; ret; 
0x000000000040f1b4: pop rax; or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b78d8c], eax; ret 0xfff0; 
0x000000000048449a: pop rax; pop rdx; pop rbx; ret; 
0x000000000041f5a7: pop rax; test rax, rax; je 0x1f5bc; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000429bc4: pop rax; xchg esi, eax; add byte ptr [rax], al; lea rdx, [rip + 0xebe1]; cmovne rax, rdx; ret; 
0x000000000048484d: pop rax; xor rcx, qword ptr fs:[0x28]; jne 0x84894; add rsp, 0x68; ret; 
0x0000000000451707: pop rax; ret; 
0x000000000046bd74: pop rax; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000491e52: pop rbp; and byte ptr [rsi - 9], ah; ret; 
0x000000000041e87f: pop rbp; jmp rax; 
0x00000000004214ae: pop rbp; mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x00000000004914a4: pop rbp; mov eax, r8d; ret; 
0x0000000000475db0: pop rbp; mov qword ptr [r12], r14; pop r12; pop r13; pop r14; ret; 
0x0000000000419bec: pop rbp; mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000475667: pop rbp; mov rax, r12; pop r12; pop r13; ret; 
0x00000000004031c7: pop rbp; mov rax, r12; pop r12; ret; 
0x0000000000488214: pop rbp; mov rax, r13; pop r12; pop r13; ret; 
0x0000000000426678: pop rbp; mov rax, r8; pop r12; pop r13; ret; 
0x000000000042193c: pop rbp; mov rax, r8; pop r12; ret; 
0x0000000000406fa4: pop rbp; mov rax, r9; pop r12; ret; 
0x000000000046c9b6: pop rbp; mov rax, r9; pop r14; ret; 
0x00000000004276f0: pop rbp; mov rsi, r12; pop r12; pop r13; jmp rax; 
0x0000000000425e6e: pop rbp; pop r12; jmp rax; 
0x00000000004266e3: pop rbp; pop r12; mov rax, r8; pop r13; ret; 
0x00000000004266f6: pop rbp; pop r12; pop r13; jmp rax; 
0x0000000000426d55: pop rbp; pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x00000000004018c2: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000040f258: pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000411160: pop rbp; pop r12; pop r13; ret; 
0x000000000040312e: pop rbp; pop r12; ret; 
0x0000000000426d59: pop rbp; pop r14; pop r15; jmp rax; 
0x0000000000403557: pop rbp; pop r14; pop r15; pop rbp; ret; 
0x00000000004018c6: pop rbp; pop r14; pop r15; ret; 
0x000000000040f25c: pop rbp; pop r14; ret; 
0x0000000000486f48: pop rbp; pop rbx; ret; 
0x0000000000456d01: pop rbp; shl ecx, 3; pop r12; shl eax, cl; ret; 
0x0000000000401d51: pop rbp; ret; 
0x000000000048957f: pop rbx; add rax, qword ptr [rdx + 8]; pop rbp; pop r12; jmp rax; 
0x000000000044e916: pop rbx; and eax, 0x7ff80000; ret; 
0x0000000000456c46: pop rbx; and eax, 0xffffffc7; or eax, 0x18; mov dword ptr [rip + 0x6cba1], eax; ret; 
0x0000000000456c16: pop rbx; and eax, 0xffffffc7; or eax, 8; mov dword ptr [rip + 0x6cbd1], eax; ret; 
0x0000000000456b76: pop rbx; and eax, 0xfffffff8; or eax, 1; mov dword ptr [rip + 0x6cc71], eax; ret; 
0x0000000000456ba6: pop rbx; and eax, 0xfffffff8; or eax, 3; mov dword ptr [rip + 0x6cc41], eax; ret; 
0x000000000044e86b: pop rbx; cmove rax, rdx; ret; 
0x000000000044e8fb: pop rbx; cmovne rax, rdx; ret; 
0x000000000041e798: pop rbx; jmp rax; 
0x0000000000426031: pop rbx; mov ch, 0xff; jmp qword ptr [rsi + 0x66]; 
0x0000000000474a50: pop rbx; mov dword ptr [rbp + 0x74], eax; mov eax, 1; pop rbp; pop r12; ret; 
0x000000000041f3e0: pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x000000000046c5e8: pop rbx; mov eax, 1; pop rbp; pop r12; pop r13; ret; 
0x00000000004826bb: pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x000000000044e95e: pop rbx; mov eax, ecx; and eax, 0x7ff80000; div esi; mov eax, eax; ret; 
0x000000000048d747: pop rbx; mov eax, r12d; pop rbp; pop r12; pop r13; ret; 
0x000000000046a2da: pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000421759: pop rbx; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x00000000004520d7: pop rbx; mov rax, r13; pop rbp; pop r12; pop r13; ret; 
0x000000000041b165: pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x00000000004746d2: pop rbx; mov rdi, rbp; pop rbp; pop r12; jmp rax; 
0x000000000048269e: pop rbx; or dword ptr [rip + 0x3ea62], 1; ret; 
0x00000000004518e4: pop rbx; pop r12; ret; 
0x000000000041e87e: pop rbx; pop rbp; jmp rax; 
0x00000000004914a3: pop rbx; pop rbp; mov eax, r8d; ret; 
0x00000000004031c6: pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x0000000000488213: pop rbx; pop rbp; mov rax, r13; pop r12; pop r13; ret; 
0x000000000042193b: pop rbx; pop rbp; mov rax, r8; pop r12; ret; 
0x0000000000406fa3: pop rbx; pop rbp; mov rax, r9; pop r12; ret; 
0x0000000000425e6d: pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000040f257: pop rbx; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000041115f: pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040312d: pop rbx; pop rbp; pop r12; ret; 
0x000000000048dfdd: pop rbx; pop rbp; pop r14; ret; 
0x0000000000456d00: pop rbx; pop rbp; shl ecx, 3; pop r12; shl eax, cl; ret; 
0x000000000040333a: pop rbx; pop rbp; ret; 
0x000000000044e87a: pop rbx; shr eax, 0xe; and eax, 0x3fc00; ret; 
0x000000000044e8c5: pop rbx; shr eax, 6; and eax, 0x3fffc00; ret; 
0x000000000041c55f: pop rbx; sub rax, rdx; pop rbp; pop r12; ret; 
0x000000000041ce90: pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000040201b: pop rbx; ret; 
0x0000000000482457: pop rcx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; in eax, 0x48; mov esi, ebp; syscall; 
0x0000000000424d33: pop rcx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xb817; 
0x0000000000417fbb: pop rcx; add rsp, 0xe8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000401df3: pop rcx; imul eax, dword ptr [rcx], 0; nop; pop rbp; ret; 
0x000000000043e4f9: pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x000000000043decc: pop rcx; jmp qword ptr [rdx - 0xf]; 
0x0000000000490a37: pop rcx; jmp rcx; 
0x0000000000493203: pop rcx; cld; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000450cad: pop rdi; add al, byte ptr [rax]; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000044574d: pop rdi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000464e3d: pop rdi; idiv esi; jmp qword ptr [rsi + 0x2e]; 
0x00000000004352b9: pop rdi; in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004350c9: pop rdi; in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000426d5d: pop rdi; jmp rax; 
0x000000000041816f: pop rdi; or byte ptr [rbx - 0x76fefbb9], al; ret 0xe281; 
0x0000000000434ee9: pop rdi; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434d19: pop rdi; out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434e15: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000434d61: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000040355b: pop rdi; pop rbp; ret; 
0x00000000004018ca: pop rdi; ret; 
0x000000000042425b: pop rdx; adc byte ptr [rdi], cl; test dword ptr [rip - 0x9fffffd], ebp; ret 0xf01; 
0x00000000004305f6: pop rdx; add eax, 0x83480000; ret 0x4910; 
0x000000000041d462: pop rdx; cmp al, 0xfe; dec dword ptr [rax - 0x77]; ret; 
0x000000000040bc02: pop rdx; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000451d4b: pop rdx; or byte ptr [rcx - 0xa], al; ret; 
0x000000000048449b: pop rdx; pop rbx; ret; 
0x0000000000428f09: pop rdx; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000004017cf: pop rdx; ret; 
0x000000000044564e: pop rsi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000048e226: pop rsi; add eax, 0x227b0; ret; 
0x0000000000445b00: pop rsi; add eax, 0x8a0c8b00; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000445acc: pop rsi; add eax, 0x91148b00; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000041e699: pop rsi; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000426d5b: pop rsi; pop r15; jmp rax; 
0x0000000000403559: pop rsi; pop r15; pop rbp; ret; 
0x00000000004018c8: pop rsi; pop r15; ret; 
0x000000000040f25e: pop rsi; ret; 
0x00000000004431d0: pop rsp; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004308f4: pop rsp; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000489fc2: pop rsp; add eax, 0x248d4d00; ret 0x2944; 
0x0000000000443ed0: pop rsp; add eax, 0x83480000; ret 0xe910; 
0x0000000000484442: pop rsp; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x00000000004843c0: pop rsp; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x000000000041357b: pop rsp; idiv edi; jmp qword ptr [rsi - 0x77]; 
0x0000000000428940: pop rsp; jle 0x2894c; add al, ch; xlatb; ret; 
0x0000000000425e70: pop rsp; jmp rax; 
0x00000000004266e5: pop rsp; mov rax, r8; pop r13; ret; 
0x00000000004266f8: pop rsp; pop r13; jmp rax; 
0x000000000046c9b4: pop rsp; pop r13; mov rax, r9; pop r14; ret; 
0x0000000000426d57: pop rsp; pop r13; pop r14; pop r15; jmp rax; 
0x0000000000403555: pop rsp; pop r13; pop r14; pop r15; pop rbp; ret; 
0x00000000004204a0: pop rsp; pop r13; pop r14; pop r15; ret; 
0x000000000040f25a: pop rsp; pop r13; pop r14; ret; 
0x0000000000411162: pop rsp; pop r13; ret; 
0x0000000000456d06: pop rsp; shl eax, cl; ret; 
0x000000000045fe20: pop rsp; xor bh, dl; jmp qword ptr [rsi + 0x66]; 
0x0000000000403130: pop rsp; ret; 
0x00000000004949eb: prefetchnta byte ptr [rax]; je 0x949d8; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x000000000043ac72: psllq mm1, qword ptr [r15]; jg 0x3ac87; ret; 
0x000000000043d7a2: psllq mm1, qword ptr [r15]; jg 0x3d7b7; ret; 
0x000000000043ac73: psllq mm1, qword ptr [rdi]; jg 0x3ac87; ret; 
0x000000000043d7a3: psllq mm1, qword ptr [rdi]; jg 0x3d7b7; ret; 
0x000000000044a5d6: psllq mm1, qword ptr [rdi]; jg 0x4a5e2; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000044a637: psllq mm1, qword ptr [rdi]; jg 0x4a643; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000044a738: psllq mm1, qword ptr [rdi]; jg 0x4a744; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000044ac76: psllq mm1, qword ptr [rdi]; jg 0x4ac82; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000044acf7: psllq mm1, qword ptr [rdi]; jg 0x4ad03; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000044adf8: psllq mm1, qword ptr [rdi]; jg 0x4ae04; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x0000000000474356: punpckhqdq xmm0, xmm0; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x000000000041e64f: punpckhqdq xmm0, xmm0; mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000459857: punpckldq mm1, mm3; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x0000000000459856: punpckldq xmm1, xmm3; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x000000000041b691: punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x000000000041ec51: punpcklqdq xmm0, xmm1; movups xmmword ptr [rbx + 0x38], xmm0; pop rbx; pop rbp; pop r12; ret; 
0x000000000045985a: punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x00000000004621f0: push -0x1605feb4; ret 0xfffe; 
0x0000000000427da2: push -0x6d; std; jmp qword ptr [rsi + 0x2e]; 
0x0000000000456318: push -0x76fff936; ret 0xe083; 
0x000000000044b2b4: push -0x9ffffff; ret 0x7501; 
0x000000000048dac7: push -4; jmp qword ptr [rsi + 0xf]; 
0x0000000000476be8: push 0; lea rcx, [rax + 1]; lea r9, [rsp + 0x28]; call rbx; 
0x000000000044effb: push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000045a8ea: push 0; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x000000000045d97d: push 0; mov r9, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000044fc4b: push 0; mov r9, r14; mov rsi, qword ptr [rsp + 0x18]; mov rcx, r12; mov rdx, r13; call rbx; 
0x0000000000457340: push 0; mov r9, r14; mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; call rbx; 
0x000000000045b768: push 0; mov rcx, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000046000e: push 0; mov rcx, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045e911: push 0; mov rcx, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000044f315: push 0; mov rdx, r13; mov r9, qword ptr [rsp + 0x10]; mov rdi, r12; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000044f1c1: push 0; mov rdx, r13; xor r8d, r8d; mov rdi, r12; lea r9, [rsp + 0x30]; call rbx; 
0x0000000000459a9c: push 0; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000044fdcd: push 0; xor r8d, r8d; mov rcx, qword ptr [rsp + 0x20]; mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x00000000004534ea: push 0x10788b49; test rdi, rdi; jne 0x5353f; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004904d8: push 0x12; idiv edi; mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x00000000004515c0: push 0x1f0f66c3; add byte ptr [rax], r8b; lea rdx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000045a099: push 0x24748b48; pop rax; mov rdi, qword ptr [rsp + 0x60]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000476b40: push 0x5c415d5b; pop r13; ret; 
0x000000000040fe2e: push 0x66ffffff; nop dword ptr [rax + rax]; mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000042464e: push 0x6e0f4966; ret; 
0x000000000044ef8f: push 1; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000476be2: push 1; mov rdi, qword ptr [r12]; push 0; lea rcx, [rax + 1]; lea r9, [rsp + 0x28]; call rbx; 
0x000000000044eff9: push 1; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000044ef8b: push 1; xor edx, edx; push 1; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000479053: push 4; add byte ptr [rbp - 0x7d7af00a], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000046a261: push qword ptr [r9]; sal bh, cl; int1; add r8d, eax; mov eax, r8d; ret; 
0x000000000044cc38: push qword ptr [rbp + 0x1a]; xor eax, eax; ret; 
0x0000000000451c3c: push qword ptr [rbp + 0x27]; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000004910da: push qword ptr [rbp + 0x36]; mov eax, 8; add rsp, 8; ret; 
0x0000000000452b70: push qword ptr [rbp + 0x3e]; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000453520: push qword ptr [rbp + 0x44]; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004534f1: push qword ptr [rbp + 0x4b]; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452b9c: push qword ptr [rbp + 0x69]; mov rdi, qword ptr [r14]; call rbx; 
0x00000000004318f9: push qword ptr [rbp + 4]; vzeroupper; ret; 
0x0000000000419514: push qword ptr [rbp + 7]; mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000041baf5: push qword ptr [rbp + 7]; mov rdx, qword ptr [rbp + 0x40]; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbp; call rax; 
0x0000000000493be6: push qword ptr [rbp + rax - 0x18]; ret 0xfff7; 
0x0000000000493ae6: push qword ptr [rbp + rax - 0x18]; ret 0xfff8; 
0x00000000004939e6: push qword ptr [rbp + rax - 0x18]; ret 0xfff9; 
0x00000000004938e6: push qword ptr [rbp + rax - 0x18]; ret 0xfffa; 
0x00000000004749a1: push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x0000000000446633: push qword ptr [rbp + rcx + 0x48]; sar edx, cl; test rdx, rdx; je 0x46660; bsf rax, rdx; ret; 
0x00000000004465c3: push qword ptr [rbp + rdi*2 + 0x48]; sar edx, cl; test rdx, rdx; je 0x46670; bsf rax, rdx; ret; 
0x0000000000494791: push qword ptr [rbp + rdx + 0x48]; mov eax, dword ptr [rdi + 0x20]; test rax, rax; je 0x947a4; call rax; 
0x000000000041f800: push qword ptr [rbp - 0x40]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004509e0: push qword ptr [rbx + 1]; ret; 
0x000000000041f768: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000475229: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004190e6: push qword ptr [rbx + rcx - 0x18]; ret 0xd7; 
0x000000000040270e: push qword ptr [rcx]; idiv byte ptr [rdi + 0x3003]; mov eax, 0x9e; syscall; 
0x000000000041dcd3: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000487578: push qword ptr [rcx]; ror byte ptr [rcx + 0x438b4803], cl; sbb byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x000000000046a262: push qword ptr [rcx]; sal bh, cl; int1; add r8d, eax; mov eax, r8d; ret; 
0x0000000000454c6d: push qword ptr [rcx]; test byte ptr [rax - 0x73], 0x3d; add al, 0; mov eax, 0x15; syscall; 
0x000000000045049b: push qword ptr [rdi + 0x22]; hlt; mov edi, edx; mov eax, r8d; syscall; 
0x0000000000450d0c: push qword ptr [rdi + 0x51]; ret; 
0x0000000000450c67: push qword ptr [rdi + 0x56]; ret; 
0x00000000004519eb: push qword ptr [rdi + 0x62]; pop rbx; pop rbp; ret; 
0x0000000000487c73: push qword ptr [rdi + 0xa]; ret; 
0x0000000000451869: push qword ptr [rdi + 4]; ret; 
0x0000000000450da0: push qword ptr [rdi + 5]; ret; 
0x0000000000450a7f: push qword ptr [rdi + 6]; ret; 
0x0000000000450ade: push qword ptr [rdi + 7]; ret; 
0x00000000004517fd: push qword ptr [rdi + 8]; ret; 
0x0000000000477f04: push qword ptr [rdi + 9]; ret; 
0x00000000004519d6: push qword ptr [rdi + rsi + 0x41]; mov edx, ebx; mov rdi, rbp; mov eax, 9; syscall; 
0x0000000000477734: push qword ptr [rdi - 0x37]; add rsp, 8; pop rbp; pop r12; ret; 
0x00000000004931ff: push qword ptr [rsi + rbx*2 - 0x18]; pop rcx; cld; dec dword ptr [rax - 0x7d]; ret; 
0x00000000004624ae: push qword ptr [rsi + rbx*8 - 0x18]; or ah, byte ptr [rcx]; add al, byte ptr [rax]; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000041eb90: push qword ptr [rsp + rax - 0x58]; add dword ptr [rcx + rbp - 0x77], esi; ret 0xff3; 
0x0000000000450e32: push qword ptr [rsp + rbx*8 + 0x48]; mov ebp, edi; mov rdi, rbp; mov eax, 0x4f; syscall; 
0x000000000045b9dd: push r12; mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; call rbx; 
0x000000000045ecfb: push r12; mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; call rbx; 
0x0000000000460460: push r12; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; call rbx; 
0x000000000045cf3d: push r12; mov r9, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000045c301: push r12; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; call rbx; 
0x000000000045ab60: push r14; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; call rbx; 
0x0000000000410104: push r15; or byte ptr [rax], al; call 0x3080; xor r8d, r8d; mov rax, r8; ret; 
0x0000000000420329: push rax; adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000416865: push rax; adc byte ptr [rcx - 0x77], cl; push rsi; or cl, ch; ret 0xfff3; 
0x000000000048ac80: push rax; add al, 0; add bl, ch; ret; 
0x00000000004017c1: push rax; add al, byte ptr [rax]; mov qword ptr [rip + 0xc1829], 0; pop rdx; ret; 
0x0000000000475174: push rax; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x0000000000421195: push rax; add dword ptr [rax - 0x77], ecx; adc eax, 0x9f5b2; ret; 
0x000000000046bc50: push rax; add dword ptr [rax - 0x77], ecx; push rbp; sub dh, al; add byte ptr [rip - 0xb9517], ch; jmp qword ptr [rsi - 0x70]; 
0x00000000004119c4: push rax; add dword ptr [rcx - 0x77], ecx; push rdi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000040227b: push rax; and byte ptr [rax + 1], cl; ret 0xb70f; 
0x00000000004573c0: push rax; call rbx; 
0x000000000046fe52: push rax; cmp byte ptr [rax + 0x39], cl; ret; 
0x0000000000413903: push rax; fdiv st(7), st(0); jmp qword ptr [rsi + 0xf]; 
0x000000000048954e: push rax; inc dword ptr [rbp + 0x481a74c0]; lea ebx, [rbp + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x000000000041221a: push rax; inc esi; test dword ptr [rax], eax; idiv edi; jmp qword ptr [rax]; 
0x0000000000491149: push rax; jne 0x91173; xor eax, eax; add rsp, 8; ret; 
0x00000000004911a9: push rax; jne 0x911d3; xor eax, eax; add rsp, 8; ret; 
0x0000000000492b59: push rax; jne 0x92b7b; xor eax, eax; add rsp, 8; ret; 
0x000000000046001e: push rax; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045e921: push rax; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000045c307: push rax; mov rdi, qword ptr [rsp + 0x48]; call rbx; 
0x000000000045ab6b: push rax; mov rdi, qword ptr [rsp + 0x58]; call rbx; 
0x000000000045b773: push rax; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000459aa2: push rax; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045a8f5: push rax; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x00000000004017bb: push rax; mov rdi, r8; call 0x268b0; mov qword ptr [rip + 0xc1829], 0; pop rdx; ret; 
0x0000000000474360: push rax; movups xmmword ptr [rax], xmm0; ret; 
0x00000000004554f2: push rax; or byte ptr [rcx + 0x3e895], cl; add dh, dh; ret 0x7402; 
0x00000000004254aa: push rax; or dh, dh; ret 0xf02; 
0x000000000045b9dc: push rax; push r12; mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; call rbx; 
0x000000000045ecfa: push rax; push r12; mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; call rbx; 
0x000000000046045f: push rax; push r12; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; call rbx; 
0x000000000045cf3c: push rax; push r12; mov r9, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000045c300: push rax; push r12; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; call rbx; 
0x000000000045ab5f: push rax; push r14; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; call rbx; 
0x000000000045a4ab: push rax; push rbp; mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x60]; call rbx; 
0x000000000045b3cc: push rax; push rbp; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x60]; call rbx; 
0x000000000042031a: push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000474aa5: push rax; sbb byte ptr [rsi + 0x1f], dh; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000049171c: push rax; sub byte ptr [rbp + 1], cl; ret 0x394c; 
0x000000000049325c: push rax; stc; dec dword ptr [rax - 0x7d]; ret; 
0x000000000049335b: push rbp; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000041a239: push rbp; adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xff3; 
0x000000000041a03f: push rbp; add dh, dh; ret 0x7402; 
0x0000000000424750: push rbp; and byte ptr [rax + 0x39], cl; ret 0x860f; 
0x000000000049205b: push rbp; and byte ptr [rcx - 0x75], cl; insd dword ptr [rdi], dx; sbb dh, dh; ret 0xf01; 
0x0000000000418846: push rbp; cmp byte ptr [rax + 0x39], cl; ret; 
0x00000000004136fe: push rbp; fdivp st(7); jmp qword ptr [rsi + 0xf]; 
0x000000000040562e: push rbp; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000418b93: push rbp; mov esi, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000045a4ac: push rbp; mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x60]; call rbx; 
0x0000000000464574: push rbp; mov rax, qword ptr [rdi + 0x20]; mov rbp, rdi; test rax, rax; je 0x64583; call rax; 
0x000000000045b3cd: push rbp; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x60]; call rbx; 
0x0000000000490a73: push rbp; or al, ch; idiv dil; jmp qword ptr [rsi + 0xf]; 
0x0000000000470e67: push rbp; rol dword ptr [rax + rax], cl; mov r11, rcx; mov dword ptr [rbp - 0x508], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000046bc54: push rbp; sub dh, al; add byte ptr [rip - 0xb9517], ch; jmp qword ptr [rsi - 0x70]; 
0x000000000041bafa: push rbp; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbp; call rax; 
0x000000000041f7fc: push rbp; xor byte ptr [rbx - 0x3f8a0008], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004190c1: push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x0000000000402412: push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000048f375: push rbx; add cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000406432: push rbx; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000047a3b0: push rbx; and byte ptr [rax - 0x75], cl; sub byte ptr [r8 + 0x39], r9b; ret 0x870f; 
0x000000000044de79: push rbx; jb 0x4de81; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004749bf: push rbx; je 0x74a1d; pop rbp; pop r12; ret; 
0x000000000048acd1: push rbx; mov bh, 0xff; nop dword ptr [rax]; add rsp, 8; ret; 
0x000000000047496b: push rbx; mov rbx, rdi; test byte ptr [rdi], 2; jne 0x749e8; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x0000000000418e1e: push rbx; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax + 0x70]; 
0x000000000046aa92: push rbx; or al, 0xf6; ret 0xf01; 
0x00000000004730b2: push rbx; or al, 0xf6; ret 0xf04; 
0x000000000041b042: push rbx; or byte ptr [rax - 0x75], cl; xor ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000045209a: push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x00000000004178da: push rbx; xor al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x00000000004733ce: push rbx; xor al, 0xe9; ret 0xfffc; 
0x000000000046718a: push rbx; xor byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x75], 0x43; sbb byte ptr [rax + 0x2b], cl; sub byte ptr [r9 + r9*4 + 4], cl; ret 0x8b4c; 
0x000000000044ebc8: push rcx; add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0xda89; 
0x0000000000484f6d: push rcx; add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x000000000043e0d3: push rcx; jl 0x3e11e; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000043e0da: push rcx; jl 0x3e125; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000043e0e1: push rcx; jl 0x3e12c; adc dword ptr [rcx - 1], edi; ret; 
0x000000000043e23a: push rcx; jl 0x3e285; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000043e241: push rcx; jl 0x3e28c; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000043e248: push rcx; jl 0x3e293; adc dword ptr [rcx + 7], edi; ret; 
0x0000000000452f2b: push rcx; or al, byte ptr [rax]; add byte ptr [rcx + rcx*4 + 0x44], cl; and al, 8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004243dd: push rcx; or byte ptr [rax + 0x39], cl; ret; 
0x0000000000422625: push rcx; sbb byte ptr [rcx + 1], cl; ret; 
0x0000000000450d0e: push rcx; ret; 
0x000000000044ab2a: push rdi; add al, 0x48; lea eax, [rdi + 5]; ret; 
0x000000000043add9: push rdi; add al, 0x48; mov dword ptr [rdi], ecx; ret; 
0x0000000000429b25: push rdi; add al, byte ptr [rax]; lea rax, [rip + 0x247e0]; cmovne rax, rdx; ret; 
0x0000000000418085: push rdi; add dword ptr [rax], eax; add byte ptr [rcx], dh; test byte ptr [rax - 0x77], -0x11; call qword ptr [rbx + 0x10]; 
0x000000000048650f: push rdi; add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x000000000044d396: push rdi; add dword ptr [rdx - 0xf], esp; jl 0x4d3e4; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000044abdc: push rdi; add eax, 0xc478d48; ret; 
0x000000000045ff1d: push rdi; add eax, dword ptr [rax]; add byte ptr [rcx - 0x73], cl; add r9b, byte ptr [r8 + 0x39]; ret; 
0x0000000000446b08: push rdi; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000004763f8: push rdi; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000417e0d: push rdi; add rsp, 0xe8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000424e2c: push rdi; and byte ptr [rax + 0x39], cl; ret 0x4273; 
0x00000000004546a0: push rdi; and dh, al; sub byte ptr [r9], r8b; ret; 
0x0000000000434b62: push rdi; call 0xfffffffff062d4b4; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434ba0: push rdi; call 0xfffffffff062d4f2; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434bd8: push rdi; call 0xfffffffff062d52a; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434c16: push rdi; call 0xfffffffff062d568; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434c4e: push rdi; call 0xfffffffff062d5a0; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434c76: push rdi; call 0xfffffffff062d5c8; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434c9e: push rdi; call 0xfffffffff062d5f0; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000437542: push rdi; call 0xfffffffff062fe94; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000437580: push rdi; call 0xfffffffff062fed2; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004375b8: push rdi; call 0xfffffffff062ff0a; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000004375f6: push rdi; call 0xfffffffff062ff48; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043762e: push rdi; call 0xfffffffff062ff80; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000437656: push rdi; call 0xfffffffff062ffa8; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043767e: push rdi; call 0xfffffffff062ffd0; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000041a163: push rdi; cmp byte ptr [rax - 0x75], cl; xor byte ptr [rsi + 0xf], spl; outsd dx, dword ptr [rsi]; ret 0x4866; 
0x0000000000428f05: push rdi; cmp ebp, 0xc0315aff; pop rbp; pop r12; ret; 
0x0000000000432bee: push rdi; fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004329ee: push rdi; fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004509ea: push rdi; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000450a8e: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000450cc6: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x00000000004352b5: push rdi; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004350c5: push rdi; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000428dd5: push rdi; int 1; add byte ptr [rax - 0x73], cl; adc eax, 0x22400; cmovne rax, rdx; ret; 
0x0000000000435886: push rdi; loope 0x358d5; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004358ce: push rdi; loope 0x3591d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043590c: push rdi; loope 0x3595b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435944: push rdi; loope 0x35993; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435982: push rdi; loope 0x359d1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004359ba: push rdi; loope 0x35a09; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004359e2: push rdi; loope 0x35a31; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000438266: push rdi; loope 0x382b5; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004382ae: push rdi; loope 0x382fd; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004382ec: push rdi; loope 0x3833b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000438324: push rdi; loope 0x38373; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000438362: push rdi; loope 0x383b1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043839a: push rdi; loope 0x383e9; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004383c2: push rdi; loope 0x38411; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432cb8: push rdi; mov eax, 0xf66b8b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000432b38: push rdi; mov ebx, 0xf66bbb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000432c38: push rdi; mov ecx, 0xf66b9b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000432bb8: push rdi; mov edx, 0xf66bab2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000041e624: push rdi; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000043a51a: push rdi; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000467665: push rdi; or al, 0; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000450525: push rdi; or al, 0xfb; dec dword ptr [rax - 0x77]; ret; 
0x0000000000410105: push rdi; or byte ptr [rax], al; call 0x3080; xor r8d, r8d; mov rax, r8; ret; 
0x000000000041c55d: push rdi; or byte ptr [rbx + 0x48], bl; sub eax, edx; pop rbp; pop r12; ret; 
0x0000000000486f3a: push rdi; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x000000000048b78a: push rdi; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000486f41: push rdi; or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x000000000044adc0: push rdi; or eax, 0x1c478d48; ret; 
0x00000000004769b5: push rdi; or eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x8b0; cmove rax, rdx; ret; 
0x0000000000434ee5: push rdi; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434d15: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434e11: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000434d5d: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043302e: push rdi; ret 0xff3; 
0x000000000041e655: push rdi; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000045469a: push rdi; sbb byte ptr [rdi + 0x16], dh; mov qword ptr [rdi + 0x20], rdx; mov byte ptr [rdi + 0x28], 1; ret; 
0x00000000004546c0: push rdi; sbb byte ptr [rdi - 0x10], bh; mov qword ptr [rdi + 0x20], rdx; mov byte ptr [rdi + 0x28], 1; ret; 
0x00000000004119c8: push rdi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000419519: push rdi; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x00000000004765fb: push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x0000000000476158: push rdi; xor eax, eax; ret; 
0x0000000000434ba8: push rdi; clc; ret; 
0x0000000000434d20: push rdi; cld; ret; 
0x0000000000435847: push rdi; cli; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043a6b9: push rdi; cmc; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043a639: push rdi; hlt; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043a48a: push rdi; int1; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000432f8e: push rdi; ret; 
0x0000000000435a47: push rdi; stc; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043526a: push rdi; std; mov word ptr [rdi - 2], cx; ret; 
0x0000000000435647: push rdi; sti; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000429187: push rdx; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x0000000000471882: push rdx; in eax, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x000000000042468d: push rdx; or byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000433799: push rdx; sar byte ptr [rsi], 0x41; jmp rcx; 
0x000000000047dd81: push rdx; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000044ae17: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000044a757: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000044a6b6: push rsi; adc byte ptr [rbx + 0xff3174e], cl; jg 0x4a6c6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000044a6d6: push rsi; adc byte ptr [rbx + 0xff3184e], cl; jg 0x4a6e6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000431c74: push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000044d4dd: push rsi; add ah, byte ptr [rdx - 0xf]; jl 0x4d52b; adc dword ptr [rsi + 3], edx; ret; 
0x000000000043add2: push rsi; add al, 0x48; mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043b071: push rsi; add cl, byte ptr [rbx + 0x257890e]; mov dword ptr [rdi], ecx; ret; 
0x000000000043b0e1: push rsi; add dword ptr [rbx + 0x157890e], ecx; mov dword ptr [rdi], ecx; ret; 
0x0000000000486bb7: push rsi; add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x000000000044d4d6: push rsi; add dword ptr [rdx - 0xf], esp; jl 0x4d524; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043ad62: push rsi; add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000044abd5: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x000000000044a565: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x000000000044d573: push rsi; add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043b001: push rsi; add ecx, dword ptr [rbx + 0x357890e]; mov dword ptr [rdi], ecx; ret; 
0x000000000044ab43: push rsi; add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x000000000044a503: push rsi; add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x0000000000411ea2: push rsi; and byte ptr [rcx + rcx*4 - 1], cl; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000431c89: push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043281e: push rsi; fbstp tbyte ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004328ee: push rsi; fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004327e8: push rsi; mov edi, 0xf66bfb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004328b8: push rsi; mov esi, 0xf66beb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000452a19: push rsi; mov r14, qword ptr [r13 + 0x10]; test r14, r14; jne 0x52a40; mov rdi, qword ptr [r13]; call rbx; 
0x000000000045ab61: push rsi; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; call rbx; 
0x000000000043a5a2: push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043a512: push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000046d5b3: push rsi; or al, 0xf6; ret 0xf08; 
0x0000000000416869: push rsi; or cl, ch; ret 0xfff3; 
0x000000000044adb7: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000044a6f7: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000044a737: push rsi; psllq mm1, qword ptr [rdi]; jg 0x4a744; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000044adf7: push rsi; psllq mm1, qword ptr [rdi]; jg 0x4ae04; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x0000000000459a9b: push rsi; push 0; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000046ecda: push rsi; ret 0xf10; 
0x000000000044c746: push rsi; sub eax, edx; ret; 
0x000000000043a7b2: push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x0000000000431c9e: push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000434cb6: push rsi; clc; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043560a: push rsi; clc; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043580a: push rsi; clc; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435a0a: push rsi; clc; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434c9a: push rsi; clc; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435626: push rsi; clc; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435826: push rsi; clc; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435a26: push rsi; clc; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434cd2: push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435441: push rsi; cld; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434e79: push rsi; cld; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435059: push rsi; cld; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435239: push rsi; cld; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435419: push rsi; cld; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435075: push rsi; cld; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435255: push rsi; cld; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435435: push rsi; cld; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434e95: push rsi; cld; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000044d36e: push rsi; cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000435841: push rsi; cli; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043a6b2: push rsi; cmc; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000044c776: push rsi; cmc; sub eax, edx; ret; 
0x000000000043a632: push rsi; hlt; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000044c766: push rsi; hlt; sub eax, edx; ret; 
0x000000000043a482: push rsi; int1; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000044c736: push rsi; int1; sub eax, edx; ret; 
0x0000000000450c69: push rsi; ret; 
0x0000000000435a41: push rsi; stc; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435262: push rsi; std; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000044d375: push rsi; std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000435641: push rsi; sti; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000490f79: push rsp; and al, 0x10; call rax; 
0x0000000000423bba: push rsp; and al, 0x18; mov qword ptr [rsp + 0x10], r8; call rax; 
0x0000000000484447: push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x00000000004843c5: push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x000000000045a097: push rsp; and al, 0x68; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x60]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004515ca: push rsp; and al, 8; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000042c967: push rsp; cmp ah, byte ptr [rax]; sub eax, edx; vzeroupper; ret; 
0x00000000004944bc: push rsp; fld qword ptr [rax]; mov rax, qword ptr [rax + rbx*8]; test rax, rax; je 0x944ca; call rax; 
0x000000000045b9de: push rsp; mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; call rbx; 
0x000000000045ecfc: push rsp; mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; call rbx; 
0x0000000000460461: push rsp; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; call rbx; 
0x000000000045cf3e: push rsp; mov r9, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000045c302: push rsp; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; call rbx; 
0x0000000000412f2e: push rsp; ret; 
0x0000000000420445: pxor mm0, mm0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000420444: pxor xmm0, xmm0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x000000000045b9db: rcl byte ptr [rax + 0x41], 0x54; mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; call rbx; 
0x000000000045ecf9: rcl byte ptr [rax + 0x41], 0x54; mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; call rbx; 
0x000000000046045e: rcl byte ptr [rax + 0x41], 0x54; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; call rbx; 
0x000000000045cf3b: rcl byte ptr [rax + 0x41], 0x54; mov r9, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000045c2ff: rcl byte ptr [rax + 0x41], 0x54; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; call rbx; 
0x000000000045ab5e: rcl byte ptr [rax + 0x41], 0x56; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; call rbx; 
0x000000000045a4aa: rcl byte ptr [rax + 0x55], 0x4c; mov ecx, dword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x60]; call rbx; 
0x000000000040ff2b: rcl byte ptr [rax], 0x22; add byte ptr [rax + 0x39], r9b; ret; 
0x000000000044d226: rcl byte ptr [rax], 0x29; cmp edx, ecx; jle 0x4d244; movsxd rax, ecx; ret; 
0x00000000004428e9: rcl dword ptr [rax + 0xc8b0005], cl; mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x00000000004237a8: rcl dword ptr [rip + 0x9cf7a], 0x83; ret 0x8b01; 
0x000000000046d5e4: rcr byte ptr [rax + rax], cl; add dh, dh; ret 0xf40; 
0x00000000004266e2: rcr byte ptr [rbp + 0x41], 0x5c; mov rax, r8; pop r13; ret; 
0x0000000000418a02: rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x000000000041b168: rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000041c562: rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x0000000000475daf: rcr byte ptr [rbp + 0x4d], 0x89; xor al, 0x24; pop r12; pop r13; pop r14; ret; 
0x0000000000486f47: rcr byte ptr [rbp + 0x5b], 1; ret; 
0x0000000000418a98: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x000000000041115e: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x0000000000422a8c: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000425e7a: rcr byte ptr [rbx + 0x5d], 0x4c; mov eax, eax; pop r12; ret; 
0x000000000049451f: rcr byte ptr [rbx + 0x5d], 1; pop r12; pop r13; pop r14; ret; 
0x0000000000456cff: rcr dword ptr [rbx + 0x5d], 0xc1; loope 0x56d08; pop r12; shl eax, cl; ret; 
0x00000000004850f9: rcr dword ptr [rcx], 0xc0; and eax, 2; sub eax, 1; ret; 
0x000000000044384c: rcr dword ptr [rdx], 0xf; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004454a9: rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x0000000000444cc9: rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x00000000004450b9: rcr dword ptr [rdx], 0xf; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004448d9: rcr dword ptr [rdx], 0xf; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004443ac: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000443b8c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000044336c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x0000000000444a78: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000443ecc: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004436ac: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000442e8c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000044406c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x0000000000444f69: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000444789: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000445899: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004431cc: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000443302: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000444002: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000443b22: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000444e6a: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044579a: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000444342: rcr dword ptr [rdx], 0xf; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000443642: rcr dword ptr [rdx], 0xf; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x0000000000443162: rcr dword ptr [rdx], 0xf; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000443e62: rcr dword ptr [rdx], 0xf; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x0000000000444fba: rcr dword ptr [rdx], 0xf; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004447da: rcr dword ptr [rdx], 0xf; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044d63d: rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000044d62f: rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044e377: rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000424c52: rep stosq qword ptr [rdi], rax; pop rbp; ret; 
0x00000000004017af: repe cmpsb byte ptr [rsi], byte ptr [rdi]; seta al; sbb al, 0; test al, al; jne 0x17bb; ret; 
0x00000000004018fb: ret 0; 
0x000000000047308f: ret 0x107; 
0x000000000048173f: ret 0x1075; 
0x000000000048fb22: ret 0x10e9; 
0x000000000042455a: ret 0x110; 
0x000000000040f9db: ret 0x110f; 
0x0000000000486f1c: ret 0x114d; 
0x000000000045cf54: ret 0x11e9; 
0x000000000041ce1c: ret 0x1389; 
0x0000000000466aba: ret 0x13eb; 
0x000000000048dff9: ret 0x145; 
0x0000000000418105: ret 0x1475; 
0x000000000041f826: ret 0x148; 
0x000000000043e4a3: ret 0x14d; 
0x0000000000475e4b: ret 0x14eb; 
0x000000000040ec30: ret 0x1574; 
0x000000000041eba8: ret 0x160f; 
0x000000000046a896: ret 0x1773; 
0x0000000000476436: ret 0x1776; 
0x000000000040fbd1: ret 0x17e9; 
0x0000000000418fea: ret 0x18; 
0x000000000043e3e0: ret 0x180f; 
0x00000000004761c5: ret 0x1876; 
0x00000000004110ee: ret 0x1b60; 
0x0000000000467eac: ret 0x1b8; 
0x0000000000424e51: ret 0x1ba; 
0x00000000004282da: ret 0x1c74; 
0x000000000040c554: ret 0x1d; 
0x00000000004704dc: ret 0x1d74; 
0x000000000045fbb3: ret 0x1e74; 
0x0000000000407bea: ret 0x1ec; 
0x000000000045e8a2: ret 0x1f0f; 
0x0000000000464ccb: ret 0x200; 
0x0000000000451014: ret 0x2044; 
0x0000000000479e26: ret 0x2148; 
0x000000000041cbc7: ret 0x214c; 
0x0000000000481220: ret 0x2275; 
0x0000000000447078: ret 0x2288; 
0x00000000004898da: ret 0x2348; 
0x0000000000433192: ret 0x2373; 
0x0000000000491587: ret 0x2374; 
0x000000000048ccda: ret 0x23a; 
0x000000000048aa09: ret 0x2476; 
0x0000000000403fd1: ret 0x2548; 
0x000000000046d1b0: ret 0x2675; 
0x000000000048496e: ret 0x26e; 
0x0000000000410980: ret 0x2774; 
0x00000000004285b3: ret 0x27e8; 
0x0000000000434977: ret 0x280f; 
0x00000000004761b5: ret 0x2876; 
0x00000000004711ce: ret 0x28e9; 
0x0000000000481295: ret 0x28f5; 
0x000000000046764b: ret 0x290f; 
0x0000000000487b3b: ret 0x2912; 
0x0000000000446ea7: ret 0x2920; 
0x0000000000489fc8: ret 0x2944; 
0x0000000000419671: ret 0x2948; 
0x0000000000412aec: ret 0x2949; 
0x0000000000418e0b: ret 0x294c; 
0x000000000041c69a: ret 0x294d; 
0x00000000004190c5: ret 0x2b48; 
0x000000000048a2ee: ret 0x2b49; 
0x0000000000473004: ret 0x2b7c; 
0x00000000004683d6: ret 0x2be; 
0x000000000045eefa: ret 0x2de9; 
0x0000000000472e85: ret 0x2e66; 
0x000000000046a907: ret 0x3145; 
0x000000000047c8f2: ret 0x3148; 
0x0000000000428274: ret 0x3174; 
0x000000000041a189: ret 0x34e9; 
0x000000000046387a: ret 0x36f; 
0x0000000000476416: ret 0x3776; 
0x0000000000428153: ret 0x37e9; 
0x00000000004761a5: ret 0x3876; 
0x000000000048a3de: ret 0x3901; 
0x0000000000415fe8: ret 0x3944; 
0x0000000000475d85: ret 0x3945; 
0x000000000040596f: ret 0x3948; 
0x0000000000420cb9: ret 0x3949; 
0x0000000000422f03: ret 0x394c; 
0x000000000048b312: ret 0x394d; 
0x0000000000461d64: ret 0x3973; 
0x000000000044cd52: ret 0x3a01; 
0x000000000043317b: ret 0x3a73; 
0x000000000048fbf8: ret 0x3ae9; 
0x000000000044d7b5: ret 0x3b48; 
0x000000000047772e: ret 0x3d48; 
0x000000000045bb9a: ret 0x3e9; 
0x0000000000406f66: ret 0x4001; 
0x0000000000476bf8: ret 0x408d; 
0x000000000041e061: ret 0x4101; 
0x000000000041797b: ret 0x4104; 
0x0000000000423e49: ret 0x4110; 
0x000000000042b44a: ret 0x4266; 
0x0000000000424e30: ret 0x4273; 
0x00000000004743b9: ret 0x4389; 
0x0000000000473245: ret 0x43c7; 
0x00000000004899cb: ret 0x4401; 
0x000000000045ff61: ret 0x4408; 
0x00000000004159f5: ret 0x4420; 
0x0000000000483f3f: ret 0x4475; 
0x0000000000404c9a: ret 0x448b; 
0x000000000046ad5a: ret 0x44f; 
0x000000000044ee8a: ret 0x4501; 
0x000000000041dbff: ret 0x458b; 
0x000000000040f6e4: ret 0x4801; 
0x000000000042975f: ret 0x4802; 
0x000000000046c663: ret 0x4804; 
0x00000000004784a8: ret 0x4807; 
0x0000000000447003: ret 0x4808; 
0x0000000000422135: ret 0x4810; 
0x0000000000464e8b: ret 0x4811; 
0x000000000044f812: ret 0x4817; 
0x0000000000491826: ret 0x4830; 
0x000000000042b356: ret 0x4840; 
0x000000000045d15a: ret 0x4858; 
0x00000000004202e3: ret 0x4860; 
0x000000000046a213: ret 0x4864; 
0x000000000041a16c: ret 0x4866; 
0x00000000004463cc: ret 0x48c3; 
0x00000000004526ba: ret 0x48f8; 
0x0000000000406f0c: ret 0x4901; 
0x0000000000459b87: ret 0x4902; 
0x0000000000421341: ret 0x4907; 
0x0000000000482a2d: ret 0x4908; 
0x0000000000415c28: ret 0x4910; 
0x00000000004625e0: ret 0x4911; 
0x0000000000454a66: ret 0x4938; 
0x000000000047cd66: ret 0x4966; 
0x000000000041d4fe: ret 0x4a8d; 
0x000000000045e64f: ret 0x4b01; 
0x000000000043105e: ret 0x4c04; 
0x0000000000481a85: ret 0x4c08; 
0x0000000000430be6: ret 0x4c20; 
0x0000000000430c06: ret 0x4c40; 
0x0000000000430c26: ret 0x4c60; 
0x00000000004837be: ret 0x4ce8; 
0x000000000048cbbe: ret 0x4d08; 
0x0000000000468747: ret 0x4d74; 
0x000000000041c1c4: ret 0x4d83; 
0x0000000000402ada: ret 0x4eb; 
0x00000000004803c4: ret 0x4f10; 
0x00000000004546eb: ret 0x508b; 
0x0000000000485e0a: ret 0x50e8; 
0x0000000000433164: ret 0x5173; 
0x000000000044ebc6: ret 0x518d; 
0x00000000004733cc: ret 0x5389; 
0x0000000000480bb4: ret 0x56e8; 
0x00000000004763f6: ret 0x5776; 
0x00000000004562a6: ret 0x589; 
0x000000000045c311: ret 0x5a58; 
0x00000000004279e5: ret 0x5d5b; 
0x000000000044f800: ret 0x5de9; 
0x000000000044fcdd: ret 0x6073; 
0x0000000000420d53: ret 0x61e9; 
0x000000000047ecb0: ret 0x6349; 
0x00000000004625b4: ret 0x6411; 
0x000000000042400c: ret 0x6610; 
0x0000000000476131: ret 0x6620; 
0x0000000000428de3: ret 0x66c3; 
0x00000000004763e6: ret 0x6776; 
0x000000000048ad50: ret 0x6975; 
0x0000000000492170: ret 0x6ae8; 
0x00000000004583f2: ret 0x6b4; 
0x0000000000423cd2: ret 0x724; 
0x000000000040217d: ret 0x7402; 
0x000000000047f11e: ret 0x7403; 
0x0000000000402729: ret 0x7404; 
0x0000000000402139: ret 0x7408; 
0x000000000041b171: ret 0x7420; 
0x000000000040218c: ret 0x7440; 
0x000000000044b2b9: ret 0x7501; 
0x000000000044b2c6: ret 0x7502; 
0x000000000044b2d3: ret 0x7504; 
0x000000000044c6f4: ret 0x7508; 
0x000000000044b28b: ret 0x7510; 
0x0000000000429a5a: ret 0x7520; 
0x000000000044b2a5: ret 0x7540; 
0x0000000000419ffe: ret 0x7589; 
0x000000000048f9bd: ret 0x75e9; 
0x000000000047821b: ret 0x774; 
0x0000000000432052: ret 0x7777; 
0x000000000046c29c: ret 0x77e9; 
0x00000000004059c2: ret 0x7c8b; 
0x00000000004760d1: ret 0x7e20; 
0x000000000047634c: ret 0x7e40; 
0x0000000000429ffc: ret 0x7f10; 
0x00000000004231f5: ret 0x80; 
0x000000000042b1d9: ret 0x8000; 
0x000000000044f5ca: ret 0x8001; 
0x000000000042caa5: ret 0x8101; 
0x0000000000413dea: ret 0x8148; 
0x0000000000491c9a: ret 0x8166; 
0x0000000000411e4c: ret 0x820f; 
0x0000000000471e74: ret 0x82e9; 
0x000000000040ef01: ret 0x8301; 
0x0000000000416985: ret 0x8303; 
0x0000000000472ef5: ret 0x8304; 
0x000000000047f87b: ret 0x8305; 
0x000000000042cb75: ret 0x8308; 
0x000000000044f591: ret 0x830b; 
0x0000000000411542: ret 0x830f; 
0x000000000042cb40: ret 0x8310; 
0x000000000042cb12: ret 0x8320; 
0x000000000040198d: ret 0x8341; 
0x0000000000410090: ret 0x8348; 
0x000000000046ad7a: ret 0x8349; 
0x0000000000406466: ret 0x8401; 
0x000000000046c597: ret 0x8404; 
0x0000000000405977: ret 0x840f; 
0x000000000045d32e: ret 0x841; 
0x00000000004125d6: ret 0x8445; 
0x0000000000412b9c: ret 0x850f; 
0x0000000000413327: ret 0x8545; 
0x000000000041258c: ret 0x8548; 
0x0000000000465d20: ret 0x854d; 
0x0000000000468e50: ret 0x85c7; 
0x00000000004028fa: ret 0x860f; 
0x0000000000405bd4: ret 0x86e8; 
0x000000000041e832: ret 0x870f; 
0x00000000004761d5: ret 0x876; 
0x00000000004607fc: ret 0x87e9; 
0x000000000044f64c: ret 0x8801; 
0x00000000004179b1: ret 0x8901; 
0x0000000000404dfa: ret 0x8941; 
0x000000000047ccda: ret 0x8944; 
0x000000000040383b: ret 0x8948; 
0x000000000041bf19: ret 0x8949; 
0x000000000040ec1b: ret 0x894c; 
0x000000000046b342: ret 0x894d; 
0x0000000000485f4b: ret 0x894e; 
0x000000000048af3c: ret 0x8964; 
0x00000000004237af: ret 0x8b01; 
0x0000000000473336: ret 0x8b04; 
0x0000000000454337: ret 0x8b05; 
0x000000000048408e: ret 0x8b30; 
0x0000000000464c0f: ret 0x8b41; 
0x0000000000404856: ret 0x8b48; 
0x0000000000485ed2: ret 0x8b4a; 
0x000000000041260c: ret 0x8b4c; 
0x0000000000460085: ret 0x8d08; 
0x000000000046a95b: ret 0x8d0f; 
0x000000000045b04c: ret 0x8d47; 
0x0000000000410fc2: ret 0x8d48; 
0x0000000000421367: ret 0x8d49; 
0x000000000047ff31: ret 0x8d4a; 
0x00000000004698f0: ret 0x8d4b; 
0x0000000000481f86: ret 0x8d4c; 
0x0000000000421220: ret 0x8d4d; 
0x000000000046d338: ret 0x8d89; 
0x0000000000465aab: ret 0x8e0f; 
0x0000000000406191: ret 0x8f1; 
0x000000000048040d: ret 0x9066; 
0x000000000042918d: ret 0x90c3; 
0x00000000004217f4: ret 0x948; 
0x0000000000476698: ret 0x94c; 
0x0000000000487586: ret 0x950f; 
0x0000000000484ea1: ret 0x99e8; 
0x0000000000425b3a: ret 0x9ac; 
0x000000000048164d: ret 0x9de8; 
0x0000000000413d34: ret 0xa; 
0x000000000041e45a: ret 0xa1c; 
0x000000000041f556: ret 0xa36; 
0x00000000004836b7: ret 0xa3e8; 
0x000000000048d2b5: ret 0xa5e8; 
0x00000000004237b8: ret 0xa7e; 
0x0000000000483761: ret 0xa9e8; 
0x0000000000453c21: ret 0xabe; 
0x0000000000403cab: ret 0xb; 
0x0000000000468c8a: ret 0xb2; 
0x000000000045b3df: ret 0xb3e9; 
0x00000000004246f9: ret 0xb48b; 
0x000000000046d36a: ret 0xb589; 
0x0000000000413469: ret 0xb60f; 
0x000000000040227f: ret 0xb70f; 
0x000000000046e24b: ret 0xb8; 
0x0000000000472f22: ret 0xb804; 
0x0000000000424d39: ret 0xb817; 
0x000000000046de97: ret 0xb848; 
0x000000000048fffd: ret 0xbc80; 
0x000000000042b099: ret 0xc000; 
0x000000000040428e: ret 0xc031; 
0x0000000000414409: ret 0xc083; 
0x0000000000431140: ret 0xc085; 
0x00000000004210dd: ret 0xc148; 
0x000000000040120a: ret 0xc15; 
0x0000000000410f6a: ret 0xc200; 
0x0000000000433034: ret 0xc2b2; 
0x00000000004763b1: ret 0xc540; 
0x000000000047e0b2: ret 0xc6; 
0x0000000000411675: ret 0xc689; 
0x00000000004473d4: ret 0xc748; 
0x0000000000410866: ret 0xc776; 
0x000000000046d2fb: ret 0xc789; 
0x00000000004743ae: ret 0xc883; 
0x000000000046efc9: ret 0xc9e9; 
0x0000000000446fc5: ret 0xc9ff; 
0x000000000048af33: ret 0xca83; 
0x000000000045b5c7: ret 0xcde9; 
0x00000000004062de: ret 0xce80; 
0x000000000040588b: ret 0xcfe8; 
0x000000000044ebda: ret 0xcfe9; 
0x000000000046274f: ret 0xd108; 
0x0000000000457b34: ret 0xd17d; 
0x0000000000402678: ret 0xd284; 
0x0000000000473366: ret 0xd285; 
0x000000000046c341: ret 0xd2e9; 
0x000000000047c668: ret 0xd348; 
0x00000000004026dd: ret 0xd689; 
0x00000000004190ea: ret 0xd7; 
0x000000000047d677: ret 0xd74; 
0x000000000047be6b: ret 0xd75; 
0x0000000000494571: ret 0xd8c0; 
0x00000000004515ea: ret 0xd8f7; 
0x00000000004212f4: ret 0xd977; 
0x0000000000477ca3: ret 0xda72; 
0x000000000044ebcc: ret 0xda89; 
0x000000000048e0a3: ret 0xdb31; 
0x000000000041db85: ret 0xde9; 
0x000000000048a23d: ret 0xdeb; 
0x000000000046e51f: ret 0xe; 
0x000000000042af59: ret 0xe000; 
0x000000000044b24d: ret 0xe074; 
0x000000000041bd67: ret 0xe083; 
0x0000000000491717: ret 0xe172; 
0x000000000046e1fb: ret 0xe273; 
0x000000000040f2a5: ret 0xe281; 
0x0000000000401ea5: ret 0xe283; 
0x0000000000420c21: ret 0xe480; 
0x0000000000465a90: ret 0xe575; 
0x0000000000469c28: ret 0xe57f; 
0x000000000044e862: ret 0xe680; 
0x000000000047f574: ret 0xe6e8; 
0x0000000000494612: ret 0xe700; 
0x00000000004282f6: ret 0xe775; 
0x0000000000494597: ret 0xe780; 
0x000000000046d308: ret 0xe783; 
0x0000000000487b43: ret 0xe7f; 
0x0000000000431809: ret 0xe883; 
0x000000000047b942: ret 0xe8c0; 
0x0000000000429423: ret 0xe901; 
0x000000000041772e: ret 0xe902; 
0x000000000046c311: ret 0xe904; 
0x0000000000447066: ret 0xe908; 
0x0000000000442cf6: ret 0xe910; 
0x00000000004945c0: ret 0xe940; 
0x00000000004945e9: ret 0xe9c0; 
0x0000000000469f17: ret 0xe9f8; 
0x000000000040f381: ret 0xeab8; 
0x0000000000401e71: ret 0xeac1; 
0x000000000042fdba: ret 0xeb10; 
0x00000000004220e2: ret 0xeb75; 
0x000000000047d9a0: ret 0xec75; 
0x0000000000485d80: ret 0xed75; 
0x00000000004059af: ret 0xee75; 
0x000000000049463b: ret 0xef00; 
0x0000000000494664: ret 0xef60; 
0x000000000048f61c: ret 0xef89; 
0x000000000049468d: ret 0xefe0; 
0x000000000042ebae: ret 0xf; 
0x000000000040ad4d: ret 0xf00; 
0x000000000042ae19: ret 0xf000; 
0x0000000000404490: ret 0xf01; 
0x00000000004254ad: ret 0xf02; 
0x000000000042cba7: ret 0xf04; 
0x0000000000478443: ret 0xf07; 
0x000000000046d5b6: ret 0xf08; 
0x00000000004946b6: ret 0xf0a0; 
0x0000000000429fb2: ret 0xf10; 
0x00000000004946df: ret 0xf120; 
0x0000000000494708: ret 0xf180; 
0x0000000000494548: ret 0xf240; 
0x0000000000483c0a: ret 0xf30; 
0x000000000041d9fe: ret 0xf390; 
0x000000000044d259: ret 0xf40; 
0x0000000000404697: ret 0xf41; 
0x000000000046b46a: ret 0xf45; 
0x0000000000475801: ret 0xf475; 
0x000000000042901d: ret 0xf48; 
0x000000000046ac51: ret 0xf50; 
0x000000000042c9de: ret 0xf5c5; 
0x000000000048b382: ret 0xf604; 
0x000000000041cccc: ret 0xf66; 
0x0000000000406a1a: ret 0xf748; 
0x000000000048d6ba: ret 0xf759; 
0x0000000000477ee9: ret 0xf789; 
0x000000000048537a: ret 0xf7bc; 
0x0000000000491fe3: ret 0xf7e8; 
0x0000000000405a21: ret 0xf7f7; 
0x000000000042acd9: ret 0xf800; 
0x0000000000477da8: ret 0xf883; 
0x0000000000420777: ret 0xf8b; 
0x0000000000445ff6: ret 0xf8c5; 
0x00000000004930ea: ret 0xf937; 
0x00000000004666ba: ret 0xf9aa; 
0x000000000048a0ea: ret 0xf9c7; 
0x000000000046f70a: ret 0xfab9; 
0x000000000044e9cc: ret 0xfac1; 
0x00000000004728fa: ret 0xfb39; 
0x0000000000471a7e: ret 0xfb83; 
0x000000000042ab99: ret 0xfc00; 
0x0000000000428297: ret 0xfc3; 
0x000000000048185a: ret 0xfcff; 
0x000000000042aa59: ret 0xfe00; 
0x000000000042a919: ret 0xff00; 
0x000000000043a4e1: ret 0xff2; 
0x00000000004319c9: ret 0xff2d; 
0x000000000041a23e: ret 0xff3; 
0x000000000048c19a: ret 0xff4b; 
0x000000000042a7d9: ret 0xff80; 
0x000000000046afda: ret 0xff85; 
0x000000000040e80a: ret 0xff89; 
0x0000000000428bea: ret 0xff98; 
0x000000000040d40a: ret 0xff9d; 
0x0000000000426dca: ret 0xffa7; 
0x000000000041cfeb: ret 0xffb8; 
0x0000000000413d51: ret 0xffbe; 
0x000000000040f3d2: ret 0xffc0; 
0x000000000040a00a: ret 0xffd1; 
0x000000000040376a: ret 0xffd9; 
0x000000000042a559: ret 0xffe0; 
0x00000000004208aa: ret 0xffe2; 
0x0000000000409ec9: ret 0xffed; 
0x0000000000410641: ret 0xffef; 
0x00000000004282d1: ret 0xfff; 
0x000000000040f1c0: ret 0xfff0; 
0x000000000040df12: ret 0xfff2; 
0x000000000041686c: ret 0xfff3; 
0x0000000000456aea: ret 0xfff4; 
0x0000000000468576: ret 0xfff6; 
0x0000000000493bea: ret 0xfff7; 
0x000000000042a2d9: ret 0xfff8; 
0x000000000047f03a: ret 0xfff9; 
0x000000000047ed55: ret 0xfffa; 
0x000000000046a087: ret 0xfffb; 
0x0000000000412193: ret 0xfffc; 
0x0000000000492f47: ret 0xfffd; 
0x0000000000416df6: ret 0xfffe; 
0x000000000040af9f: ret 0xffff; 
0x000000000040416a: ret 1; 
0x0000000000422fc2: ret 2; 
0x0000000000404b58: ret 3; 
0x000000000043068e: ret 4; 
0x000000000043bae7: ret 5; 
0x0000000000454ec2: ret 6; 
0x000000000043034a: ret 7; 
0x0000000000431479: ret 8; 
0x0000000000426a12: ret 9; 
0x0000000000494903: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x2e612; syscall; 
0x000000000046c783: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x567a2; syscall; 
0x000000000046c4ff: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x56a22; syscall; 
0x000000000046a47b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x58a9e; syscall; 
0x000000000046a33b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x58bde; syscall; 
0x0000000000466873: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x5c6a2; syscall; 
0x00000000004667ae: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x5c767; syscall; 
0x000000000046660c: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x5c909; syscall; 
0x0000000000466532: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x5c9e3; syscall; 
0x0000000000458743: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x6b162; syscall; 
0x00000000004585d7: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x6b2ce; syscall; 
0x00000000004584b7: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x6b3ee; syscall; 
0x000000000044fa1f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x73e86; syscall; 
0x000000000042887f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x97f16; syscall; 
0x0000000000425c7f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x9ab16; syscall; 
0x0000000000425c1f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x9ab76; syscall; 
0x000000000042585f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x9af36; syscall; 
0x00000000004255ff: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x9b196; syscall; 
0x0000000000425027: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x9b76e; syscall; 
0x0000000000425027: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x9b76e; syscall; pop rbp; ret; 
0x0000000000424fef: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x9b7a6; syscall; 
0x0000000000426bdf: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x9c0c6; syscall; 
0x0000000000426193: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x9cb02; syscall; 
0x0000000000426193: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x9cb02; syscall; pop rbx; ret; 
0x00000000004222f0: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xa09a5; syscall; 
0x00000000004222bf: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xa09e6; syscall; 
0x000000000042203f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xa0c66; syscall; 
0x0000000000421b1b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xa118a; syscall; 
0x0000000000420731: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xa24f4; syscall; 
0x0000000000420731: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xa24f4; syscall; ret; 
0x0000000000420171: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xa2ab4; syscall; 
0x000000000041fe05: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xa2e20; syscall; 
0x000000000041fac3: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xa3162; syscall; 
0x000000000041e55d: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xa46c8; syscall; 
0x000000000041e2bd: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xa4968; syscall; 
0x000000000041df69: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xa4cbc; syscall; 
0x000000000041df69: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xa4cbc; syscall; ret; 
0x000000000041823f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xab666; syscall; 
0x000000000041034e: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xb33f7; syscall; 
0x000000000041020e: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xb3537; syscall; 
0x000000000040ffd7: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xb376e; syscall; 
0x000000000040ff9c: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xb37a9; syscall; 
0x000000000040feb8: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xb388d; syscall; 
0x00000000004068ec: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbbec1; syscall; 
0x0000000000404f49: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbd82c; syscall; 
0x0000000000403dea: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbe8e3; syscall; 
0x0000000000403dcd: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbe900; syscall; 
0x0000000000403cf7: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbe9d6; syscall; 
0x00000000004012c8: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xc14fd; syscall; 
0x0000000000418553: retf 0; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004281df: retf 0; add byte ptr [rdi], cl; add eax, 0xfffebee9; jmp qword ptr [rsi + 0xf]; 
0x0000000000424d0f: retf 0; add byte ptr [rdi], cl; add eax, 0xffff01e9; jmp qword ptr [rsi + 0xf]; 
0x000000000041dfc9: retf 0; add byte ptr [rdi], cl; add eax, 0xffff44e9; jmp qword ptr [rsi + 0x66]; 
0x0000000000422447: retf 0; add byte ptr [rdi], cl; add eax, 0xffff70e9; jmp qword ptr [rsi + 0x66]; 
0x000000000044d22b: retf 0x167e; movsxd rax, ecx; ret; 
0x0000000000428dc8: retf 0x1974; test byte ptr [rip + 0x99fb2], 0x40; lea rax, [rip + 0x1cd57]; lea rdx, [rip + 0x22400]; cmovne rax, rdx; ret; 
0x0000000000466b81: retf 0x3948; ret 0x820f; 
0x000000000048121d: retf 0x394c; ret 0x2275; 
0x000000000040fe20: retf 0x6411; xor rdx, qword ptr [0x30]; call rdx; 
0x0000000000477ef1: retf 0x8341; stc; add dword ptr [rdi + 0x30], esi; mov eax, 0x106; syscall; 
0x0000000000422132: retf 0x8348; ret 0x4810; 
0x000000000042fd5f: retf 0x8349; ret 0x7f10; 
0x0000000000442f57: retf 0x8349; ret 0xf10; 
0x0000000000490f9a: retf 0x894c; dec dword ptr [rcx - 0x73]; sbb al, 0xcc; mov rsi, qword ptr [rbx]; call rax; 
0x000000000048fc00: retf 0x894c; fild dword ptr [rcx + 0xf]; xchg ebp, eax; ret 0xf45; 
0x000000000048fb8a: retf 0x894c; fild dword ptr [rcx + 0xf]; xchg esp, eax; ret 0xf45; 
0x000000000048fbb0: retf 0x894c; fild dword ptr [rcx + 0xf]; lahf; ret 0xf45; 
0x000000000048fb9d: retf 0x894c; fild dword ptr [rcx + 0xf]; popfq; ret 0xf45; 
0x000000000048fc31: retf 0x894c; fild dword ptr [rcx + 0xf]; pushfq; ret 0xf45; 
0x000000000048fc1e: retf 0x894c; fild dword ptr [rcx + 0xf]; sahf; ret 0xf45; 
0x000000000041545b: retf 0x894c; fimul word ptr [rcx + rcx*4 - 0x19]; mov dword ptr [rbp - 0x4f0], r9d; call qword ptr [rax + 0x38]; 
0x0000000000414f1e: retf 0x894c; fimul word ptr [rcx + rcx*4 - 0x19]; mov dword ptr [rbp - 0x4f8], r9d; call qword ptr [rbx + 0x38]; 
0x000000000046d15c: retf 0x894c; out 0x4c, al; mov edi, ebp; call qword ptr [rcx + 0x38]; 
0x000000000047ddc7: retf 0x8b48; add cl, byte ptr [rax - 0x7b]; sal byte ptr [rax + rsi*2 + 0x48], 0x89; ret 0x8b48; 
0x000000000042fd86: retf 0xd; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044e75a: retf 0xd975; vzeroupper; ret; 
0x000000000044e597: retf 0xe175; vzeroupper; ret; 
0x0000000000466e87: retf 0xe273; mov rax, r8; ret; 
0x00000000004500cc: retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000446520: retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000004466e1: retf 0xf4c; stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000432bd6: retf 0xf66; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000467647: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x00000000004767ea: retf 0xfdc5; xlatb; ret; 
0x00000000004186ed: retf 0xfde8; sub dword ptr [rax], eax; add bl, ch; ret; 
0x00000000004199ea: retf 0xfffc; jmp qword ptr [rsi - 0x70]; 
0x000000000040b372: retf 0xfffd; jmp qword ptr [rsi + 0x2e]; 
0x000000000041fea3: retf 0xfffd; jmp qword ptr [rsi + 0xf]; 
0x00000000004632ba: retf 0xfffd; jmp qword ptr [rsi - 0x70]; 
0x0000000000440c2c: retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x0000000000426251: retf 9; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000426250: retfq 9; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000047612e: rol bl, 0x83; ret 0x6620; 
0x000000000044d801: rol byte ptr [r9 + 0xf], 1; adc dword ptr [rbx], esp; ret; 
0x000000000048aa03: rol byte ptr [r9 + rbp - 0x10], 0x39; ret 0x2476; 
0x000000000042b352: rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x000000000045036b: rol byte ptr [rax + 0x48], 1; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000446896: rol byte ptr [rax + 0x48], 1; clc; sub rax, rdx; vzeroupper; ret; 
0x00000000004313b6: rol byte ptr [rax + 0x48], 1; clc; vzeroupper; ret; 
0x0000000000446672: rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x0000000000404c94: rol byte ptr [rax + rax], 1; add byte ptr [rax - 0x77], cl; ret 0x448b; 
0x000000000045cc29: rol byte ptr [rax + rcx*2], 0x39; ret; 
0x00000000004617f0: rol byte ptr [rax + rcx*2], 0x83; ret; 
0x00000000004551ac: rol byte ptr [rax - 0x6af0ffc8], cl; ret 0x8348; 
0x000000000045597a: rol byte ptr [rax - 0x6af0ffc8], cl; ret 0x8d48; 
0x0000000000455959: rol byte ptr [rax - 0x6bf0ffc8], cl; ret 0x8d48; 
0x000000000040100a: rol byte ptr [rax], 0; add byte ptr [rax], al; test rax, rax; je 0x1016; call rax; 
0x000000000041b739: rol byte ptr [rax], 0; add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x000000000040f34c: rol byte ptr [rax], 0; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xd0], eax; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000431f5f: rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000455502: rol byte ptr [rax], 0; add dh, dh; ret 0x7404; 
0x000000000040f354: rol byte ptr [rax], 1; add byte ptr [rax], al; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000451773: rol byte ptr [rbp + 0x31], 1; shl byte ptr [rip + 0x410000], cl; cmp eax, 0x410000; je 0x517b0; mov eax, 0x101; syscall; 
0x0000000000466864: rol byte ptr [rbp + 0x31], cl; sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x5c6a2]; syscall; 
0x0000000000431222: rol byte ptr [rbp + 0x664975c0], 0xf; xlatb; ret 0xc085; 
0x000000000048de29: rol byte ptr [rbp - 0x7b], 0xc0; jne 0x8dd80; add rsp, 0x38; ret; 
0x00000000004850fb: rol byte ptr [rbx - 0x177cfd20], 1; ret; 
0x000000000047c438: rol byte ptr [rbx - 0x7a99fe20], 1; ror byte ptr [rdi], cl; xchg esp, eax; ret 0xb60f; 
0x00000000004774c2: rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x000000000042667b: rol byte ptr [rcx + 0x5c], 0x41; pop rbp; ret; 
0x0000000000427408: rol byte ptr [rcx + 0x5d], 0xc3; nop dword ptr [rax]; pop rbp; pop r12; pop r13; jmp rax; 
0x000000000044d802: rol byte ptr [rcx + 0xf], 1; adc dword ptr [rbx], esp; ret; 
0x000000000046b466: rol byte ptr [rcx + 0xf], cl; xchg esp, eax; ret 0xf45; 
0x0000000000451eb8: rol byte ptr [rcx + 0xf], cl; lahf; vpaddsw ymm0, ymm15, ymmword ptr [rcx + 0xf]; lahf; ret; 
0x000000000048aa04: rol byte ptr [rcx + rbp - 0x10], 0x39; ret 0x2476; 
0x0000000000472fff: rol byte ptr [rcx + rbp - 0x36], 0x39; ret 0x2b7c; 
0x0000000000476c65: rol byte ptr [rcx + rdi], 0xf2; je 0x76c6f; test edx, edx; jne 0x76c60; ret; 
0x00000000004711cb: rol byte ptr [rcx - 0x77], 1; ret 0x28e9; 
0x0000000000405a1e: rol byte ptr [rcx - 0x77], cl; ret 0xf7f7; 
0x00000000004774a2: rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x00000000004573be: rol byte ptr [rcx], 0x50; call rbx; 
0x0000000000406f3e: rol byte ptr [rcx], 0x88; dec qword ptr [rax - 0x7d]; ret 0x4901; 
0x00000000004690f3: rol byte ptr [rcx], 0xc7; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x000000000044ebc2: rol byte ptr [rcx], 0xf; scasd eax, dword ptr [rdi]; ret 0x518d; 
0x0000000000456ce2: rol byte ptr [rcx], 1; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000477502: rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x00000000004774b2: rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x000000000047dd7c: rol byte ptr [rdx], 1; add al, ch; cld; push rdx; clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000453340: rol byte ptr [rdx], cl; add byte ptr [rax], al; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004774f2: rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x000000000044dbc6: rol ch, 0x7e; jg 0x4dc0c; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000044dcf9: rol ch, 0x7e; jg 0x4dd3f; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x00000000004313cf: rol ch, 1; std; xlatb; ret; 
0x00000000004468bf: rol ch, cl; std; xlatb; ret 0xc085; 
0x0000000000476846: rol ch, cl; std; xlatb; ret; 
0x000000000047744c: rol dword ptr [rax + 0x1e740fe1], 1; ret; 
0x000000000044e590: rol dword ptr [rax + 0x48000000], 0x39; retf 0xe175; vzeroupper; ret; 
0x000000000044e36f: rol dword ptr [rax + 0xf], 1; mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000470b48: rol dword ptr [rax + rax], 1; mov r11, rcx; mov dword ptr [rbp - 0x4d0], 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x0000000000470e68: rol dword ptr [rax + rax], cl; mov r11, rcx; mov dword ptr [rbp - 0x508], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470e2e: rol dword ptr [rax + rax], cl; mov r11, rcx; mov dword ptr [rbp - 0x520], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000429a65: rol dword ptr [rax], 0; lea rdx, [rip + 0x11851]; cmovne rax, rdx; ret; 
0x000000000044e753: rol dword ptr [rax], 1; add byte ptr [rax], al; cmp rdx, rcx; jne 0x4e736; vzeroupper; ret; 
0x00000000004763d0: rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x0000000000476154: rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000426184: rol dword ptr [rbp + 0x31], 0xd2; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9cb02]; syscall; 
0x00000000004313c3: rol dword ptr [rbp - 0x3a378a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000446163: rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000476124: rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000446a97: rol dword ptr [rbp - 0x5f7af040], 0; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x0000000000476393: rol dword ptr [rbp - 0x6b7af040], 0; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x000000000046c9b2: rol dword ptr [rcx + 0x5c], 0x41; pop rbp; mov rax, r9; pop r14; ret; 
0x000000000045c30e: rol dword ptr [rcx - 0x77], cl; ret 0x5a58; 
0x000000000040198a: rol dword ptr [rcx - 0x77], cl; ret 0x8341; 
0x000000000045d80e: rol dword ptr [rdx + rdx*8 - 0x157e2a87], 1; ret 0; 
0x00000000004319c5: rol ebp, 1; stc; xlatb; ret 0xff2d; 
0x0000000000475f3b: ror byte ptr [rax + 0x29], 0xc2; jbe 0x761e0; add rax, rdi; add rax, rcx; ret; 
0x00000000004761a2: ror byte ptr [rax + 0x29], 0xc2; jbe 0x761e0; add rax, rdi; ret; 
0x00000000004761b2: ror byte ptr [rax + 0x29], 0xc2; jbe 0x761e0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004761c2: ror byte ptr [rax + 0x29], 0xc2; jbe 0x761e0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004761d2: ror byte ptr [rax + 0x29], 0xc2; jbe 0x761e0; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000476ceb: ror byte ptr [rax + 0x29], 0xc2; jbe 0x76f90; add rax, rdi; add rax, rcx; ret; 
0x0000000000476f52: ror byte ptr [rax + 0x29], 0xc2; jbe 0x76f90; add rax, rdi; ret; 
0x0000000000476f62: ror byte ptr [rax + 0x29], 0xc2; jbe 0x76f90; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000476f72: ror byte ptr [rax + 0x29], 0xc2; jbe 0x76f90; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000476f82: ror byte ptr [rax + 0x29], 0xc2; jbe 0x76f90; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000045007c: ror byte ptr [rax + 0x29], 1; clc; shr rax, 2; ret; 
0x0000000000446527: ror byte ptr [rax + 0x29], 1; clc; ret; 
0x00000000004763f3: ror byte ptr [rax + 0x39], 0xc2; jbe 0x76450; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000476413: ror byte ptr [rax + 0x39], 0xc2; jbe 0x76450; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000476433: ror byte ptr [rax + 0x39], 0xc2; jbe 0x76450; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x00000000004763e3: ror byte ptr [rax + 0x39], 0xc2; jbe 0x76450; add rax, rdi; vzeroupper; ret; 
0x00000000004771a3: ror byte ptr [rax + 0x39], 0xc2; jbe 0x77200; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x00000000004771c3: ror byte ptr [rax + 0x39], 0xc2; jbe 0x77200; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x00000000004771e3: ror byte ptr [rax + 0x39], 0xc2; jbe 0x77200; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000477193: ror byte ptr [rax + 0x39], 0xc2; jbe 0x77200; add rax, rdi; vzeroupper; ret; 
0x0000000000446ae3: ror byte ptr [rax + 0x39], 0xc6; jbe 0x46b60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000004210f0: ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000042558e: ror byte ptr [rax + 0x39], 1; ret; 
0x000000000045b042: ror byte ptr [rax + 0x39], cl; ret; 
0x00000000004905d6: ror byte ptr [rax + 0xf], 0x45; and al, 0x10; add rsp, 0x28; ret; 
0x0000000000446216: ror byte ptr [rax + 1], 0xc8; add rax, rdi; vzeroupper; ret; 
0x0000000000477568: ror byte ptr [rax + 1], 0xf8; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000004467a8: ror byte ptr [rax + 1], 0xf8; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x00000000004310fc: ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x00000000004312f8: ror byte ptr [rax + 1], 0xf8; add rax, rcx; vzeroupper; ret; 
0x00000000004503c3: ror byte ptr [rax + 1], 0xf8; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000446863: ror byte ptr [rax + 1], 0xf8; sub rax, rdx; vzeroupper; ret; 
0x0000000000431272: ror byte ptr [rax + 1], 0xf8; ret; 
0x0000000000431393: ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x0000000000406b5b: ror byte ptr [rax + 1], 1; ret; 
0x0000000000450079: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; shr rax, 2; ret; 
0x0000000000446524: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; ret; 
0x0000000000445eb5: ror byte ptr [rax + 9], 0xc8; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x00000000004314e6: ror byte ptr [rax - 0x2d], 0xfa; movzx edx, dl; sub eax, edx; ret; 
0x0000000000446466: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x46480; bsf rax, rdx; ret; 
0x0000000000446409: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x46490; bsf rax, rdx; ret; 
0x000000000047b276: ror byte ptr [rax - 0x3f], 0xef; add ah, byte ptr [rsi + 0xf]; jo 0x7b240; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000004501aa: ror byte ptr [rax - 0x3f], 1; call 0x77fdc6b4; ret; 
0x000000000045032e: ror byte ptr [rax - 0x3f], 1; call 0x77fdc838; ret; 
0x0000000000450352: ror byte ptr [rax - 0x3f], 1; call 0x77fdc85c; ret; 
0x0000000000450372: ror byte ptr [rax - 0x3f], 1; call 0x77fdc87c; ret; 
0x0000000000450392: ror byte ptr [rax - 0x3f], 1; call 0x77fdc89c; ret; 
0x00000000004503c9: ror byte ptr [rax - 0x3f], 1; call 0x77fdc8d3; ret; 
0x00000000004503ed: ror byte ptr [rax - 0x3f], 1; call 0x77fdc8f7; ret; 
0x000000000045040d: ror byte ptr [rax - 0x3f], 1; call 0x77fdc917; ret; 
0x0000000000450459: ror byte ptr [rax - 0x3f], 1; call 0x77fdc963; ret; 
0x0000000000477571: ror byte ptr [rax - 0x3f], 1; call 0x78003a7b; ret; 
0x0000000000477629: ror byte ptr [rax - 0x3f], 1; call 0x78003b33; ret; 
0x000000000047764d: ror byte ptr [rax - 0x3f], 1; call 0x78003b57; ret; 
0x000000000047766d: ror byte ptr [rax - 0x3f], 1; call 0x78003b77; ret; 
0x00000000004776b9: ror byte ptr [rax - 0x3f], 1; call 0x78003bc3; ret; 
0x0000000000429b21: ror byte ptr [rax - 0x73], 0x15; push rdi; add al, byte ptr [rax]; lea rax, [rip + 0x247e0]; cmovne rax, rdx; ret; 
0x0000000000429b02: ror byte ptr [rax - 0x73], 0x15; xchg byte ptr [rcx + 2], cl; add byte ptr [rax - 0x73], cl; add eax, 0x249cf; cmove rax, rdx; ret; 
0x00000000004128da: ror byte ptr [rax - 0x73], 0x34; ret; 
0x0000000000423f72: ror byte ptr [rax - 0x73], 0x3c; ret; 
0x0000000000465f35: ror byte ptr [rax - 0x73], 0x41; adc byte ptr [rdi], cl; sahf; ret 0x3949; 
0x0000000000431262: ror byte ptr [rax - 0x73], 0x44; cmp al, dh; ret; 
0x0000000000431292: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], ah; ret; 
0x0000000000431282: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], dl; ret; 
0x00000000004282cd: ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x00000000004755e1: ror byte ptr [rax - 0x73], 1; adc eax, 0x11d7; lea rax, [rip + 0xed0]; cmove rax, rdx; ret; 
0x00000000004290d1: ror byte ptr [rax - 0x73], 1; adc eax, 0x1d677; lea rax, [rip + 0x1d2b0]; cmove rax, rdx; ret; 
0x0000000000429111: ror byte ptr [rax - 0x73], 1; adc eax, 0x1d7d7; lea rax, [rip + 0x1d410]; cmove rax, rdx; ret; 
0x00000000004769f1: ror byte ptr [rax - 0x73], 1; adc eax, 0x5a7; lea rax, [rip + 0x270]; cmove rax, rdx; ret; 
0x0000000000429db1: ror byte ptr [rax - 0x73], 1; adc eax, 0x74e7; lea rax, [rip + 0x72d0]; cmove rax, rdx; ret; 
0x00000000004756a1: ror byte ptr [rax - 0x73], 1; adc eax, 0xb47; lea rax, [rip + 0x810]; cmove rax, rdx; ret; 
0x00000000004769b1: ror byte ptr [rax - 0x73], 1; adc eax, 0xb57; lea rax, [rip + 0x8b0]; cmove rax, rdx; ret; 
0x0000000000445feb: ror byte ptr [rax - 0x73], cl; add al, 7; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000046718e: ror byte ptr [rax - 0x75], 0x43; sbb byte ptr [rax + 0x2b], cl; sub byte ptr [r9 + r9*4 + 4], cl; ret 0x8b4c; 
0x0000000000422b10: ror byte ptr [rax - 0x75], 0x46; or byte ptr [rax - 0x77], cl; ret; 
0x000000000044fdd1: ror byte ptr [rax - 0x75], 0x4c; and al, 0x20; mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x00000000004846d6: ror byte ptr [rax - 0x75], 1; and al, 0x48; xor rcx, qword ptr fs:[0x28]; jne 0x84714; add rsp, 0x58; ret; 
0x0000000000484b66: ror byte ptr [rax - 0x75], 1; and al, 0x48; xor rcx, qword ptr fs:[0x28]; jne 0x84ba4; add rsp, 0x58; ret; 
0x0000000000484848: ror byte ptr [rax - 0x75], 1; and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x84894; add rsp, 0x68; ret; 
0x0000000000474359: ror byte ptr [rax - 0x77], 0x48; adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm0; ret; 
0x000000000041e652: ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000477faf: ror byte ptr [rax - 0x77], 0xe2; mov eax, 0x10; syscall; 
0x000000000040640e: ror byte ptr [rax - 0x77], 1; fisttp word ptr [rdi]; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000004847c2: ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x000000000040f2a2: ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x0000000000419b89: ror byte ptr [rax - 0x77], 1; ret; 
0x000000000041cf75: ror byte ptr [rax - 0x7b], 0xd2; jne 0x1cf80; ret; 
0x00000000004810fe: ror byte ptr [rax - 0x7b], 0xf6; je 0x81107; mov qword ptr [rsi], rdi; mov rax, r8; ret; 
0x00000000004220d4: ror byte ptr [rax - 0x7d], 0xc0; adc byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x11; add byte ptr [rax + 0x39], cl; ret 0xeb75; 
0x0000000000450403: ror byte ptr [rax - 0x7d], 0xc0; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000446893: ror byte ptr [rax - 0x7d], 0xc0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000004313b3: ror byte ptr [rax - 0x7d], 0xc0; add rax, rdi; vzeroupper; ret; 
0x0000000000446873: ror byte ptr [rax - 0x7d], 0xc0; and byte ptr [rax + 1], cl; clc; sub rax, rdx; vzeroupper; ret; 
0x00000000004313a3: ror byte ptr [rax - 0x7d], 0xc0; and byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x000000000044eaae: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000041e6d9: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000048b8cb: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000477f77: ror byte ptr [rax - 0x7d], 0xc4; pop rax; ret; 
0x0000000000491b89: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000041dcd5: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004913ef: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; ret; 
0x00000000004704d1: ror byte ptr [rax - 0x7d], 1; mov ebp, 0xfffffb18; add byte ptr [rcx - 0x77], al; ret 0x1d74; 
0x0000000000473333: ror byte ptr [rax - 0x7d], 1; ret 0x8b04; 
0x000000000045cc26: ror byte ptr [rax - 0x7d], 1; rol byte ptr [rax + rcx*2], 0x39; ret; 
0x000000000047eb56: ror byte ptr [rax - 0x7d], 1; ret; 
0x00000000004179ae: ror byte ptr [rax - 0x7d], cl; ret 0x8901; 
0x000000000044d1ab: ror byte ptr [rax - 0x7f], 0xc4; add byte ptr [rcx], al; add byte ptr [rax], al; sub rax, rdx; ret; 
0x000000000040f3c0: ror byte ptr [rax - 0x7f], 0xc4; sbb byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x000000000044d1a8: ror byte ptr [rax - 1], 0xc0; add rsp, 0x100; sub rax, rdx; ret; 
0x000000000044d1a5: ror byte ptr [rax - 1], 0xc0; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000481173: ror byte ptr [rax - 9], 0xd8; test cl, cl; cmove r8, rax; mov rax, r8; ret; 
0x000000000045b3c8: ror byte ptr [rbp - 0x77], 0xf9; push rax; push rbp; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x60]; call rbx; 
0x000000000047fe3e: ror byte ptr [rbp - 0x7b], cl; dec dword ptr [rax - 0x77]; mov r8b, 0xf; xchg ebp, eax; ret 0x2148; 
0x000000000046a90a: ror byte ptr [rbp - 0x7b], cl; inc dword ptr [rcx + 0xf]; xchg esp, eax; ret 0x8545; 
0x0000000000450c93: ror byte ptr [rbx + 0x3108247c], 0xc0; syscall; 
0x0000000000451858: ror byte ptr [rcx + 0x12eb8fe], cl; add byte ptr [rax], al; xor edi, edi; syscall; 
0x000000000042e3f3: ror byte ptr [rcx + 0x29], cl; sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000045ff78: ror byte ptr [rcx + 0x3948fc51], cl; ret; 
0x000000000048757a: ror byte ptr [rcx + 0x438b4803], cl; sbb byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x000000000041d346: ror byte ptr [rcx + 0x63], 4; or dword ptr [rcx + rax - 0x28], 0x3e; jmp rax; 
0x000000000046c5d4: ror byte ptr [rcx + rcx*4 + 0x2b], 0x5b; pop rbp; pop r12; pop r13; ret; 
0x000000000045bcc6: ror byte ptr [rcx + rcx*4 + 0x5c], 0x24; sub byte ptr [rcx - 0x77], cl; ret; 
0x000000000044f1c8: ror byte ptr [rcx + rcx*4 - 0x19], 0x4c; lea ecx, [rsp + 0x30]; call rbx; 
0x000000000040f39b: ror byte ptr [rcx + rcx*4 - 0x32], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000041011a: ror byte ptr [rcx + rcx*4 - 0x40], 0x5b; pop rbp; ret; 
0x0000000000411df3: ror byte ptr [rcx + rcx*4 - 0xa], cl; mov rdi, r15; mov dword ptr [rbp - 0x94c], r9d; mov dword ptr [rbp - 0x940], r11d; call rax; 
0x00000000004766ac: ror byte ptr [rcx + riz - 0x3e], 0x48; cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000004621ea: ror byte ptr [rcx - 0x2d94b73b], 1; push -0x1605feb4; ret 0xfffe; 
0x000000000046a768: ror byte ptr [rcx - 0x3f], 0xe3; and byte ptr [rcx + 9], cl; ret; 
0x000000000044eb1a: ror byte ptr [rcx - 0x765df00f], 1; ret 0xe283; 
0x000000000045261e: ror byte ptr [rcx - 0x77], 1; or byte ptr [r9 - 0x75], cl; add dword ptr [rbx + 0x94901e0], eax; ret; 
0x000000000045e64c: ror byte ptr [rcx - 0x7d], cl; ret 0x4b01; 
0x0000000000418b26: ror byte ptr [rcx - 0xc916ed], 0xff; jmp qword ptr [rsi - 0x70]; 
0x0000000000426be7: ror byte ptr [rcx], 0; syscall; 
0x000000000042355d: ror byte ptr [rcx], cl; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000464f12: ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x000000000041a182: ror byte ptr [rdi], 0x11; add ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret 0x34e9; 
0x00000000004220dc: ror byte ptr [rdi], 0x11; add byte ptr [rax + 0x39], cl; ret 0xeb75; 
0x000000000041f708: ror byte ptr [rdi], 0x11; cmp r11b, r13b; test al, 0x90; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x000000000041b24d: ror byte ptr [rdi], 0x11; or byte ptr [r15], cl; adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x0000000000420447: ror byte ptr [rdi], 0x11; pop rbx; ret; 
0x000000000045167b: ror byte ptr [rdi], 0x1f; add byte ptr [rax - 0x39], cl; ret 0xffc0; 
0x00000000004541c0: ror byte ptr [rdi], 0x44; ret 0x66c3; 
0x000000000048af39: ror byte ptr [rdi], 0x45; ret 0x8964; 
0x0000000000418451: ror byte ptr [rdi], 0x84; mov dword ptr [rax], 0x89480000; ret; 
0x0000000000426337: ror byte ptr [rdi], 0x84; ret 0; 
0x0000000000404b55: ror byte ptr [rdi], 0x84; ret 3; 
0x0000000000418550: ror byte ptr [rdi], 0x84; retf 0; add byte ptr [rax - 0x77], cl; ret; 
0x000000000046321f: ror byte ptr [rdi], 0x84; leave; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x0000000000402401: ror byte ptr [rdi], 0x84; nop; add al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000415c4f: ror byte ptr [rdi], 0x84; ret; 
0x0000000000452d57: ror byte ptr [rdi], 0x85; adc eax, 0x49000007; mov edi, dword ptr [rdi]; call rbx; 
0x000000000045bcbe: ror byte ptr [rdi], 0x85; add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 + 0x5c], 0x24; sub byte ptr [rcx - 0x77], cl; ret; 
0x0000000000452bc5: ror byte ptr [rdi], 0x85; jg 0x52bcd; add byte ptr [rax], al; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000424f85: ror byte ptr [rdi], 0x85; jl 0x24f8a; add byte ptr [rax], al; sub dword ptr [rip + 0x9b80d], 1; pop rbp; ret; 
0x0000000000484f25: ror byte ptr [rdi], 0x85; jl 0x84f2a; add byte ptr [rax], al; mov rcx, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x0000000000452dde: ror byte ptr [rdi], 0x85; mov al, 2; add byte ptr [rax], al; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452d2a: ror byte ptr [rdi], 0x85; mov byte ptr [rdx], al; add byte ptr [rax], al; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000467662: ror byte ptr [rdi], 0x85; push rdi; or al, 0; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000452d84: ror byte ptr [rdi], 0x85; ret 4; 
0x000000000045a91c: ror byte ptr [rdi], 0x85; ret; 
0x0000000000487583: ror byte ptr [rdi], 0x94; ret 0x950f; 
0x0000000000489a4d: ror byte ptr [rdi], 0x94; ret 0xb60f; 
0x0000000000462bc8: ror byte ptr [rdi], 0x94; ret; 
0x000000000048b8c8: ror byte ptr [rdi], 0x95; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000044d749: ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x000000000040f2b7: ror byte ptr [rdi], 1; mov dh, 0x11; test dl, dl; jne 0xf298; ret; 
0x00000000004282ef: ror byte ptr [rdi], 1; mov dh, 0x14; add dword ptr [rax + rdi - 0x3e], eax; jne 0x282e0; sub rax, 0x10; ret; 
0x00000000004758e2: ror byte ptr [rdi], 1; test byte ptr [rcx], ch; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000431436: ror byte ptr [rdi], 1; test dword ptr [rax + rax - 0x8b70000], ecx; ret 2; 
0x00000000004517f5: ror byte ptr [rdi], 5; cmp rax, -0x1000; ja 0x51808; ret; 
0x000000000045cac3: ror byte ptr [rdi], cl; mov byte ptr [rsi], cl; add al, 0; add bh, dh; ret 0xf800; 
0x000000000045d04b: ror byte ptr [rdi], cl; mov ch, ah; add al, byte ptr [rax]; add bh, dh; ret 0xf800; 
0x00000000004573b9: ror byte ptr [rdi], cl; mov dh, 0xc0; add eax, 1; push rax; call rbx; 
0x000000000046d5e1: ror byte ptr [rdi], cl; mov dl, dl; sbb al, 0; add dh, dh; ret 0xf40; 
0x0000000000404c91: ror byte ptr [rdi], cl; test al, dl; add al, 0; add byte ptr [rax - 0x77], cl; ret 0x448b; 
0x000000000044ff5f: ror byte ptr [rdi], cl; test byte ptr [rdx + 0x48000000], bl; bsf eax, edx; shr rax, 2; ret; 
0x00000000004465cb: ror byte ptr [rdi], cl; test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x00000000004758fa: ror byte ptr [rdi], cl; test byte ptr [rsi], bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000041d4f4: ror byte ptr [rdi], cl; test ch, dh; add dword ptr [rax], eax; add byte ptr [rdi + rcx - 0x42], cl; ret 0x4a8d; 
0x000000000047c43e: ror byte ptr [rdi], cl; xchg esp, eax; ret 0xb60f; 
0x000000000044feac: ror byte ptr [rdx - 0x3417fffc], 1; xor ebx, edi; jmp qword ptr [rsi + 0x2e]; 
0x00000000004755ec: ror byte ptr [rsi], 1; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000004782fe: ror cl, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000004765aa: ror dword ptr [rax + 0x21], 0xce; je 0x766e0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000048100c: ror dword ptr [rax + 0x39], 0xd1; jne 0x80fe8; mov eax, dword ptr [rcx]; ret; 
0x000000000045afcd: ror dword ptr [rax + 0x39], 1; ret; 
0x000000000042261e: ror dword ptr [rax + 0xf], 1; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x0000000000478879: ror dword ptr [rax - 0x37140008], cl; nop; ret; 
0x0000000000446519: ror dword ptr [rax - 0x3f], 0xe1; and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000465afd: ror dword ptr [rax - 0x73], 0x41; adc byte ptr [rdi], cl; xchg ebx, eax; ret 0x3949; 
0x000000000047c665: ror dword ptr [rax - 0x77], 1; ret 0xd348; 
0x000000000041e5f5: ror dword ptr [rax - 0x7b], 0xd2; jne 0x1e5e8; ret; 
0x00000000004742dd: ror dword ptr [rax - 0x7b], 0xd2; jne 0x742d0; ret; 
0x0000000000446462: ror dword ptr [rax - 0x7d], 0xe0; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x46480; bsf rax, rdx; ret; 
0x0000000000446405: ror dword ptr [rax - 0x7d], 0xe0; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x46490; bsf rax, rdx; ret; 
0x000000000040ed4a: ror dword ptr [rax - 0x7d], 1; ret 0x4001; 
0x000000000041f1ab: ror dword ptr [rax - 0x7d], 1; ret 0x4801; 
0x0000000000430be3: ror dword ptr [rax - 0x7d], 1; ret 0x4c20; 
0x0000000000430c03: ror dword ptr [rax - 0x7d], 1; ret 0x4c40; 
0x0000000000430c23: ror dword ptr [rax - 0x7d], 1; ret 0x4c60; 
0x00000000004693b9: ror dword ptr [rax], 0x22; add byte ptr [rax - 0x77], r9b; fimul dword ptr [rax + 0x29]; ret 0x2948; 
0x0000000000489848: ror dword ptr [rax], 0x83; ret 0x4801; 
0x00000000004531bf: ror dword ptr [rax], 1; add byte ptr [rax], al; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000044e9c3: ror dword ptr [rbp - 0xb869], cl; dec dword ptr [rax + 0x63]; ret 0xfac1; 
0x000000000041f3b5: ror dword ptr [rcx + 0x1b80045], 0; add byte ptr [rax], al; movups xmmword ptr [rbp + 0x38], xmm0; pop rbp; pop r12; ret; 
0x000000000044e895: ror dword ptr [rcx + 0xe181d0], 0xfc; add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; ret; 
0x000000000042ca7e: ror dword ptr [rcx + rax - 0x3f], 1; movzx eax, byte ptr [rax + rcx + 0x40]; movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000418729: ror dword ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r15; call qword ptr [rbp + 0x38]; 
0x0000000000466f0e: ror dword ptr [rcx + rcx*4 - 0x40], 1; ret; 
0x0000000000485f48: ror dword ptr [rcx + rdx - 0x3e], 0x4e; mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000044b24b: ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000429dab: ror dword ptr [rdi + 0x39480009], 1; ror byte ptr [rax - 0x73], 1; adc eax, 0x74e7; lea rax, [rip + 0x72d0]; cmove rax, rdx; ret; 
0x000000000041ec54: ror dword ptr [rdi], 0x11; cmp byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x000000000042464a: ror dword ptr [rdi], 0x11; push 0x6e0f4966; ret; 
0x00000000004749b9: ror dword ptr [rdi], 0x11; xor byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x0000000000494b4e: ror dword ptr [rdi], 0x84; add dword ptr [rax], r8d; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000004662fa: ror dword ptr [rdi], 0x84; ret 2; 
0x00000000004327c8: ror dword ptr [rdi], 0x85; adc byte ptr [rdx], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000432ed4: ror dword ptr [rdi], 0x85; add al, 3; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000432ca6: ror dword ptr [rdi], 0x85; add eax, 0xc0310000; ret; 
0x0000000000432c26: ror dword ptr [rdi], 0x85; cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0xc0310000; ret; 
0x0000000000432f64: ror dword ptr [rdi], 0x85; je 0x32f6b; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000432a5b: ror dword ptr [rdi], 0x85; jno 0x32a67; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000432b23: ror dword ptr [rdi], 0x85; mov ch, 6; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004327a0: ror dword ptr [rdi], 0x85; sub al, 0xa; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000047049a: ror dword ptr [rdi], 0x8d; iretd; or eax, dword ptr [rax]; add byte ptr [rcx - 0x77], cl; ret 0xb8; 
0x000000000047b7f4: ror dword ptr [rdi], 0xb6; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x0000000000424679: ror dword ptr [rdi], cl; xchg ebp, eax; ret 0xb60f; 
0x000000000048e0cd: ror dword ptr [rdi], cl; xchg esp, eax; ret; 
0x000000000040fe3d: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000040fe1f: ror edx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000041e5f4: ror qword ptr [r8 - 0x7b], 0xd2; jne 0x1e5e8; ret; 
0x00000000004742dc: ror qword ptr [r8 - 0x7b], 0xd2; jne 0x742d0; ret; 
0x000000000040fe3c: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000040fe1e: ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000048b8d2: sal bh, 0xd8; ret; 
0x000000000042b1d7: sal bh, 1; ret 0x8000; 
0x000000000042b097: sal bh, 1; ret 0xc000; 
0x000000000042af57: sal bh, 1; ret 0xe000; 
0x000000000042ae17: sal bh, 1; ret 0xf000; 
0x000000000042acd7: sal bh, 1; ret 0xf800; 
0x000000000042ab97: sal bh, 1; ret 0xfc00; 
0x000000000042aa57: sal bh, 1; ret 0xfe00; 
0x000000000042a917: sal bh, 1; ret 0xff00; 
0x000000000042a7d7: sal bh, 1; ret 0xff80; 
0x000000000042a697: sal bh, 1; ret 0xffc0; 
0x000000000042a557: sal bh, 1; ret 0xffe0; 
0x000000000042a417: sal bh, 1; ret 0xfff0; 
0x000000000042a2d7: sal bh, 1; ret 0xfff8; 
0x000000000042a197: sal bh, 1; ret 0xfffc; 
0x000000000042a057: sal bh, 1; ret 0xfffe; 
0x000000000046a264: sal bh, cl; int1; add r8d, eax; mov eax, r8d; ret; 
0x000000000043138f: sal bl, 1; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000406409: sal byte ptr [rax + rbx + 0xf], 0xb6; ror byte ptr [rax - 0x77], 1; fisttp word ptr [rdi]; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000487935: sal byte ptr [rax + rcx + 0x5b], 0x5d; pop r12; ret; 
0x0000000000454d1d: sal byte ptr [rax + rdx + 0x48], cl; lea edi, [rcx + rsi + 0x20]; jmp rdx; 
0x000000000047904d: sal byte ptr [rax + riz - 0x75], 0x35; push 4; add byte ptr [rbp - 0x7d7af00a], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000047ddcd: sal byte ptr [rax + rsi*2 + 0x48], 0x89; ret 0x8b48; 
0x0000000000450cfd: sal byte ptr [rbp + 0x10], 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000041df3d: sal byte ptr [rbp + 0x10], cl; sub dword ptr [rip + 0xa4ce9], 1; ret; 
0x0000000000482694: sal byte ptr [rbp + 0x19], 0x48; mov dword ptr [rbx], 0; pop rbx; or dword ptr [rip + 0x3ea62], 1; ret; 
0x0000000000450312: sal byte ptr [rbp + 0x2b], 0x4c; mov eax, eax; shr rax, 2; vzeroupper; ret; 
0x0000000000446ad2: sal byte ptr [rbp + 0x2b], 0x4c; mov eax, eax; vzeroupper; ret; 
0x0000000000477bd1: sal byte ptr [rbp + 0x2c], 0x83; imul eax, dword ptr [rcx + rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000046c72f: sal byte ptr [rbp + 0x36], 0x83; sub eax, 0x567f7; add dword ptr [rcx + rcx*4 - 0x40], eax; pop rbx; ret; 
0x0000000000452e34: sal byte ptr [rbp + 0x3b], 0x49; mov edi, dword ptr [rdi]; call rbx; 
0x0000000000431242: sal byte ptr [rbp + 0x4b], 0x66; pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000048710b: sal byte ptr [rbp + 0x62], 0xc7; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x0000000000450b66: sal byte ptr [rbp + 0x67], 0x44; mov edx, esp; mov rsi, rbp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000452e5d: sal byte ptr [rbp + 0x7d], 0x49; mov edi, dword ptr [rdi]; call rbx; 
0x00000000004668bb: sal byte ptr [rbp + 0xa], 0xe9; lea edx, [rbx + 0x1f0ffffa]; add byte ptr [rax], r8b; xor eax, eax; ret; 
0x000000000042624b: sal byte ptr [rbp + 0xb], 0xc7; add eax, 0x9ca48; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000454352: sal byte ptr [rbp + 0xb], cl; ret; 
0x0000000000420709: sal byte ptr [rbp + 0xc], cl; sub dword ptr [rip + 0xa251d], 1; ret; 
0x000000000047f3ef: sal byte ptr [rbp + 2], cl; call rax; 
0x0000000000487fca: sal byte ptr [rbp + 3], cl; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000044e366: sal byte ptr [rbp + 4], cl; mov rax, rdi; ret; 
0x000000000041cf78: sal byte ptr [rbp + 5], cl; ret; 
0x000000000046c8c7: sal byte ptr [rbp + 6], cl; sub dword ptr [rdi], 1; ret; 
0x0000000000446210: sal byte ptr [rbp + rbx - 0xd], 0xf; mov esp, 0xc80148c0; add rax, rdi; vzeroupper; ret; 
0x000000000044ffe0: sal byte ptr [rbp + rcx + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x0000000000477448: sal byte ptr [rbp + rdx - 0x78], cl; rol dword ptr [rax + 0x1e740fe1], 1; ret; 
0x000000000044cf80: sal byte ptr [rbp - 0x13], cl; lea rax, [rcx - 1]; ret; 
0x000000000041e5f8: sal byte ptr [rbp - 0x13], cl; ret; 
0x000000000042b4fb: sal byte ptr [rbp - 0x1e], 0x31; shr byte ptr [rcx], 0xc8; ret; 
0x00000000004212c6: sal byte ptr [rbp - 0x21], cl; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x000000000040f2bc: sal byte ptr [rbp - 0x27], cl; ret; 
0x0000000000462759: sal byte ptr [rbp - 0x2c], 0x41; mov byte ptr [rsp], 0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004313cd: sal byte ptr [rbp - 0x30], 0xc5; std; xlatb; ret; 
0x00000000004313c5: sal byte ptr [rbp - 0x38], 0xc5; std; xlatb; ret 0xc085; 
0x000000000044616d: sal byte ptr [rbp - 0x50], 0xc5; std; xlatb; ret; 
0x0000000000446165: sal byte ptr [rbp - 0x68], 0xc5; std; xlatb; ret 0xc085; 
0x0000000000476c6c: sal byte ptr [rbp - 0xf], cl; ret; 
0x0000000000420790: sal byte ptr [rbx + 0x25], 1; movzx eax, byte ptr [rax]; ret; 
0x0000000000419962: sal byte ptr [rbx + rbp*2 + 0x49], 0x2b; and byte ptr [r8 + 1], r9b; ret; 
0x00000000004312f2: sal byte ptr [rbx + rbx - 0xd], 0xf; mov esp, 0xf80148c0; add rax, rcx; vzeroupper; ret; 
0x000000000047add4: sal byte ptr [rcx + rbp*2 - 0x75], 5; ret; 
0x000000000044646c: sal byte ptr [rcx + rdx + 0x48], cl; bsf eax, edx; ret; 
0x000000000048ce2f: sal byte ptr [rcx + riz - 0x73], cl; dec dword ptr [rbp + r9*4 + 0x74]; ret; 
0x0000000000475e42: sal byte ptr [rcx + riz*2 + 0x48], 3; add byte ptr [r8 - 0x77], r9b; ret 0x14eb; 
0x00000000004573b5: sal byte ptr [rcx], 0xc9; xor edx, edx; movzx eax, al; add eax, 1; push rax; call rbx; 
0x0000000000446123: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000446143: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000446181: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000446103: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000004210ee: sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000044e975: sal byte ptr [rcx], 1; shl byte ptr [rip + 0x3fffc00], cl; div ecx; mov eax, eax; ret; 
0x0000000000481d2a: sal byte ptr [rdi + 0xb], 0x48; add esp, 8; ret; 
0x00000000004786f6: sal byte ptr [rdi + riz + 0x48], 0x89; ret; 
0x0000000000401011: sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000487696: sal byte ptr [rdx + rcx + 0x48], 0x8d; adc eax, 0x3a400; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000401d3d: sal byte ptr [rdx + rcx - 0x41], 0x30; adc byte ptr [rbx], cl; call 0x92880; mov byte ptr [rip + 0xc04cf], 1; pop rbp; ret; 
0x0000000000447073: sal byte ptr [rdx + rdx + 0x48], 0xff; ret 0x2288; 
0x000000000044ffcb: sal byte ptr [rdx + riz + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x000000000044663b: sal byte ptr [rdx + riz + 0x48], cl; bsf eax, edx; ret; 
0x000000000040f1bb: sal byte ptr [rdx + rsi*2 + 0x48], 0xc7; ret 0xfff0; 
0x000000000043304f: sal byte ptr [rdx - 0x10f0992e], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000433170: sal byte ptr [rdx - 0x10f09930], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000041f32b: sal byte ptr [rsi + 0x12], 0x48; mov eax, dword ptr [rbx + 0x48]; add rsp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x000000000041eea9: sal byte ptr [rsi + 0x14], 0x48; mov eax, dword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004554ed: sal byte ptr [rsi + rbp + 0x48], 0x8b; push rax; or byte ptr [rcx + 0x3e895], cl; add dh, dh; ret 0x7402; 
0x00000000004871f6: sal byte ptr [rsi + rcx + 0x48], 0x8d; add eax, 0x3bde0; mov qword ptr [rip + 0x3bdc1], rax; add rsp, 8; ret; 
0x000000000044640f: sal byte ptr [rsi + rdi*2 + 0x48], cl; bsf eax, edx; ret; 
0x00000000004310f7: sal byte ptr [rsi + rdx + 0xf], 0xbc; ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x000000000048d453: sal byte ptr [rsp + 0x48], 1; ret 0xb70f; 
0x0000000000482361: sal byte ptr [rsp + rdi + 0x48], 0x89; ret; 
0x000000000046e893: sal dh, 0xff; dec dword ptr [rbx + rcx*4 - 0x5b]; clc; idiv bh; jmp qword ptr [rsi - 0x70]; 
0x000000000047a61c: sal dh, 1; ret 0xf08; 
0x000000000048100f: sal dword ptr [rbp - 0x2a], 1; mov eax, dword ptr [rcx]; ret; 
0x0000000000494cc6: sal dword ptr [rcx + rcx*4 + 0x48], 0x89; ret 0xc148; 
0x0000000000432faf: sal dword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004330ef: sal dword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042e3f6: sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042114b: sal ebp, 1; or dword ptr [rax], eax; ret; 
0x000000000044d6a7: sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000470c13: sal ecx, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000432fae: sal qword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004330ee: sal qword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004907bd: sar ah, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004833f0: sar ah, 1; jmp qword ptr [rsi + 0x66]; 
0x00000000004826b7: sar bh, 0xff; call ptr [rbx + 0x64]; mov eax, dword ptr [rax]; ret; 
0x0000000000477c41: sar bh, 0xff; call qword ptr [rbx + 0x64]; 
0x0000000000403e80: sar bh, 0xff; dec dword ptr [rax - 0x39]; ret; 
0x0000000000424353: sar bh, 0xff; inc dword ptr [rbp + 0x31]; shl byte ptr [rdi + rax*8], 0xc; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x00000000004509e7: sar bh, 0xff; push rdi; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000450a8b: sar bh, 0xff; push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000450cc3: sar bh, 0xff; push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000487072: sar bh, 0xff; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000048719f: sar bh, 0xff; sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000487095: sar bh, 0xff; ret; 
0x00000000004215e0: sar bl, 1; std; jmp qword ptr [rsi + 0x66]; 
0x0000000000487c22: sar byte ptr [r8 + 0xd9], 1; syscall; 
0x0000000000487c22: sar byte ptr [r8 + 0xd9], 1; syscall; cmp rax, -0x1000; ja 0x87c38; ret; 
0x000000000042157b: sar byte ptr [rax + 0x10], 0x48; cmovne eax, edx; mov qword ptr [rip + 0xa172c], rax; ret; 
0x000000000041b1eb: sar byte ptr [rax + 0x29], 0x48; mov dword ptr [rbx + 0x90], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000494590: sar byte ptr [rax + 0x48ffffff], 0xc7; ret 0xe780; 
0x0000000000487c23: sar byte ptr [rax + 0xd9], 1; syscall; 
0x0000000000487c23: sar byte ptr [rax + 0xd9], 1; syscall; cmp rax, -0x1000; ja 0x87c38; ret; 
0x0000000000451922: sar byte ptr [rax - 0x4f], 0x48; add esp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000480a20: sar byte ptr [rbp + rbp*8 - 0x15], cl; ret; 
0x0000000000450be7: sar byte ptr [rdi - 0x64], 0xb8; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000004948f7: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x2e612]; syscall; 
0x000000000046c777: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x567a2]; syscall; 
0x000000000046c4f3: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x56a22]; syscall; 
0x000000000046a46f: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x58a9e]; syscall; 
0x000000000046a32f: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x58bde]; syscall; 
0x0000000000466867: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x5c6a2]; syscall; 
0x00000000004667a2: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x5c767]; syscall; 
0x0000000000466600: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x5c909]; syscall; 
0x0000000000466526: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x5c9e3]; syscall; 
0x0000000000458737: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x6b162]; syscall; 
0x00000000004585cb: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x6b2ce]; syscall; 
0x00000000004584ab: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x6b3ee]; syscall; 
0x000000000044fa13: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x73e86]; syscall; 
0x0000000000428873: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x97f16]; syscall; 
0x0000000000425c73: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9ab16]; syscall; 
0x0000000000425c13: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9ab76]; syscall; 
0x0000000000425853: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9af36]; syscall; 
0x00000000004255f3: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9b196]; syscall; 
0x000000000042501b: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9b76e]; syscall; 
0x0000000000424fe3: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9b7a6]; syscall; 
0x0000000000426bd3: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9c0c6]; syscall; 
0x0000000000426187: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9cb02]; syscall; 
0x00000000004222e4: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa09a5]; syscall; 
0x00000000004222b3: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa09e6]; syscall; 
0x0000000000422033: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa0c66]; syscall; 
0x0000000000421b0f: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa118a]; syscall; 
0x0000000000420725: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa24f4]; syscall; 
0x0000000000420165: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa2ab4]; syscall; 
0x000000000041fdf9: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa2e20]; syscall; 
0x000000000041fab7: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa3162]; syscall; 
0x000000000041e551: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa46c8]; syscall; 
0x000000000041e2b1: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa4968]; syscall; 
0x000000000041df5d: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa4cbc]; syscall; 
0x0000000000418233: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xab666]; syscall; 
0x0000000000410342: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb33f7]; syscall; 
0x0000000000410202: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb3537]; syscall; 
0x000000000040ffcb: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb376e]; syscall; 
0x000000000040ff90: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb37a9]; syscall; 
0x000000000040feac: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb388d]; syscall; 
0x00000000004068e0: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbbec1]; syscall; 
0x0000000000404f3d: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbd82c]; syscall; 
0x0000000000403dde: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbe8e3]; syscall; 
0x0000000000403dc1: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbe900]; syscall; 
0x0000000000403ceb: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbe9d6]; syscall; 
0x00000000004012bc: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xc14fd]; syscall; 
0x000000000040142b: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000046c8d9: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x000000000042615c: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, ebx; syscall; 
0x0000000000425ffc: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov rdi, r12; mov eax, 0xca; syscall; 
0x000000000042758f: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov rdi, r13; mov eax, 0xca; syscall; 
0x00000000004281d0: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov rdi, r15; mov eax, 0xca; syscall; 
0x0000000000422e91: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov rdi, rbp; mov eax, 0xca; syscall; 
0x0000000000426f55: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000421119: sar byte ptr [rdx + 2], cl; mov esi, 0x80; mov eax, 0xca; syscall; 
0x0000000000445b79: sar byte ptr [rdx], 0x48; lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000487b4a: sar byte ptr [rdx], cl; cmp edx, ecx; jle 0x87bf0; ret; 
0x0000000000429b9c: sar byte ptr [rip - 0x72b7fffe], 5; or dword ptr [rsi], edi; add al, byte ptr [rax]; cmove rax, rdx; ret; 
0x0000000000462499: sar byte ptr [rsi + 0x24], 0x83; call 0x848ada3; pop rbx; ret; 
0x000000000043379a: sar byte ptr [rsi], 0x41; jmp rcx; 
0x0000000000401be7: sar byte ptr [rsi], 1; jmp rax; 
0x000000000043e4db: sar ch, 0xff; jmp qword ptr [rdx - 0xf]; 
0x000000000043de99: sar dword ptr [rax + rcx*2 + 0x11], 1; imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043dea0: sar dword ptr [rax + rcx*2 + 0x11], 1; jno 0x3dea4; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043dea7: sar dword ptr [rax + rcx*2 + 0x11], 1; jns 0x3deac; ret; 
0x000000000044e8f2: sar dword ptr [rax], 1; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x000000000044e290: sar dword ptr [rbp + 0x48], 1; out 0x49, eax; jmp qword ptr [rdx - 0x2f]; 
0x0000000000487b41: sar dword ptr [rcx], 0xc2; jg 0x87b54; pcmpistri xmm2, xmm2, 0x3a; cmp edx, ecx; jle 0x87bf0; ret; 
0x0000000000468745: sar dword ptr [rcx], cl; ret 0x4d74; 
0x000000000044dbcd: sar dword ptr [rsi + 0x7f], 0x23; vzeroupper; ret; 
0x000000000049057c: sar eax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000048bb0c: sar eax, 3; pop rbx; pop rbp; pop r12; ret; 
0x00000000004314e2: sar eax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000044e10d: sar ebp, 1; jg 0x4e15b; jmp qword ptr [rdx - 0x2f]; 
0x000000000046f94e: sar ebp, 2; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x000000000046fe4b: sar ebx, 2; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x00000000004752ac: sar ecx, 2; lea eax, [rcx - 1]; ret; 
0x000000000040df0a: sar edi, 1; inc dword ptr [rbx - 0x7af0fe08]; ret 0xfff2; 
0x0000000000455e87: sar edx, 1; jmp qword ptr [rsi + 0xf]; 
0x0000000000475356: sar edx, 2; sub eax, edx; ret; 
0x00000000004314e8: sar edx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000446468: sar edx, cl; test rdx, rdx; je 0x46480; bsf rax, rdx; ret; 
0x000000000044640b: sar edx, cl; test rdx, rdx; je 0x46490; bsf rax, rdx; ret; 
0x0000000000446637: sar edx, cl; test rdx, rdx; je 0x46660; bsf rax, rdx; ret; 
0x00000000004465c7: sar edx, cl; test rdx, rdx; je 0x46670; bsf rax, rdx; ret; 
0x000000000044ffc7: sar edx, cl; test rdx, rdx; je 0x4fff0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000044ff5b: sar edx, cl; test rdx, rdx; je 0x50000; bsf rax, rdx; shr rax, 2; ret; 
0x000000000041e59d: sar esi, 0xff; inc dword ptr [rbp + 0x31]; sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000044e087: sar esi, 1; jg 0x4e0af; vzeroupper; ret; 
0x000000000044e212: sar esi, 1; jg 0x4e23a; vzeroupper; ret; 
0x0000000000487497: sar esp, 1; jmp qword ptr [rsi + 0xf]; 
0x000000000046f94d: sar r13, 2; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x000000000049057b: sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000048bb0b: sar rax, 3; pop rbx; pop rbp; pop r12; ret; 
0x00000000004314e1: sar rax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000046fe4a: sar rbx, 2; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x00000000004752ab: sar rcx, 2; lea eax, [rcx - 1]; ret; 
0x0000000000475355: sar rdx, 2; sub eax, edx; ret; 
0x00000000004314e7: sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000446467: sar rdx, cl; test rdx, rdx; je 0x46480; bsf rax, rdx; ret; 
0x000000000044640a: sar rdx, cl; test rdx, rdx; je 0x46490; bsf rax, rdx; ret; 
0x0000000000446636: sar rdx, cl; test rdx, rdx; je 0x46660; bsf rax, rdx; ret; 
0x00000000004465c6: sar rdx, cl; test rdx, rdx; je 0x46670; bsf rax, rdx; ret; 
0x000000000044ffc6: sar rdx, cl; test rdx, rdx; je 0x4fff0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000044ff5a: sar rdx, cl; test rdx, rdx; je 0x50000; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000472275: sbb al, 0; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000451ad5: sbb al, 0; add byte ptr [rax], al; syscall; 
0x0000000000451ad5: sbb al, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x51ae4; ret; 
0x000000000046d5e5: sbb al, 0; add dh, dh; ret 0xf40; 
0x00000000004017b4: sbb al, 0; test al, al; jne 0x17bb; ret; 
0x0000000000454697: sbb al, 0x48; cmp edx, dword ptr [rdi + 0x18]; ja 0x546b4; mov qword ptr [rdi + 0x20], rdx; mov byte ptr [rdi + 0x28], 1; ret; 
0x000000000047d92b: sbb al, 0xba; add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000490fa0: sbb al, 0xcc; mov rsi, qword ptr [rbx]; call rax; 
0x000000000048fa67: sbb al, 0xf7; dec dword ptr [rbp - 0x75]; adc cl, byte ptr [rcx + 1]; ret 0xef89; 
0x0000000000490463: sbb al, byte ptr [rax]; add byte ptr [rax], al; mov edi, 1; call rax; 
0x00000000004787b5: sbb al, byte ptr [rbx]; add al, ch; ret; 
0x0000000000408dcb: sbb al, ch; jmp rbx; 
0x0000000000403768: sbb al, ch; ret 0xffd9; 
0x00000000004878e7: sbb al, ch; ret; 
0x0000000000424982: sbb bh, byte ptr [rsi - 0x7cb5fff7]; xor qword ptr [rax], r9; add dword ptr [rax + 0x39], ecx; ret; 
0x000000000045164f: sbb bl, al; nop dword ptr [rax]; mov rdx, rsp; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000426943: sbb bl, al; nop dword ptr [rax]; mov rsi, qword ptr [rsp + 0x18]; add rsp, 0x18; jmp rax; 
0x000000000044ad9a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000044a6da: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000044ad5b: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000044a69b: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000044ad99: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000044a6d9: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000044ad5a: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000044a69a: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000041e7af: sbb byte ptr [r11 + 0x480c2474], cl; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000041e64d: sbb byte ptr [r14 + 0xf], r12b; insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000041b254: sbb byte ptr [r15], cl; adc dword ptr [rbx + 0x28], eax; pop rbx; ret; 
0x0000000000467191: sbb byte ptr [r8 + 0x2b], cl; sub byte ptr [r9 + r9*4 + 4], cl; ret 0x8b4c; 
0x000000000042148b: sbb byte ptr [r8 + 0x39], cl; ret; 
0x0000000000484498: sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000048757f: sbb byte ptr [r8 - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x00000000004746cd: sbb byte ptr [r9 + r9*4 - 0x1a], al; pop rbx; mov rdi, rbp; pop rbp; pop r12; jmp rax; 
0x0000000000493357: sbb byte ptr [r9 - 0x75], r9b; push rbp; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000467192: sbb byte ptr [rax + 0x2b], cl; sub byte ptr [r9 + r9*4 + 4], cl; ret 0x8b4c; 
0x000000000040f2b4: sbb byte ptr [rax + 0x31], cl; ror byte ptr [rdi], 1; mov dh, 0x11; test dl, dl; jne 0xf298; ret; 
0x000000000042148c: sbb byte ptr [rax + 0x39], cl; ret; 
0x0000000000454703: sbb byte ptr [rax + 0x3b], cl; sbb byte ptr [rdi + 0x12], sil; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x0000000000484499: sbb byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x000000000047e9a3: sbb byte ptr [rax + rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000004017c8: sbb byte ptr [rax + rax], cl; add byte ptr [rax], al; add byte ptr [rax], al; pop rdx; ret; 
0x0000000000450c8b: sbb byte ptr [rax - 0x75], cl; je 0x50cb4; adc byte ptr [rcx - 0x77], al; ror byte ptr [rbx + 0x3108247c], 0xc0; syscall; 
0x000000000045a4b1: sbb byte ptr [rax - 0x75], cl; je 0x5a4da; pop rax; mov rdi, qword ptr [rsp + 0x60]; call rbx; 
0x000000000045b9e3: sbb byte ptr [rax - 0x75], cl; je 0x5ba0c; push rax; mov rdi, qword ptr [rsp + 0x58]; call rbx; 
0x000000000045ed01: sbb byte ptr [rax - 0x75], cl; je 0x5ed2a; pop rax; mov rdi, qword ptr [rsp + 0x50]; call rbx; 
0x000000000040fe53: sbb byte ptr [rax - 0x75], cl; jo 0xfe78; mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000049101a: sbb byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret; 
0x000000000041e656: sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000425e69: sbb byte ptr [rax - 0x77], cl; out dx, eax; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000040405a: sbb byte ptr [rax - 0x77], cl; ret 0x2548; 
0x0000000000403838: sbb byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000004915d8: sbb byte ptr [rax - 0x77], cl; ret 0xe783; 
0x0000000000487580: sbb byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x000000000041a360: sbb byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000046ca50: sbb byte ptr [rax], al; add al, 0; add al, ch; xchg esi, eax; ret 0xfffb; 
0x0000000000450c58: sbb byte ptr [rax], al; add byte ptr [rax], al; test eax, eax; jne 0x50c70; syscall; 
0x0000000000450cf8: sbb byte ptr [rax], al; add byte ptr [rax], al; test eax, eax; jne 0x50d10; mov eax, 1; syscall; 
0x000000000041df38: sbb byte ptr [rax], al; add byte ptr [rax], al; test edx, edx; jne 0x1df50; sub dword ptr [rip + 0xa4ce9], 1; ret; 
0x0000000000420704: sbb byte ptr [rax], al; add byte ptr [rax], al; test edx, edx; jne 0x20718; sub dword ptr [rip + 0xa251d], 1; ret; 
0x000000000046c8c2: sbb byte ptr [rax], al; add byte ptr [rax], al; test edx, edx; jne 0x6c8d0; sub dword ptr [rdi], 1; ret; 
0x00000000004509d5: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x00000000004509d5: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x509e4; ret; 
0x0000000000415685: sbb byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x00000000004949ec: sbb byte ptr [rax], al; je 0x949d8; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x000000000041e7b0: sbb byte ptr [rbx + 0x480c2474], cl; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004914a2: sbb byte ptr [rbx + 0x5d], bl; mov eax, r8d; ret; 
0x0000000000426434: sbb byte ptr [rbx + 0x5d], bl; pop r12; jmp rax; 
0x0000000000417627: sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000419ce9: sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000042031b: sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000048ae64: sbb byte ptr [rbx], al; add byte ptr [rax], al; lea rsi, [rip + 0x38a11]; mov edi, 0x3005; mov eax, 0x9e; syscall; 
0x000000000040ec18: sbb byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000422626: sbb byte ptr [rcx + 1], cl; ret; 
0x0000000000423bbc: sbb byte ptr [rcx + rcx*4 + 0x44], cl; and al, 0x10; call rax; 
0x000000000040a004: sbb byte ptr [rcx + rcx*4 + 4], cl; and al, 0xe8; ret 0xffd1; 
0x00000000004881e9: sbb byte ptr [rcx + rcx*4 - 0x18], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004746ce: sbb byte ptr [rcx + rcx*4 - 0x1a], al; pop rbx; mov rdi, rbp; pop rbp; pop r12; jmp rax; 
0x000000000044fc54: sbb byte ptr [rcx + rcx*4 - 0x1f], cl; mov rdx, r13; call rbx; 
0x000000000045406b: sbb byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000041775f: sbb byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000041115b: sbb byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004101bc: sbb byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; ret; 
0x0000000000428144: sbb byte ptr [rcx - 0x17f7dbac], cl; test al, 0xff; dec dword ptr [rbx + 0x9082454]; ret 0x37e9; 
0x0000000000493358: sbb byte ptr [rcx - 0x75], cl; push rbp; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000411e9f: sbb byte ptr [rcx - 0x75], cl; push rsi; and byte ptr [rcx + rcx*4 - 1], cl; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000040ec2d: sbb byte ptr [rcx - 0x77], cl; ret 0x1574; 
0x000000000040f3c4: sbb byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x000000000041a333: sbb byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x0000000000454707: sbb byte ptr [rdi + 0x12], dh; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x0000000000454706: sbb byte ptr [rdi + 0x12], sil; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000045469b: sbb byte ptr [rdi + 0x16], dh; mov qword ptr [rdi + 0x20], rdx; mov byte ptr [rdi + 0x28], 1; ret; 
0x0000000000454729: sbb byte ptr [rdi - 0x10], bh; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x00000000004546c1: sbb byte ptr [rdi - 0x10], bh; mov qword ptr [rdi + 0x20], rdx; mov byte ptr [rdi + 0x28], 1; ret; 
0x0000000000454728: sbb byte ptr [rdi - 0x10], dil; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000047e224: sbb byte ptr [rdi], ch; add al, 0; xor eax, eax; add rsp, 8; ret; 
0x000000000041b255: sbb byte ptr [rdi], cl; adc dword ptr [rbx + 0x28], eax; pop rbx; ret; 
0x00000000004882c0: sbb byte ptr [rdx + rax], bh; lea rdi, [rip + 0x27c25]; call 0x3080; endbr64; ret; 
0x0000000000489f45: sbb byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000474aa6: sbb byte ptr [rsi + 0x1f], dh; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000404df6: sbb byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x8941; 
0x000000000041e64e: sbb byte ptr [rsi + 0xf], ah; insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000463a67: sbb cl, byte ptr [rax - 0x77]; ret 0x2548; 
0x0000000000456e8c: sbb cl, byte ptr [rax - 0x77]; ret 0x8948; 
0x0000000000486f95: sbb cl, byte ptr [rax - 0x7b]; div byte ptr [rbp + 0x25]; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000044384d: sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004454aa: sbb cl, byte ptr [rdi]; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x0000000000444cca: sbb cl, byte ptr [rdi]; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x00000000004450ba: sbb cl, byte ptr [rdi]; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004448da: sbb cl, byte ptr [rdi]; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004443ad: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000443b8d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000044336d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x0000000000444a79: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000443ecd: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004436ad: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000442e8d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000044406d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x0000000000444f6a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044478a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044589a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004431cd: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000443303: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000444003: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000443b23: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000444e6b: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044579b: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000444343: sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000443643: sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x0000000000443163: sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000443e63: sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x0000000000444fbb: sbb cl, byte ptr [rdi]; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004447db: sbb cl, byte ptr [rdi]; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000048fc83: sbb dh, bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000492060: sbb dh, dh; ret 0xf01; 
0x0000000000421115: sbb dl, byte ptr [rax - 0x452dcebb]; add al, byte ptr [rax]; add byte ptr [rax], al; mov esi, 0x80; mov eax, 0xca; syscall; 
0x0000000000481d87: sbb dword ptr [rax + rax], eax; add byte ptr [rbp + 0x13], dh; mov r8, qword ptr [rip + 0x4157c]; mov rax, r8; ret; 
0x00000000004878e2: sbb dword ptr [rax - 0x75], ecx; jl 0x8790b; sbb al, ch; ret; 
0x0000000000402ce4: sbb dword ptr [rax - 0x77], ecx; or byte ptr [rax + 0x9e], r15b; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000487026: sbb dword ptr [rax - 0x7b], ecx; div byte ptr [rbp + 0x2c]; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000454238: sbb dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000454238: sbb dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x54247; ret; 
0x0000000000415430: sbb dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000041442b: sbb dword ptr [rax], eax; add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x0000000000424620: sbb dword ptr [rcx - 4], -1; jmp qword ptr [rsi + 0x49]; 
0x000000000044cc57: sbb eax, -1; ret; 
0x000000000042070e: sbb eax, 0x1000a25; ret; 
0x0000000000452091: sbb eax, 0x1f0f3ceb; add byte ptr [rax - 0x73], cl; push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x00000000004932d5: sbb eax, 0x2f936; test rbx, rbx; jne 0x932c0; pop rbx; ret; 
0x000000000047e232: sbb eax, 0x4000003; xor eax, eax; ret; 
0x000000000047e2e2: sbb eax, 0x4000003; ret; 
0x000000000040fc92: sbb eax, 0x441f0f; add byte ptr [rbx + rcx*4 + 0x63], cl; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000043ad45: sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043ad40: sbb eax, 0x477f0ff3; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000047974e: sbb eax, 0x48d4890; int 0; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000047069f: sbb eax, 0x490004db; mov ebx, ecx; mov dword ptr [rbp - 0x528], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000452a22: sbb eax, 0x7d8b49; call rbx; 
0x000000000047b93d: sbb eax, 0x89000003; ret 0xe8c0; 
0x00000000004206b1: sbb eax, 0xa2582; add dword ptr [rip + 0xa2577], 1; pop rbx; ret; 
0x000000000047aff3: sbb eax, 0xb2c6e801; cli; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000446212: sbb eax, 0xc0bc0ff3; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x000000000042c932: sbb eax, 0xcfbc0ff3; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000041cf57: sbb eax, 0xe6ebe074; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000401c95: sbb eax, 0xe8670040; xor al, byte ptr [rip - 0x6f0c0000]; endbr64; ret; 
0x000000000040c4c5: sbb eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fc08], al; xchg esi, eax; sbb eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fe08], al; ret; 
0x000000000040c4ce: sbb eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fe08], al; ret; 
0x0000000000420722: sbb eax, dword ptr [rbp + 0x31]; sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa24f4]; syscall; 
0x000000000041df5a: sbb eax, dword ptr [rbp + 0x31]; sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa4cbc]; syscall; 
0x00000000004012b9: sbb eax, dword ptr [rbp + 0x31]; sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xc14fd]; syscall; 
0x00000000004850fa: sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000431947: sbb eax, eax; or eax, 1; ret; 
0x000000000044cc55: sbb eax, eax; sbb eax, -1; ret; 
0x0000000000490f23: sbb eax, eax; ret; 
0x0000000000461571: sbb edi, edx; jmp qword ptr [rsi + 0x2e]; 
0x0000000000486e05: sbb edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000421513: sbb edx, esi; or dword ptr [rax], eax; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x9f1ee], rax; ret; 
0x0000000000415f61: sbb esi, dword ptr [rdx - 0x7160002]; in al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004312f4: sbb esi, ebx; bsf eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x0000000000428dca: sbb esi, esi; add eax, 0x99fb2; lea rax, [rip + 0x1cd57]; lea rdx, [rip + 0x22400]; cmovne rax, rdx; ret; 
0x000000000048aeba: sbb esi, esi; and esi, 2; syscall; 
0x0000000000486e04: sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000478077: scasb al, byte ptr [rdi]; add al, 0; cmp rdi, rax; ja 0x780a8; xor eax, eax; ret; 
0x0000000000429bee: scasb al, byte ptr [rdi]; add al, byte ptr [r8]; lea rax, [rip + 0x241f7]; cmove rax, rdx; ret; 
0x0000000000430aa2: scasb al, byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004454fe: scasb al, byte ptr [rdi]; add eax, 0x83480000; ret 0xe910; 
0x000000000045823b: scasb al, byte ptr [rdi]; cli; jmp qword ptr [rsi - 0x70]; 
0x000000000049038e: scasd eax, dword ptr [rdi]; adc esi, edi; jmp qword ptr [rsi + 0x66]; 
0x00000000004455fd: scasd eax, dword ptr [rdi]; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000456cde: scasd eax, dword ptr [rdi]; add rsp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000481d20: scasd eax, dword ptr [rdi]; nop dword ptr [rax]; cmp rax, r8; ja 0x81d38; add rsp, 8; ret; 
0x0000000000425867: scasd eax, dword ptr [rdi]; or dword ptr [rax], eax; syscall; 
0x0000000000419670: scasd eax, dword ptr [rdi]; ret 0x2948; 
0x000000000044ebc5: scasd eax, dword ptr [rdi]; ret 0x518d; 
0x0000000000481159: scasd eax, dword ptr [rdi]; ret 0x8348; 
0x0000000000422621: scasd eax, dword ptr [rdi]; ret 0x8948; 
0x000000000044ebd9: scasd eax, dword ptr [rdi]; ret 0xcfe9; 
0x000000000044ebcb: scasd eax, dword ptr [rdi]; ret 0xda89; 
0x0000000000417e4e: scasd eax, dword ptr [rdi]; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000419830: scasd eax, dword ptr [rdi]; ret; 
0x00000000004017b1: seta al; sbb al, 0; test al, al; jne 0x17bb; ret; 
0x00000000004210f4: setae al; ret; 
0x0000000000403127: sete ah; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000464eea: sete dh; xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x0000000000403126: sete r12b; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000464ee9: sete sil; xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x000000000048b8c9: setne al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x00000000004693b2: shl byte ptr [rax + 0x1b], 0x4c; add byte ptr [rax - 0x39], cl; ror dword ptr [rax], 0x22; add byte ptr [rax - 0x77], r9b; fimul dword ptr [rax + 0x29]; ret 0x2948; 
0x000000000045038b: shl byte ptr [rax + 0x48], 1; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000004468e2: shl byte ptr [rax + 0x48], 1; clc; sub rax, rdx; vzeroupper; ret; 
0x00000000004313e4: shl byte ptr [rax + 0x48], 1; clc; vzeroupper; ret; 
0x000000000049456a: shl byte ptr [rax + 0x48ffffff], 0xc7; ret 0xd8c0; 
0x000000000045034b: shl byte ptr [rax], 0x48; add eax, edi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000446876: shl byte ptr [rax], 0x48; add eax, edi; sub rax, rdx; vzeroupper; ret; 
0x00000000004313a6: shl byte ptr [rax], 0x48; add eax, edi; vzeroupper; ret; 
0x0000000000424359: shl byte ptr [rdi + rax*8], 0xc; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x000000000044e977: shl byte ptr [rip + 0x3fffc00], cl; div ecx; mov eax, eax; ret; 
0x0000000000451776: shl byte ptr [rip + 0x410000], cl; cmp eax, 0x410000; je 0x517b0; mov eax, 0x101; syscall; 
0x000000000044ce9f: shl byte ptr [rsi + 0x44], 0xf; out dx, eax; ret 0xf66; 
0x000000000047cd2a: shl byte ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; shl dword ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0x290f; 
0x000000000044b247: shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000445d35: shl byte ptr [rsi + 0xf], 0xeb; ret 0xf66; 
0x000000000043315b: shl byte ptr [rsi + 0xf], 0xef; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x00000000004870f5: shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0x110f; 
0x00000000004834b9: shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0xf41; 
0x0000000000433172: shl byte ptr [rsi + 0xf], 1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x0000000000476647: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000476636: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x0000000000433051: shl byte ptr [rsi + 0xf], cl; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000428e3c: shl byte ptr [rsi], 1; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x0000000000454361: shl dword ptr [rbx], 0x4e; adc byte ptr [rax - 0x73], cl; or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x00000000004834b4: shl dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0xf41; 
0x000000000041a17e: shl dword ptr [rsi + 0xf], 0x6c; ror byte ptr [rdi], 0x11; add ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret 0x34e9; 
0x000000000044b23f: shl dword ptr [rsi + 0xf], 0x74; fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000476632: shl dword ptr [rsi + 0xf], 0xd7; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x000000000044ccff: shl dword ptr [rsi + 0xf], 0xda; ret; 
0x00000000004330d6: shl dword ptr [rsi + 0xf], 0xef; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043318d: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x2373; 
0x0000000000433176: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000043315f: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x0000000000431c1b: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004330f1: shl dword ptr [rsi + 0xf], 1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043113c: shl dword ptr [rsi + 0xf], 1; xlatb; ret 0xc085; 
0x000000000047cd2f: shl dword ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0x290f; 
0x000000000042104c: shl dword ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0x4d83; 
0x0000000000432fb1: shl dword ptr [rsi + 0xf], cl; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004822d6: shl eax, 4; mov rax, qword ptr [rdx + rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x0000000000456d07: shl eax, cl; ret; 
0x000000000044651b: shl ecx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000456d02: shl ecx, 3; pop r12; shl eax, cl; ret; 
0x0000000000482320: shl ecx, 4; cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x822d5; xor eax, eax; ret; 
0x000000000048587c: shl ecx, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x00000000004857fb: shl ecx, cl; mov qword ptr [rdi - 8], r9; ret; 
0x00000000004857ca: shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000445eba: shl edx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x0000000000454646: shl edx, 4; mov rdx, qword ptr [rcx + rdx]; lea rcx, [rip - 0x64]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000486fd3: shl esi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000048587b: shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x00000000004857fa: shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x00000000004857c9: shl r9, cl; mov qword ptr [rdi], r9; ret; 
0x00000000004822d5: shl rax, 4; mov rax, qword ptr [rdx + rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000044651a: shl rcx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000048231f: shl rcx, 4; cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x822d5; xor eax, eax; ret; 
0x0000000000445eb9: shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x0000000000454645: shl rdx, 4; mov rdx, qword ptr [rcx + rdx]; lea rcx, [rip - 0x64]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000486fd2: shl rsi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000485874: shld eax, ecx, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x00000000004857f4: shld eax, ecx, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000485873: shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x00000000004857f3: shld r8, r9, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000458828: shr al, 0x22; mov edx, edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000454cb5: shr al, 5; ret 2; 
0x0000000000477e07: shr bl, 0xb8; call 0x545a0; nop; endbr64; mov eax, 0x3f; syscall; 
0x0000000000487fe1: shr bl, 0xcf; nop dword ptr [rax]; call rax; 
0x000000000045e8a0: shr bl, 1; ret 0x1f0f; 
0x000000000047974c: shr bl, cl; sbb eax, 0x48d4890; int 0; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004945b9: shr byte ptr [rax + 0x48ffffff], 0xc7; ret 0xe940; 
0x000000000042b4ff: shr byte ptr [rcx], 0xc8; ret; 
0x0000000000461938: shr byte ptr [rcx], cl; ret; 
0x000000000044ef8e: shr byte ptr [rdx + 1], cl; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000473d8b: shr cl, 0x23; fprem; jmp qword ptr [rsi + 0x2e]; 
0x0000000000418b91: shr cl, 0x55; mov esi, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000044b28e: shr dword ptr [rax - 0x267af0e0], 1; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x0000000000414291: shr dword ptr [rcx], cl; ret; 
0x000000000044e87b: shr eax, 0xe; and eax, 0x3fc00; ret; 
0x00000000004653de: shr eax, 1; imul rax, rdi; lea r12, [rcx + rax]; mov r13, rax; mov rdi, r12; call rbx; 
0x000000000044ff6b: shr eax, 2; ret; 
0x00000000004501ac: shr eax, 2; vzeroupper; ret; 
0x000000000040ff3d: shr eax, 3; lea r12, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000421190: shr eax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x9f5b2], rdx; ret; 
0x000000000044e8c6: shr eax, 6; and eax, 0x3fffc00; ret; 
0x00000000004108fa: shr eax, cl; or byte ptr [rax], 0xff; dec dword ptr [rcx - 0x77]; ret; 
0x0000000000424c4f: shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbp; ret; 
0x000000000048598c: shr ecx, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000485915: shr ecx, cl; mov qword ptr [rdi + 8], r9; ret; 
0x00000000004858e4: shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000048f970: shr ecx, cl; ret 0xfffc; 
0x000000000040f2b2: shr edx, 0x18; xor rax, rdx; movzx edx, byte ptr [rcx]; test dl, dl; jne 0xf298; ret; 
0x000000000048598b: shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000485914: shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x00000000004858e3: shr r9, cl; mov qword ptr [rdi], r9; ret; 
0x00000000004653dd: shr rax, 1; imul rax, rdi; lea r12, [rcx + rax]; mov r13, rax; mov rdi, r12; call rbx; 
0x000000000044ff6a: shr rax, 2; ret; 
0x00000000004501ab: shr rax, 2; vzeroupper; ret; 
0x000000000040ff3c: shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x000000000042118f: shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x9f5b2], rdx; ret; 
0x000000000040f2b1: shr rdx, 0x18; xor rax, rdx; movzx edx, byte ptr [rcx]; test dl, dl; jne 0xf298; ret; 
0x0000000000485984: shrd eax, ecx, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000048590e: shrd eax, ecx, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000485983: shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000048590d: shrd r8, r9, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000044b135: shufps xmm0, xmmword ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000446f15: shufps xmm0, xmmword ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000428e36: sldt word ptr [rax]; lea rdx, [rip + 0x26d0]; cmovne rax, rdx; ret; 
0x000000000041274a: sldt word ptr [rax]; mov rdx, rbx; mov rsi, r12; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000045a5d2: stosb byte ptr [rdi], al; mov bh, dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000044e378: stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000422ae2: stosb byte ptr [rdi], al; nop dword ptr [rax + rax]; call rax; 
0x000000000042826e: stosb byte ptr [rdi], al; or dword ptr [rax], eax; add dword ptr [rax - 0x77], ecx; ret 0x3174; 
0x000000000044f072: stosb byte ptr [rdi], al; out 6, eax; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000456a96: stosb byte ptr [rdi], al; ret 6; 
0x0000000000450074: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x00000000004466e4: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000454cc1: stosd dword ptr [rdi], eax; mov bh, 0xff; jmp qword ptr [rsi + 0x66]; 
0x0000000000425c27: stosd dword ptr [rdi], eax; or dword ptr [rax], eax; syscall; 
0x0000000000424c54: stosd dword ptr [rdi], eax; pop rbp; ret; 
0x0000000000446645: stosd dword ptr [rdi], eax; sar rdx, cl; test rdx, rdx; je 0x46660; bsf rax, rdx; ret; 
0x0000000000482329: stosd dword ptr [rdi], eax; xor eax, eax; ret; 
0x0000000000454021: stosd dword ptr [rdi], eax; ret; 
0x0000000000424c53: stosq qword ptr [rdi], rax; pop rbp; ret; 
0x00000000004142b6: sub al, 0; add byte ptr [rcx - 0x75], cl; test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000421588: sub al, 0x17; or al, byte ptr [rax]; ret; 
0x000000000046b015: sub al, 0x29; ret 0x8341; 
0x000000000048acd0: sub al, 0x53; mov bh, 0xff; nop dword ptr [rax]; add rsp, 8; ret; 
0x000000000044e5b6: sub al, 0x72; add cl, byte ptr [rax + 0x77f8c50f]; ret; 
0x0000000000477bd3: sub al, 0x83; imul eax, dword ptr [rcx + rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000412cd8: sub al, 0xa; add byte ptr [rax], al; mov rdx, rbx; mov rsi, r12; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x00000000004327a3: sub al, 0xa; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000048702b: sub al, 0xc7; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x0000000000404f50: sub al, 0xd8; or eax, dword ptr [rax]; syscall; 
0x000000000046274c: sub al, 0xf; xchg esp, eax; ret 0xd108; 
0x00000000004765b0: sub al, 1; add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000414382: sub al, byte ptr [rax]; add byte ptr [rcx - 0x75], cl; test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000431b65: sub al, ch; std; xlatb; ret; 
0x000000000045159d: sub bh, byte ptr [rax + 0x48]; syscall; 
0x000000000041995e: sub byte ptr [r13 - 0x7b], r8b; sal byte ptr [rbx + rbp*2 + 0x49], 0x2b; and byte ptr [r8 + 1], r9b; ret; 
0x0000000000411142: sub byte ptr [r15 + rcx - 0x4a], r8b; ret; 
0x000000000047a3b4: sub byte ptr [r8 + 0x39], r9b; ret 0x870f; 
0x0000000000467195: sub byte ptr [r9 + r9*4 + 4], cl; ret 0x8b4c; 
0x00000000004546a3: sub byte ptr [r9], r8b; ret; 
0x000000000047a3b5: sub byte ptr [rax + 0x39], cl; ret 0x870f; 
0x000000000045aa8b: sub byte ptr [rax + 0x39], cl; ret 0xf48; 
0x00000000004528ef: sub byte ptr [rax - 0x75], cl; jge 0x528f4; call rbx; 
0x000000000047366c: sub byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000046ff49: sub byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000410b66: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10b74; add rsp, 0xd8; ret; 
0x0000000000410c24: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10c32; add rsp, 0xd8; ret; 
0x0000000000425448: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x25454; add rsp, 0x10; pop rbp; ret; 
0x000000000044f4df: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4f504; add rsp, 0x20; pop rbx; ret; 
0x0000000000450a37: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x50a51; add rsp, 0x28; ret; 
0x00000000004515b7: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x51603; add rsp, 0x68; ret; 
0x0000000000451646: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x51693; add rsp, 0x18; ret; 
0x00000000004516fe: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5174b; add rsp, 0x58; ret; 
0x000000000045179c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x517eb; add rsp, 0x58; ret; 
0x00000000004519aa: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x519b5; add rsp, 0x28; ret; 
0x0000000000464e31: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x64e3c; add rsp, 0x18; ret; 
0x00000000004650ac: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x650f4; mov eax, r9d; add rsp, 0x148; ret; 
0x00000000004651a4: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x65246; add rsp, 0x98; ret; 
0x00000000004670d1: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x670f5; add rsp, 0x38; ret; 
0x000000000046c884: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6c892; add rsp, 0xd8; ret; 
0x0000000000477f6f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x77f7d; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000478029: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x78054; mov eax, r9d; add rsp, 0x38; ret; 
0x000000000048451a: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84526; add rsp, 0x20; pop rbx; ret; 
0x0000000000484615: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84643; add rsp, 0x38; ret; 
0x00000000004846e1: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84714; add rsp, 0x58; ret; 
0x0000000000484853: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84894; add rsp, 0x68; ret; 
0x0000000000484b71: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84ba4; add rsp, 0x58; ret; 
0x0000000000486d1e: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x86da5; leave; ret; 
0x0000000000487818: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x87823; add rsp, 0x28; ret; 
0x0000000000487906: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x87911; add rsp, 0x38; ret; 
0x000000000048b881: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8b88c; add rsp, 0x38; ret; 
0x000000000040f3b8: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xf3e4; mov eax, r8d; add rsp, 0x118; ret; 
0x000000000049171d: sub byte ptr [rbp + 1], cl; ret 0x394c; 
0x0000000000404d0a: sub byte ptr [rbp + 9], al; ret; 
0x000000000041995f: sub byte ptr [rbp - 0x7b], al; sal byte ptr [rbx + rbp*2 + 0x49], 0x2b; and byte ptr [r8 + 1], r9b; ret; 
0x000000000046682f: sub byte ptr [rbx + 0x5c6e92d], al; add byte ptr [rcx], al; xor eax, eax; add rsp, 8; ret; 
0x000000000044faf3: sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000048443f: sub byte ptr [rbx + rcx*4 + 0x5c], cl; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x00000000004843bd: sub byte ptr [rbx + rcx*4 + 0x5c], cl; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x000000000048b5e8: sub byte ptr [rbx - 0x1b], dh; mov eax, 1; ret; 
0x000000000048b5e7: sub byte ptr [rbx - 0x1b], sil; mov eax, 1; ret; 
0x000000000041d3a4: sub byte ptr [rbx - 0x49f0fff9], cl; ror byte ptr [rcx + 0x63], 4; or dword ptr [rcx + rax - 0x28], 0x3e; jmp rax; 
0x0000000000467196: sub byte ptr [rcx + rcx*4 + 4], cl; ret 0x8b4c; 
0x0000000000427d84: sub byte ptr [rcx + rcx*4 - 0x19], cl; call rax; 
0x0000000000417c6c: sub byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; ret; 
0x00000000004850b8: sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; nop; jmp rdx; 
0x000000000045bccb: sub byte ptr [rcx - 0x77], cl; ret; 
0x00000000004546a4: sub byte ptr [rcx], al; ret; 
0x0000000000477fad: sub byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xe2; mov eax, 0x10; syscall; 
0x0000000000411143: sub byte ptr [rdi + rcx - 0x4a], al; ret; 
0x000000000047d9b0: sub byte ptr [rdi], cl; xchg ebp, eax; ret; 
0x000000000041bb2b: sub cl, byte ptr [rax + 1]; ret 0x4866; 
0x0000000000471880: sub cl, ch; push rdx; in eax, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x00000000004119c9: sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000046bc55: sub dh, al; add byte ptr [rip - 0xb9517], ch; jmp qword ptr [rsi - 0x70]; 
0x00000000004607f4: sub dl, bh; dec dword ptr [rcx - 0x77]; dec dword ptr [rbp - 0x77]; ret 0x87e9; 
0x000000000046084b: sub dl, bh; jmp qword ptr [rsi - 0x70]; 
0x0000000000422493: sub dword ptr [rax + rax], esi; add byte ptr [rax - 0x77], cl; add eax, 0x9e2ea; lea rax, [rip + 0x319b]; mov qword ptr [rip + 0x9e2d4], rax; ret; 
0x00000000004186f0: sub dword ptr [rax], eax; add bl, ch; ret; 
0x00000000004017c7: sub dword ptr [rax], ebx; or al, 0; add byte ptr [rax], al; add byte ptr [rax], al; pop rdx; ret; 
0x0000000000477bd4: sub dword ptr [rbx + 4], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000417c66: sub dword ptr [rdi], 1; add rsp, 0x28; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000418370: sub dword ptr [rdi], 1; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000046c8ca: sub dword ptr [rdi], 1; ret; 
0x000000000044d7f5: sub dword ptr [rdi], ecx; adc dword ptr [rcx - 0x10], esi; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000046c732: sub dword ptr [rip + 0x567f7], 1; mov eax, r8d; pop rbx; ret; 
0x000000000046a413: sub dword ptr [rip + 0x58b0a], 1; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000046a2d3: sub dword ptr [rip + 0x58c4a], 1; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000466830: sub dword ptr [rip + 0x5c6e9], 1; xor eax, eax; add rsp, 8; ret; 
0x0000000000428730: sub dword ptr [rip + 0x98069], 1; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000424f8c: sub dword ptr [rip + 0x9b80d], 1; pop rbp; ret; 
0x000000000042613f: sub dword ptr [rip + 0x9cb5a], 1; pop rbx; ret; 
0x000000000042070c: sub dword ptr [rip + 0xa251d], 1; ret; 
0x000000000041df40: sub dword ptr [rip + 0xa4ce9], 1; ret; 
0x0000000000432f86: sub dword ptr [rip - 0xcfffffe], 0xf; outsd dx, dword ptr [rsi]; push rdi; ret; 
0x000000000040f351: sub dword ptr [rsp + 0xd0], eax; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040f359: sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040f361: sub dword ptr [rsp + 0xf0], eax; syscall; 
0x000000000046c731: sub dword ptr ss:[rip + 0x567f7], 1; mov eax, r8d; pop rbx; ret; 
0x00000000004318f7: sub eax, -1; jne 0x31900; vzeroupper; ret; 
0x00000000004282fa: sub eax, 0x10; ret; 
0x000000000042118c: sub eax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x9f5b2], rdx; ret; 
0x000000000041509c: sub eax, 0x20; mov dword ptr [rbp - 0x53c], 1; cdqe; movzx eax, byte ptr [rbx + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004141af: sub eax, 0x20; cdqe; movzx eax, byte ptr [rbx + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000415045: sub eax, 0x20; cdqe; movzx ecx, byte ptr [rbx + rax]; lea rax, [rip + 0xa81cb]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x0000000000414595: sub eax, 0x20; cdqe; movzx ecx, byte ptr [rbx + rax]; lea rax, [rip + 0xa8e7b]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x0000000000483f37: sub eax, 0x3349646c; add byte ptr [rax + 9], cl; ret 0x4475; 
0x0000000000450d46: sub eax, 0x48c78944; mov dword ptr [rsp + 8], eax; call 0x75510; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000453007: sub eax, 0x4c00000a; mov dword ptr [rsp + 8], eax; mov rdi, qword ptr [r8]; call rbx; 
0x000000000046c733: sub eax, 0x567f7; add dword ptr [rcx + rcx*4 - 0x40], eax; pop rbx; ret; 
0x000000000046a414: sub eax, 0x58b0a; add dword ptr [rbx + 0x44], ebx; mov eax, eax; pop rbp; pop r12; ret; 
0x00000000004846e6: sub eax, 0x58c48348; ret; 
0x000000000046a2d4: sub eax, 0x58c4a; add dword ptr [rbx + 0x44], ebx; mov eax, eax; pop rbp; pop r12; ret; 
0x000000000048ecda: sub eax, 0x8000344; mov byte ptr [rip + 0x34427], 8; mov byte ptr [rip + 0x34421], 8; mov byte ptr [rip + 0x3441b], 8; mov byte ptr [rip + 0x34415], 8; ret; 
0x000000000042425f: sub eax, 0xf6000003; ret 0xf01; 
0x000000000046bc58: sub eax, 0xfff46ae9; jmp qword ptr [rsi - 0x70]; 
0x00000000004319ef: sub eax, 0xffff; jne 0x31900; ret; 
0x0000000000462484: sub eax, 1; mov dword ptr [rbx + 8], eax; cmp eax, -3; je 0x624a8; pop rbx; ret; 
0x000000000046249c: sub eax, 1; mov dword ptr [rdx + 8], eax; pop rbx; ret; 
0x000000000040ff36: sub eax, 1; sub rax, rbx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x000000000041f84b: sub eax, 1; ret; 
0x000000000048434a: sub eax, dword ptr [0]; ret; 
0x0000000000403333: sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000411979: sub eax, dword ptr [rcx + 0xf]; mov dh, 0x46; or al, 0x83; ret; 
0x000000000044eea0: sub eax, dword ptr [rcx + r8*4]; je 0x4ee88; ret; 
0x000000000044eea1: sub eax, dword ptr [rcx + rax*4]; je 0x4ee88; ret; 
0x00000000004210a2: sub eax, dword ptr [rdi + 0x18]; ret; 
0x0000000000452ae7: sub eax, dword ptr [rdx]; add byte ptr [rax], al; mov rdi, qword ptr [r14]; call rbx; 
0x00000000004202f7: sub eax, dword ptr [rsi + 0x10]; ret; 
0x00000000004871a3: sub eax, eax; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000483a06: sub eax, eax; ret; 
0x000000000040ff3a: sub eax, ebx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000431943: sub eax, ecx; je 0x31950; sbb eax, eax; or eax, 1; ret; 
0x0000000000487075: sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000048715d: sub eax, ecx; movhps xmm0, qword ptr [rsp - 0x18]; movups xmmword ptr [rdi], xmm0; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000486fd0: sub eax, ecx; shl rsi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000041f849: sub eax, ecx; sub eax, 1; ret; 
0x000000000042b23c: sub eax, ecx; ret; 
0x000000000042cabf: sub eax, ecx; vzeroupper; ret; 
0x0000000000424c46: sub eax, edi; lea ecx, [r8 + 0x280]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbp; ret; 
0x000000000045007e: sub eax, edi; shr rax, 2; ret; 
0x0000000000446529: sub eax, edi; ret; 
0x00000000004282ee: sub eax, edx; movzx edx, byte ptr [rcx + rax]; cmp dl, r8b; jne 0x282e0; sub rax, 0x10; ret; 
0x000000000041c561: sub eax, edx; pop rbp; pop r12; ret; 
0x00000000004501a9: sub eax, edx; shr rax, 2; vzeroupper; ret; 
0x000000000041ec10: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0x1ec80; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x000000000041ecc6: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0x1ecf8; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000041efd7: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0x1f188; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000041f756: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0x1f790; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004751bb: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0x751f0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000418326: sub eax, edx; sub rsi, rdx; cmp rax, rsi; jbe 0x18388; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000418b07: sub eax, edx; sub rsi, rdx; cmp rax, rsi; jbe 0x18b84; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000474646: sub eax, edx; sub rsi, rdx; cmp rax, rsi; jbe 0x74688; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000042031f: sub eax, edx; ret; 
0x000000000042c7c2: sub eax, edx; vzeroupper; ret; 
0x00000000004871a2: sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000483a05: sub eax, r8d; ret; 
0x000000000048715c: sub eax, r9d; movhps xmm0, qword ptr [rsp - 0x18]; movups xmmword ptr [rdi], xmm0; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000046c5d7: sub ebx, dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000046fe48: sub ebx, eax; sar rbx, 2; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x000000000042e3f5: sub ebx, edx; jbe 0x2e404; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042fb65: sub ebx, edx; jbe 0x2fb74; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000430b45: sub ebx, edx; jbe 0x30b54; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000046f948: sub ebx, esi; mov r13, rbx; sar r13, 2; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x000000000048b5e2: sub ecx, dword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x8b5d0; mov eax, 1; ret; 
0x0000000000485fb2: sub ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000450314: sub ecx, dword ptr [rcx + rcx*4 - 0x40]; shr rax, 2; vzeroupper; ret; 
0x0000000000446ad4: sub ecx, dword ptr [rcx + rcx*4 - 0x40]; vzeroupper; ret; 
0x0000000000452f99: sub ecx, dword ptr [rcx]; add byte ptr [rax], al; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004752a9: sub ecx, eax; sar rcx, 2; lea eax, [rcx - 1]; ret; 
0x000000000041807e: sub ecx, edx; cmp rax, rcx; jbe 0x181e0; xor esi, esi; mov rdi, rbp; call qword ptr [rbx + 0x10]; 
0x000000000041e8f6: sub ecx, edx; cmp rax, rcx; jbe 0x1e980; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x000000000041eace: sub ecx, edx; cmp rax, rcx; jbe 0x1eb60; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x000000000041ec13: sub ecx, edx; cmp rax, rcx; jbe 0x1ec80; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x000000000041ecc9: sub ecx, edx; cmp rax, rcx; jbe 0x1ecf8; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000041efda: sub ecx, edx; cmp rax, rcx; jbe 0x1f188; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000041f759: sub ecx, edx; cmp rax, rcx; jbe 0x1f790; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000041f7ec: sub ecx, edx; cmp rax, rcx; jbe 0x1f810; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004751be: sub ecx, edx; cmp rax, rcx; jbe 0x751f0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000045162c: sub edi, dword ptr [rax + 0x48]; syscall; 
0x00000000004143b5: sub edi, eax; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000413e10: sub edi, ebp; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000041f056: sub edi, edx; cmp rax, rdi; jbe 0x1f1d0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000048aeb3: sub edx, 1; cmp r8b, 1; sbb esi, esi; and esi, 2; syscall; 
0x000000000042828e: sub edx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x0000000000420328: sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000420319: sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000475352: sub edx, dword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000475364: sub edx, dword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x000000000041c55c: sub edx, dword ptr [rdi + 8]; pop rbx; sub rax, rdx; pop rbp; pop r12; ret; 
0x0000000000475f3d: sub edx, eax; jbe 0x761e0; add rax, rdi; add rax, rcx; ret; 
0x00000000004761a4: sub edx, eax; jbe 0x761e0; add rax, rdi; ret; 
0x00000000004761b4: sub edx, eax; jbe 0x761e0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004761c4: sub edx, eax; jbe 0x761e0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004761d4: sub edx, eax; jbe 0x761e0; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000476ced: sub edx, eax; jbe 0x76f90; add rax, rdi; add rax, rcx; ret; 
0x0000000000476f54: sub edx, eax; jbe 0x76f90; add rax, rdi; ret; 
0x0000000000476f64: sub edx, eax; jbe 0x76f90; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000476f74: sub edx, eax; jbe 0x76f90; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000476f84: sub edx, eax; jbe 0x76f90; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000041c69f: sub edx, edi; cmp r13, rdx; jbe 0x1c850; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x0000000000418e24: sub edx, esi; call qword ptr [rax + 0x70]; 
0x0000000000411ea8: sub edx, esi; call qword ptr [rbx + 0x38]; 
0x000000000044d228: sub edx, esi; cmp edx, ecx; jle 0x4d244; movsxd rax, ecx; ret; 
0x000000000041951c: sub edx, esi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000041bafd: sub edx, esi; mov qword ptr [rsp], rcx; mov rdi, rbp; call rax; 
0x0000000000418329: sub esi, edx; cmp rax, rsi; jbe 0x18388; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000418b0a: sub esi, edx; cmp rax, rsi; jbe 0x18b84; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x000000000041e693: sub esi, edx; cmp rax, rsi; jbe 0x1e6f8; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000474649: sub esi, edx; cmp rax, rsi; jbe 0x74688; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000047525c: sub esi, edx; cmp rax, rsi; jbe 0x75270; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000494d19: sub esp, 8; add rsp, 8; ret; 
0x0000000000459649: sub esp, 8; call 0x59030; or dword ptr [rip + 0x69784], 2; add rsp, 8; ret; 
0x000000000047e21f: sub esp, 8; call qword ptr [rip + 0x42f18]; xor eax, eax; add rsp, 8; ret; 
0x00000000004776dd: sub esp, 8; mov rax, qword ptr [rip + 0x483b1]; test rax, rax; je 0x77720; call rax; 
0x0000000000417c65: sub qword ptr [rdi], 1; add rsp, 0x28; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000046a412: sub qword ptr [rip + 0x58b0a], 1; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000046a2d2: sub qword ptr [rip + 0x58c4a], 1; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000042e3f4: sub r11, rdx; jbe 0x2e404; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042fb64: sub r11, rdx; jbe 0x2fb74; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000430b44: sub r11, rdx; jbe 0x30b54; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000413e0f: sub r15, r13; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000004143b4: sub r15, r8; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000424c45: sub r8, rdi; lea ecx, [r8 + 0x280]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbp; ret; 
0x00000000004282f9: sub rax, 0x10; ret; 
0x000000000042118b: sub rax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x9f5b2], rdx; ret; 
0x000000000040ff35: sub rax, 1; sub rax, rbx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x000000000044d0d3: sub rax, 1; ret; 
0x0000000000484349: sub rax, qword ptr [0]; ret; 
0x00000000004210a1: sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000484348: sub rax, qword ptr fs:[0]; ret; 
0x000000000040ff39: sub rax, rbx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000431942: sub rax, rcx; je 0x31950; sbb eax, eax; or eax, 1; ret; 
0x000000000041f848: sub rax, rcx; sub eax, 1; ret; 
0x000000000045007d: sub rax, rdi; shr rax, 2; ret; 
0x0000000000446528: sub rax, rdi; ret; 
0x00000000004282ed: sub rax, rdx; movzx edx, byte ptr [rcx + rax]; cmp dl, r8b; jne 0x282e0; sub rax, 0x10; ret; 
0x000000000041c560: sub rax, rdx; pop rbp; pop r12; ret; 
0x00000000004501a8: sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000041ec0f: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0x1ec80; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x000000000041ecc5: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0x1ecf8; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000041efd6: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0x1f188; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000041f755: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0x1f790; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004751ba: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0x751f0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000418325: sub rax, rdx; sub rsi, rdx; cmp rax, rsi; jbe 0x18388; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000418b06: sub rax, rdx; sub rsi, rdx; cmp rax, rsi; jbe 0x18b84; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000474645: sub rax, rdx; sub rsi, rdx; cmp rax, rsi; jbe 0x74688; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000044d1b3: sub rax, rdx; ret; 
0x00000000004467af: sub rax, rdx; vzeroupper; ret; 
0x000000000046f947: sub rbx, r14; mov r13, rbx; sar r13, 2; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x000000000046fe47: sub rbx, r8; sar rbx, 2; mov rdx, rbx; call qword ptr [rax + 0x38]; 
0x000000000048b5e1: sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x8b5d0; mov eax, 1; ret; 
0x00000000004752a8: sub rcx, rax; sar rcx, 2; lea eax, [rcx - 1]; ret; 
0x000000000041807d: sub rcx, rdx; cmp rax, rcx; jbe 0x181e0; xor esi, esi; mov rdi, rbp; call qword ptr [rbx + 0x10]; 
0x000000000041e8f5: sub rcx, rdx; cmp rax, rcx; jbe 0x1e980; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x000000000041eacd: sub rcx, rdx; cmp rax, rcx; jbe 0x1eb60; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x000000000041ec12: sub rcx, rdx; cmp rax, rcx; jbe 0x1ec80; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x000000000041ecc8: sub rcx, rdx; cmp rax, rcx; jbe 0x1ecf8; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000041efd9: sub rcx, rdx; cmp rax, rcx; jbe 0x1f188; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000041f758: sub rcx, rdx; cmp rax, rcx; jbe 0x1f790; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000041f7eb: sub rcx, rdx; cmp rax, rcx; jbe 0x1f810; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004751bd: sub rcx, rdx; cmp rax, rcx; jbe 0x751f0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000041f055: sub rdi, rdx; cmp rax, rdi; jbe 0x1f1d0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000042828d: sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x0000000000475351: sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000475363: sub rdx, qword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x000000000041c55b: sub rdx, qword ptr [rdi + 8]; pop rbx; sub rax, rdx; pop rbp; pop r12; ret; 
0x000000000041c69e: sub rdx, r15; cmp r13, rdx; jbe 0x1c850; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x0000000000475f3c: sub rdx, rax; jbe 0x761e0; add rax, rdi; add rax, rcx; ret; 
0x00000000004761a3: sub rdx, rax; jbe 0x761e0; add rax, rdi; ret; 
0x00000000004761b3: sub rdx, rax; jbe 0x761e0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004761c3: sub rdx, rax; jbe 0x761e0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004761d3: sub rdx, rax; jbe 0x761e0; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000476cec: sub rdx, rax; jbe 0x76f90; add rax, rdi; add rax, rcx; ret; 
0x0000000000476f53: sub rdx, rax; jbe 0x76f90; add rax, rdi; ret; 
0x0000000000476f63: sub rdx, rax; jbe 0x76f90; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000476f73: sub rdx, rax; jbe 0x76f90; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000476f83: sub rdx, rax; jbe 0x76f90; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000418e23: sub rdx, rsi; call qword ptr [rax + 0x70]; 
0x0000000000411ea7: sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000041951b: sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000041bafc: sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbp; call rax; 
0x0000000000418328: sub rsi, rdx; cmp rax, rsi; jbe 0x18388; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000418b09: sub rsi, rdx; cmp rax, rsi; jbe 0x18b84; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x000000000041e692: sub rsi, rdx; cmp rax, rsi; jbe 0x1e6f8; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000474648: sub rsi, rdx; cmp rax, rsi; jbe 0x74688; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000047525b: sub rsi, rdx; cmp rax, rsi; jbe 0x75270; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000494d18: sub rsp, 8; add rsp, 8; ret; 
0x0000000000459648: sub rsp, 8; call 0x59030; or dword ptr [rip + 0x69784], 2; add rsp, 8; ret; 
0x000000000047e21e: sub rsp, 8; call qword ptr [rip + 0x42f18]; xor eax, eax; add rsp, 8; ret; 
0x00000000004776dc: sub rsp, 8; mov rax, qword ptr [rip + 0x483b1]; test rax, rax; je 0x77720; call rax; 
0x000000000044b3fd: test ah, 0x20; jne 0x4b4e0; test ah, 0x40; jne 0x4b4f0; lea rax, [rdi + 0xf]; ret; 
0x000000000044b406: test ah, 0x40; jne 0x4b4f0; lea rax, [rdi + 0xf]; ret; 
0x000000000044b31e: test ah, 0x40; jne 0x4b4f0; test dh, 0x40; jne 0x4b260; lea rax, [rdi + 0xf]; ret; 
0x0000000000412258: test ah, dh; or byte ptr [rax], al; add byte ptr [rcx - 0x7d], al; in al, dx; add dword ptr [rax - 0x8ff43], eax; jmp qword ptr [rax]; 
0x000000000041f666: test al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000048e39c: test al, 0; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000477dd8: test al, 0; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x0000000000490607: test al, 0; add byte ptr [rax], al; ret; 
0x000000000044b3ac: test al, 0x20; jne 0x4b470; test al, 0x40; jne 0x4b480; lea rax, [rdi + 7]; ret; 
0x000000000044b3b4: test al, 0x40; jne 0x4b480; lea rax, [rdi + 7]; ret; 
0x000000000044b29c: test al, 0x40; jne 0x4b480; test dl, 0x40; jne 0x4b260; lea rax, [rdi + 7]; ret; 
0x0000000000452181: test al, 0x45; mov edi, ebp; call rax; 
0x000000000041f70e: test al, 0x90; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x0000000000456f2b: test al, 0xe8; movabs byte ptr [0x488d48e68948fffa], al; sbb cl, byte ptr [rax - 0x77]; ret 0x8948; 
0x0000000000456e80: test al, 0xe8; cli; movabs byte ptr [0x488d48e68948fffa], al; sbb cl, byte ptr [rax - 0x77]; ret 0x8948; 
0x00000000004211b4: test al, 0xf5; or dword ptr [rax], eax; ret; 
0x000000000042814b: test al, 0xff; dec dword ptr [rbx + 0x9082454]; ret 0x37e9; 
0x00000000004017b6: test al, al; jne 0x17bb; ret; 
0x000000000042624a: test al, al; jne 0x26259; mov dword ptr [rip + 0x9ca48], 0; ret; 
0x000000000042b4fa: test al, al; jne 0x2b4e0; xor eax, eax; sub eax, ecx; ret; 
0x000000000044f98a: test al, al; jne 0x4fa31; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048397c: test al, al; jne 0x8394e; movsx eax, dl; neg eax; ret; 
0x0000000000404c93: test al, dl; add al, 0; add byte ptr [rax - 0x77], cl; ret 0x448b; 
0x0000000000418453: test bh, al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004910d9: test bh, bh; jne 0x91113; mov eax, 8; add rsp, 8; ret; 
0x000000000048e27c: test bh, bh; js 0x8e2a8; mov qword ptr [r9], r8; add rsp, 8; ret; 
0x000000000049122c: test bh, bh; js 0x91258; mov qword ptr [r9], r8; add rsp, 8; ret; 
0x0000000000492bcc: test bh, bh; js 0x92bf8; mov qword ptr [r9], r8; add rsp, 8; ret; 
0x0000000000480b52: test bl, ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x0000000000454725: test byte ptr [rax + 0x3b], 0x48; sbb byte ptr [rdi - 0x10], bh; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x00000000004546bd: test byte ptr [rax + 0x3b], 0x57; sbb byte ptr [rdi - 0x10], bh; mov qword ptr [rdi + 0x20], rdx; mov byte ptr [rdi + 0x28], 1; ret; 
0x0000000000451cd0: test byte ptr [rax + 0x49000003], cl; mov esi, dword ptr [rsi]; mov rax, qword ptr [rsp + 8]; mov rdi, r13; call rax; 
0x0000000000466ab6: test byte ptr [rax + 0xf], 0x44; ret 0x13eb; 
0x000000000048d18f: test byte ptr [rax + rax + 0x438b0000], al; adc byte ptr [rbp + 0x2d840fc0], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x000000000047a5e2: test byte ptr [rax + rax*8], ah; add byte ptr [rax], al; add dh, dh; ret 0x7404; 
0x000000000046f90c: test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x00000000004142bb: test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000479c95: test byte ptr [rax + rdi*4], ah; add al, byte ptr [rax]; add byte ptr [rax + 0x29], cl; ret; 
0x000000000040f352: test byte ptr [rax + rdx*8], ah; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040f35a: test byte ptr [rax + riz*8], ah; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xf0], eax; syscall; 
0x0000000000454c6f: test byte ptr [rax - 0x73], 0x3d; add al, 0; mov eax, 0x15; syscall; 
0x000000000041808a: test byte ptr [rax - 0x77], -0x11; call qword ptr [rbx + 0x10]; 
0x000000000041c342: test byte ptr [rax - 0x77], -0x21; call qword ptr [rbp + 0x70]; 
0x00000000004803a8: test byte ptr [rax - 0x7d], -0x18; add dword ptr [rax - 0x7d], ecx; ret 0x4810; 
0x00000000004070b9: test byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000047747a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rax, 3; ret; 
0x000000000042693a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000043127a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000044b4aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000044b4ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000044b4ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000044b4da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000044b4ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x000000000044b43a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x000000000044b44a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x000000000044b45a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000044b46a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000044b47a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x000000000044b48a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000044b49a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x000000000044aaca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000044a49a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000041a9ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000004546aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0x20], rsi; ret; 
0x000000000049054a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + rsi*8], rdx; add rsp, 8; ret; 
0x00000000004774aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 2; ret; 
0x00000000004774ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 3; ret; 
0x00000000004774ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 4; ret; 
0x00000000004774da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 5; ret; 
0x00000000004774ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 6; ret; 
0x00000000004774fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 7; ret; 
0x0000000000446b5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x0000000000427d7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x28]; mov rdi, r12; call rax; 
0x00000000004289fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rsi, r12; call rax; 
0x0000000000464f06: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x000000000044d0f7: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000048a79a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000446b6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000040268a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor edi, edi; mov eax, edx; syscall; 
0x000000000044b25a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x00000000004509ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 0x18; syscall; 
0x000000000045425a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 0x63; syscall; 
0x000000000041ec8a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 0xffffffff; ret; 
0x000000000045152a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 3; syscall; 
0x000000000042065a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000461c7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x61165]; ret; 
0x000000000045819a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x6b6fd]; ret; 
0x000000000042063a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x9fad5]; ret; 
0x000000000041f68a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; xor eax, eax; ret; 
0x000000000044b429: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi + 1]; ret; 
0x000000000044b419: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi]; ret; 
0x0000000000477499: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, 1; ret; 
0x0000000000454d2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000046e2a2: test byte ptr [rax], dl; add eax, 0x83410000; out dx, eax; add dword ptr [rax - 0x93343], eax; jmp qword ptr [rax]; 
0x000000000044d25d: test byte ptr [rbp + 0x48d674d2], 0x63; leave; add rax, rcx; sub rax, rdi; ret; 
0x000000000045cad1: test byte ptr [rbp + rax], al; add bh, dh; ret 0; 
0x0000000000464ee6: test byte ptr [rbp - 0x6bf0bf40], 0xc6; xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x0000000000406bf8: test byte ptr [rbp - 0x72b20001], ah; je 0x6c06; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x0000000000435057: test byte ptr [rbx - 0x76b303aa], 0x5f; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000044c882: test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000044c879: test byte ptr [rcx + rax - 0x67d0000], al; adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x0000000000429434: test byte ptr [rcx + rax - 0x7cb80000], dh; ret 0xe901; 
0x0000000000494b50: test byte ptr [rcx + rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000004765af: test byte ptr [rcx + rax], ch; add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000420f4a: test byte ptr [rcx + rcx*4 - 0x11], -0x18; std; add dh, bh; dec dword ptr [rax - 0x77]; ret; 
0x000000000046dcbe: test byte ptr [rcx + rcx*4 - 0x11], 0x44; mov dword ptr [rbp - 0x970], edx; mov byte ptr [rbp - 0x958], r9b; call rax; 
0x0000000000468c1b: test byte ptr [rcx + rcx*4 - 0x19], 0x4c; mov dword ptr [rbp - 0xe8], eax; call rax; 
0x000000000046f943: test byte ptr [rcx + rcx*4 - 0x19], 0x4c; sub ebx, esi; mov r13, rbx; sar r13, 2; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x0000000000411df6: test byte ptr [rcx + rcx*4 - 1], 0x44; mov dword ptr [rbp - 0x94c], ecx; mov dword ptr [rbp - 0x940], r11d; call rax; 
0x0000000000407221: test byte ptr [rcx], 0; nop dword ptr [rax]; ret; 
0x00000000004758e4: test byte ptr [rcx], ch; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000459653: test byte ptr [rdi + 0x48020006], dl; add esp, 8; ret; 
0x000000000046bd6d: test byte ptr [rdi - 0x1600000f], ah; mov word ptr [rax - 7], ds; jmp qword ptr [rsi + 0xf]; 
0x00000000004282ca: test byte ptr [rdi], -0x6c; ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x0000000000424702: test byte ptr [rdi], -0x7b; add al, byte ptr ds:[rax]; add byte ptr [rbp - 0x7cfdb9], cl; add dh, byte ptr [rsp - 0x77]; ret 0xb48b; 
0x00000000004529f4: test byte ptr [rdi], -0x7b; movsd dword ptr [rdi], dword ptr [rsi]; add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; jge 0x529ff; call rbx; 
0x00000000004529c4: test byte ptr [rdi], -0x7b; xor eax, 0x49000001; mov edi, dword ptr [rbp]; call rbx; 
0x0000000000467fb3: test byte ptr [rdi], -0x7c; adc dword ptr es:[rax], eax; add byte ptr [rbx - 0x70f0fb08], al; cmp eax, 0xc7000015; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x0000000000455aad: test byte ptr [rdi], -0x7c; xchg edi, eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000047496f: test byte ptr [rdi], 2; jne 0x749e8; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x000000000044ff61: test byte ptr [rdx + 0x48000000], bl; bsf eax, edx; shr rax, 2; ret; 
0x000000000048bc43: test byte ptr [rdx], ch; or eax, dword ptr [rax]; add byte ptr [rbp + 0x1bf0142], cl; add byte ptr [rax], al; add byte ptr [rcx - 0x4cf7b], cl; jmp qword ptr [rsi + 0x2e]; 
0x00000000004180f8: test byte ptr [rdx], cl; add byte ptr [rdi], cl; xchg esp, eax; ret 0x3948; 
0x000000000048a6ba: test byte ptr [rip + 0x390ff], 0x40; jne 0x8a6c8; ret; 
0x000000000044f41b: test byte ptr [rip + 0x73908], 8; lea rax, [rip + 0xcb7]; lea rdx, [rip + 0xa90]; cmovne rax, rdx; ret; 
0x0000000000429d70: test byte ptr [rip + 0x98fbe], 2; lea rdx, [rip + 0x23822]; lea rax, [rip + 0x238db]; cmove rax, rdx; ret; 
0x0000000000429d54: test byte ptr [rip + 0x98fda], 2; lea rdx, [rip + 0x2404e]; lea rax, [rip + 0x24097]; cmove rax, rdx; ret; 
0x00000000004299ef: test byte ptr [rip + 0x9938f], 1; je 0x299b1; ret; 
0x0000000000428dcb: test byte ptr [rip + 0x99fb2], 0x40; lea rax, [rip + 0x1cd57]; lea rdx, [rip + 0x22400]; cmovne rax, rdx; ret; 
0x00000000004465cd: test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x000000000042b4ca: test byte ptr [rsi + 0x48fffffe], dl; bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000004541b7: test byte ptr [rsi], 0; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000467fb5: test byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rbx - 0x70f0fb08], al; cmp eax, 0xc7000015; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x00000000004758fc: test byte ptr [rsi], bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000041d4f6: test ch, dh; add dword ptr [rax], eax; add byte ptr [rdi + rcx - 0x42], cl; ret 0x4a8d; 
0x000000000048d05d: test cl, bh; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; or byte ptr [rax + 3], cl; add byte ptr [r13 + 0x31], r8b; jmp qword ptr [rsi - 0x7d]; 
0x00000000004836f5: test cl, bl; add dword ptr [rax], eax; add byte ptr [rdi], cl; mov dh, 0x45; add cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000463221: test cl, cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x0000000000481177: test cl, cl; cmove r8, rax; mov rax, r8; ret; 
0x000000000044cd5f: test cl, cl; jne 0x4cd50; ret; 
0x000000000044ce0f: test cl, cl; jne 0x4ce00; ret; 
0x000000000044d0cf: test cl, cl; jne 0x4d0c0; sub rax, 1; ret; 
0x000000000044b327: test dh, 0x40; jne 0x4b260; lea rax, [rdi + 0xf]; ret; 
0x000000000044c7b6: test dh, 0x40; jne 0x4c780; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x000000000044e90a: test dh, 0xf0; je 0x4e82a; lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000044b36d: test dh, 4; jne 0x4b260; lea rax, [rdi + 0xb]; ret; 
0x0000000000476515: test dh, al; add dword ptr [rax], eax; add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x00000000004598d9: test dh, dh; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000004910d8: test dil, dil; jne 0x91113; mov eax, 8; add rsp, 8; ret; 
0x000000000048e27b: test dil, dil; js 0x8e2a8; mov qword ptr [r9], r8; add rsp, 8; ret; 
0x000000000049122b: test dil, dil; js 0x91258; mov qword ptr [r9], r8; add rsp, 8; ret; 
0x0000000000492bcb: test dil, dil; js 0x92bf8; mov qword ptr [r9], r8; add rsp, 8; ret; 
0x000000000044b2a4: test dl, 0x40; jne 0x4b260; lea rax, [rdi + 7]; ret; 
0x000000000044c702: test dl, 0x40; jne 0x4c780; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x000000000044b2d2: test dl, 4; jne 0x4b260; lea rax, [rdi + 3]; ret; 
0x0000000000418552: test dl, cl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000477447: test dl, dl; je 0x77460; mov cl, dl; and cl, 0xf; je 0x77470; ret; 
0x000000000044cf7f: test dl, dl; jne 0x4cf70; lea rax, [rcx - 1]; ret; 
0x000000000040f2bb: test dl, dl; jne 0xf298; ret; 
0x000000000047e378: test dword ptr [rax + 0x21], 0xc73948f0; jne 0x7e388; pop rbx; ret; 
0x000000000048e3ca: test dword ptr [rax + 0x33], eax; idiv edi; xor eax, eax; add rsp, 8; ret; 
0x00000000004651a9: test dword ptr [rax + 0x48000000], ebx; add esp, 0x98; ret; 
0x000000000048dfd4: test dword ptr [rax + 0x48000000], edx; add esp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x0000000000452d2c: test dword ptr [rax + 0x49000002], ecx; mov edi, dword ptr [rdi]; call rbx; 
0x0000000000452de0: test dword ptr [rax + 0x49000002], esi; mov edi, dword ptr [rdi]; call rbx; 
0x0000000000446a9b: test dword ptr [rax + 0x4c000000], esp; mov eax, eax; vzeroupper; ret; 
0x0000000000475b18: test dword ptr [rax + 0xf], 0x7a8df7b6; add dword ptr [rax - 0x78], eax; jl 0x75b58; adc byte ptr [rbp - 0x7cb7fd8e], cl; ret 0x4802; 
0x000000000044b3af: test dword ptr [rax + rax + 0x40a80000], edi; jne 0x4b480; lea rax, [rdi + 7]; ret; 
0x0000000000476397: test dword ptr [rax + rax - 0x3fcf0000], edx; vzeroupper; ret; 
0x0000000000431438: test dword ptr [rax + rax - 0x8b70000], ecx; ret 2; 
0x0000000000484f27: test dword ptr [rax + rax], edi; add byte ptr [rax - 0x75], cl; and al, 0x10; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x0000000000424f87: test dword ptr [rax + rax], edi; add byte ptr [rbx + 0x9b80d2d], al; add byte ptr [rcx], al; pop rbp; ret; 
0x0000000000489943: test dword ptr [rax - 0x75], 0x83480842; ret 0x4808; 
0x00000000004552f1: test dword ptr [rax - 0x75], 0x83481042; ret 0x4810; 
0x000000000045217d: test dword ptr [rax - 0x75], 0x8945a845; out dx, eax; call rax; 
0x0000000000456f27: test dword ptr [rax - 0x77], 0x4fe8a875; movabs byte ptr [0x488d48e68948fffa], al; sbb cl, byte ptr [rax - 0x77]; ret 0x8948; 
0x0000000000457d8d: test dword ptr [rax - 0x77], 0x69e89075; loope 0x57d95; dec dword ptr [rax - 0x75]; jne 0x57d2b; mov rdi, rbx; call rsi; 
0x0000000000477eeb: test dword ptr [rax - 0x77], 0xca8948d6; cmp r9d, 1; ja 0x77f28; mov eax, 0x106; syscall; 
0x0000000000450a69: test dword ptr [rax - 0x77], 0xf88341d6; add dword ptr [rdi + 0x2d], esi; mov eax, 4; syscall; 
0x0000000000477e89: test dword ptr [rax - 0x77], 0xf88341d6; add dword ptr [rdi + 0x2d], esi; mov eax, 6; syscall; 
0x0000000000450ac8: test dword ptr [rax - 0x77], 0xf88341d6; add dword ptr [rdi + 0x2e], esi; mov eax, 5; syscall; 
0x0000000000456e7c: test dword ptr [rax - 0x77], 0xfae8a875; movabs byte ptr [0x488d48e68948fffa], al; sbb cl, byte ptr [rax - 0x77]; ret 0x8948; 
0x000000000046543a: test dword ptr [rax - 0x77], 0xfe894cea; mov rdi, r12; call rbx; 
0x000000000046cbfa: test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000041221d: test dword ptr [rax], eax; idiv edi; jmp qword ptr [rax]; 
0x00000000004126d5: test dword ptr [rax], ecx; idiv edi; inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000412391: test dword ptr [rax], edx; idiv edi; inc dword ptr [rcx]; ret; 
0x0000000000421b0c: test dword ptr [rbp + 0x31], eax; sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa118a]; syscall; 
0x00000000004529f6: test dword ptr [rbp + 0x49000000], esp; mov edi, dword ptr [rbp]; call rbx; 
0x0000000000452ab6: test dword ptr [rbp + 0x49000002], esi; mov edi, dword ptr [rsi]; call rbx; 
0x00000000004502de: test dword ptr [rbp + 0x4c000000], ebx; mov eax, eax; shr rax, 2; vzeroupper; ret; 
0x0000000000452e52: test dword ptr [rbp + 0x4d000000], edi; mov eax, dword ptr [rdi + 0x10]; test r8, r8; jne 0x52edd; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452c98: test dword ptr [rbp + 0x4d000004], ebx; mov eax, dword ptr [rdi + 0x10]; test r8, r8; jne 0x53103; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452ebc: test dword ptr [rbp + 9], edi; add byte ptr [rax], al; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000486d23: test dword ptr [rbp], edi; add byte ptr [rax], al; leave; ret; 
0x0000000000476128: test dword ptr [rbx + 0x31000000], esp; rol bl, 0x83; ret 0x6620; 
0x0000000000453452: test dword ptr [rbx + 0x4c000005], esi; mov dword ptr [rsp + 8], eax; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452e88: test dword ptr [rbx + 0x4c000009], eax; mov dword ptr [rsp + 8], eax; mov rdi, qword ptr [r8]; call rbx; 
0x000000000044b368: test dword ptr [rbx + 1], eax; add byte ptr [rax], al; test dh, 4; jne 0x4b260; lea rax, [rdi + 0xb]; ret; 
0x0000000000432a87: test dword ptr [rbx + 7], edx; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000432ed6: test dword ptr [rbx + rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000431b58: test dword ptr [rbx - 0x3a000003], esp; std; xlatb; ret 0xe883; 
0x0000000000434e93: test dword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x000000000043a7b3: test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x000000000040187b: test dword ptr [rbx], 0x5894800; ret; 
0x0000000000452f98: test dword ptr [rbx], ebp; or dword ptr [rax], eax; add byte ptr [rcx + rcx*4 + 0x44], cl; and al, 8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000473634: test dword ptr [rcx + 0x48000000], edx; add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000452b16: test dword ptr [rcx + 0x49000001], esp; mov edi, dword ptr [rsi]; call rbx; 
0x0000000000452f2a: test dword ptr [rcx + 0xa], edx; add byte ptr [rax], al; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000429bf5: test dword ptr [rcx + 2], 0x440f4800; ret 0x66c3; 
0x0000000000452ca5: test dword ptr [rcx + 4], ebx; add byte ptr [rax], al; mov rdi, qword ptr [r15]; call rbx; 
0x00000000004533e4: test dword ptr [rcx + 5], ebp; add byte ptr [rax], al; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000045322c: test dword ptr [rcx + 6], ebp; add byte ptr [rax], al; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000432a5d: test dword ptr [rcx + 7], esi; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000043296d: test dword ptr [rcx + 8], esp; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000432899: test dword ptr [rcx + 9], eax; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000043287d: test dword ptr [rcx + 9], edx; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000044f98d: test dword ptr [rdi + 0x48000000], ebx; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000452bc7: test dword ptr [rdi + 3], edi; add byte ptr [rax], al; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000467fc4: test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x00000000004190b7: test dword ptr [rdi - 2], edi; dec dword ptr [rax - 0x75]; cmp byte ptr [r8 - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x00000000004904d7: test dword ptr [rdx + 0x12], ebp; idiv edi; mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x000000000048db6d: test dword ptr [rdx + 0x48000001], edx; add esp, 0x78; pop rbp; pop r12; ret; 
0x000000000045341b: test dword ptr [rdx + 0x4c000001], ebx; mov dword ptr [rsp + 8], eax; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452fcf: test dword ptr [rdx + 0x4c000007], esi; mov dword ptr [rsp + 8], eax; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453187: test dword ptr [rdx + 5], eax; add byte ptr [rax], al; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004530ab: test dword ptr [rdx + 6], edi; add byte ptr [rax], al; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452cd2: test dword ptr [rdx + 6], edx; add byte ptr [rax], al; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000432a9b: test dword ptr [rdx + 7], ecx; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x0000000000432999: test dword ptr [rdx + 8], esp; add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000004327a2: test dword ptr [rdx + rcx], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000453263: test dword ptr [rdx], ecx; add al, 0; add byte ptr [rcx + rcx*4 + 0x44], cl; and al, 8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000414429: test dword ptr [rdx], esp; sbb dword ptr [rax], eax; add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x0000000000490539: test dword ptr [rip + 0x48fff712], ecx; mov dword ptr [rcx], edx; add rsp, 8; ret; 
0x00000000004529c6: test dword ptr [rip + 0x49000001], esi; mov edi, dword ptr [rbp]; call rbx; 
0x0000000000452d59: test dword ptr [rip + 0x49000007], edx; mov edi, dword ptr [rdi]; call rbx; 
0x0000000000453006: test dword ptr [rip + 0x4c00000a], ebp; mov dword ptr [rsp + 8], eax; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000476813: test dword ptr [rip - 0x76ffffff], edi; ret 0x8948; 
0x000000000042425e: test dword ptr [rip - 0x9fffffd], ebp; ret 0xf01; 
0x0000000000450b96: test dword ptr [rsi + 0x48000000], esp; add esp, 0x68; pop rbp; pop r12; ret; 
0x00000000004531f5: test dword ptr [rsi + 0x4c000004], esp; mov dword ptr [rsp + 8], eax; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452cc5: test dword ptr [rsi + 0x4d000006], edx; mov eax, dword ptr [rdi + 0x10]; test r8, r8; jne 0x53329; mov rdi, qword ptr [r15]; call rbx; 
0x000000000044b2cd: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; test dl, 4; jne 0x4b260; lea rax, [rdi + 3]; ret; 
0x000000000044cae2: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004532d1: test dword ptr [rsi + 3], ebp; add byte ptr [rax], al; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452f61: test dword ptr [rsi + 8], ecx; add byte ptr [rax], al; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000451938: test dword ptr [rsi], 0xc0854800; je 0x51941; ret; 
0x0000000000452d79: test dword ptr [rsi], eax; add eax, 0x8b4d0000; adc byte ptr [r13 - 0x7b], r9b; ror byte ptr [rdi], 0x85; ret 4; 
0x0000000000424704: test dword ptr [rsi], edi; add al, byte ptr [rax]; add byte ptr [rbp - 0x7cfdb9], cl; add dh, byte ptr [rsp - 0x77]; ret 0xb48b; 
0x00000000004533ad: test dword ptr [rsi], esi; add al, byte ptr [rax]; add byte ptr [rcx + rcx*4 + 0x44], cl; and al, 8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000432ca8: test dword ptr [rsi], esp; add eax, 0xc0310000; ret; 
0x0000000000429d13: test eax, 0x4800023c; cmove eax, edx; ret; 
0x0000000000438956: test eax, 0x7f0f41f3; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x0000000000444cc2: test eax, 0xe3c4c9eb; jns 0x44d2c; rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x00000000004454a2: test eax, 0xe3c4c9eb; jns 0x4550c; rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000046156b: test eax, 0xe800038d; or al, 0x1b; cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000044d0e8: test eax, 0xfffd3be9; jmp qword ptr [rsi - 0x70]; 
0x0000000000455501: test eax, eax; add byte ptr [rax], al; add dh, dh; ret 0x7404; 
0x00000000004541bf: test eax, eax; cmove eax, edx; ret; 
0x00000000004905d5: test eax, eax; cmovne rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000401010: test eax, eax; je 0x1016; call rax; 
0x0000000000401010: test eax, eax; je 0x1016; call rax; add rsp, 8; ret; 
0x0000000000401cc3: test eax, eax; je 0x1cd0; mov edi, 0x4c1b10; jmp rax; 
0x0000000000401d05: test eax, eax; je 0x1d10; mov edi, 0x4c1b10; jmp rax; 
0x000000000041f5a9: test eax, eax; je 0x1f5bc; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000430b28: test eax, eax; je 0x30b2d; xchg edx, eax; sub eax, edx; ret; 
0x00000000004310f6: test eax, eax; je 0x31110; bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x0000000000445da3: test eax, eax; je 0x45db0; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000045193c: test eax, eax; je 0x51941; ret; 
0x0000000000455eaa: test eax, eax; je 0x55eb0; ret; 
0x000000000045963e: test eax, eax; je 0x59648; ret; 
0x00000000004630e2: test eax, eax; je 0x630e8; call rax; 
0x0000000000463368: test eax, eax; je 0x6336e; call rax; 
0x000000000046457d: test eax, eax; je 0x64583; call rax; 
0x000000000047693d: test eax, eax; je 0x768f4; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000476962: test eax, eax; je 0x76980; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000004776e8: test eax, eax; je 0x77720; call rax; 
0x00000000004871f5: test eax, eax; je 0x87207; lea rax, [rip + 0x3bde0]; mov qword ptr [rip + 0x3bdc1], rax; add rsp, 8; ret; 
0x0000000000487695: test eax, eax; je 0x876a3; lea rdx, [rip + 0x3a400]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000487934: test eax, eax; je 0x87940; pop rbx; pop rbp; pop r12; ret; 
0x0000000000489550: test eax, eax; je 0x8956e; lea rbx, [rbp + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000490e5c: test eax, eax; je 0x90e70; mov edi, 1; jmp rax; 
0x00000000004944c4: test eax, eax; je 0x944ca; call rax; 
0x0000000000494799: test eax, eax; je 0x947a4; call rax; 
0x0000000000462498: test eax, eax; jle 0x624c0; sub eax, 1; mov dword ptr [rdx + 8], eax; pop rbx; ret; 
0x000000000041f544: test eax, eax; jne 0x1f538; ret; 
0x00000000004202dc: test eax, eax; jne 0x202d0; ret; 
0x0000000000424f84: test eax, eax; jne 0x25008; sub dword ptr [rip + 0x9b80d], 1; pop rbp; ret; 
0x000000000042613b: test eax, eax; jne 0x26178; sub dword ptr [rip + 0x9cb5a], 1; pop rbx; ret; 
0x000000000042cabb: test eax, eax; jne 0x2caa0; sub eax, ecx; vzeroupper; ret; 
0x0000000000430f40: test eax, eax; jne 0x30f20; sub eax, ecx; vzeroupper; ret; 
0x0000000000431241: test eax, eax; jne 0x31290; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000446ad1: test eax, eax; jne 0x46b00; mov rax, r8; vzeroupper; ret; 
0x0000000000446a98: test eax, eax; jne 0x46b40; mov rax, r8; vzeroupper; ret; 
0x000000000044b254: test eax, eax; jne 0x4b264; nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x0000000000450311: test eax, eax; jne 0x50340; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000450c5c: test eax, eax; jne 0x50c70; syscall; 
0x0000000000450c5c: test eax, eax; jne 0x50c70; syscall; cmp rax, -0x1000; ja 0x50cc0; ret; 
0x0000000000450cfc: test eax, eax; jne 0x50d10; mov eax, 1; syscall; 
0x0000000000452e33: test eax, eax; jne 0x52e72; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452e5c: test eax, eax; jne 0x52edd; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452bc4: test eax, eax; jne 0x52f4b; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452d29: test eax, eax; jne 0x52fb9; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452c48: test eax, eax; jne 0x53027; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452ddd: test eax, eax; jne 0x53095; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452ca2: test eax, eax; jne 0x53103; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452c75: test eax, eax; jne 0x53171; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452cfc: test eax, eax; jne 0x531df; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452d83: test eax, eax; jne 0x5324d; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452bee: test eax, eax; jne 0x532bb; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452ccf: test eax, eax; jne 0x53329; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452db0: test eax, eax; jne 0x53397; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452c1b: test eax, eax; jne 0x53405; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452d56: test eax, eax; jne 0x53473; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452e0a: test eax, eax; jne 0x534e1; mov rdi, qword ptr [r15]; call rbx; 
0x000000000046682c: test eax, eax; jne 0x66858; sub dword ptr [rip + 0x5c6e9], 1; xor eax, eax; add rsp, 8; ret; 
0x000000000046c72e: test eax, eax; jne 0x6c768; sub dword ptr [rip + 0x567f7], 1; mov eax, r8d; pop rbx; ret; 
0x00000000004760b3: test eax, eax; jne 0x76190; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000476155: test eax, eax; jne 0x761b0; xor eax, eax; ret; 
0x0000000000476125: test eax, eax; jne 0x761d0; xor eax, eax; ret; 
0x00000000004763d1: test eax, eax; jne 0x763f0; xor eax, eax; vzeroupper; ret; 
0x0000000000476394: test eax, eax; jne 0x76430; xor eax, eax; vzeroupper; ret; 
0x0000000000476e63: test eax, eax; jne 0x76f40; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000476f05: test eax, eax; jne 0x76f60; xor eax, eax; ret; 
0x0000000000476ed5: test eax, eax; jne 0x76f80; xor eax, eax; ret; 
0x0000000000477181: test eax, eax; jne 0x771a0; xor eax, eax; vzeroupper; ret; 
0x0000000000477144: test eax, eax; jne 0x771e0; xor eax, eax; vzeroupper; ret; 
0x0000000000482693: test eax, eax; jne 0x826b0; mov qword ptr [rbx], 0; pop rbx; or dword ptr [rip + 0x3ea62], 1; ret; 
0x0000000000484f24: test eax, eax; jne 0x84fa8; mov rcx, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x000000000048710a: test eax, eax; jne 0x87170; mov dword ptr [rdx], 0; mov eax, 2; ret; 
0x000000000048de2b: test eax, eax; jne 0x8dd80; add rsp, 0x38; ret; 
0x0000000000492656: test eax, eax; jne 0x92660; ret; 
0x0000000000492896: test eax, eax; jne 0x928a0; ret; 
0x0000000000429b20: test eax, eax; lea rdx, [rip + 0x24857]; lea rax, [rip + 0x247e0]; cmovne rax, rdx; ret; 
0x0000000000429b01: test eax, eax; lea rdx, [rip + 0x24986]; lea rax, [rip + 0x249cf]; cmove rax, rdx; ret; 
0x000000000042157a: test eax, eax; mov eax, 0x10; cmovne rax, rdx; mov qword ptr [rip + 0xa172c], rax; ret; 
0x0000000000464ee7: test eax, eax; sete sil; xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x000000000048b8c7: test eax, eax; setne al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x00000000004313dc: test eax, eax; tzcnt eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000046df9f: test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0x1b60; 
0x000000000041ba9e: test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000412519: test eax, edi; idiv bh; call qword ptr [rax]; 
0x000000000046d01b: test eax, edi; idiv bh; inc esi; test esp, ecx; idiv bh; jmp qword ptr [rax]; 
0x0000000000452996: test ebp, eax; add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; jge 0x5299f; call rbx; 
0x000000000045292d: test ebp, ebp; jne 0x52980; mov rdi, qword ptr [r12]; call rbx; 
0x000000000045295d: test ebp, ebp; jne 0x529e0; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000493134: test ebp, ebp; jne 0x93120; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004808ee: test ebp, ecx; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x000000000043292e: test ebp, ecx; or byte ptr [rax], al; add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000004534c0: test ebp, edi; add eax, 0x894c0000; and al, 8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004530e2: test ebp, esi; or byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x44], cl; and al, 8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000476090: test ebx, ebx; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x000000000047ecdf: test ebx, ebx; jne 0x7ece5; call rax; 
0x0000000000493187: test ebx, ebx; jne 0x93160; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004932db: test ebx, ebx; jne 0x932c0; pop rbx; ret; 
0x00000000004933f3: test ebx, ebx; jne 0x933dd; pop rbx; ret; 
0x000000000049481c: test ebx, ebx; jne 0x94800; pop rbx; pop rbp; pop r12; ret; 
0x000000000045bcc0: test ebx, esi; add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 + 0x5c], 0x24; sub byte ptr [rcx - 0x77], cl; ret; 
0x00000000004278f8: test ebx, esp; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000491e4a: test ecx, ebp; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov bh, 0x5d; and byte ptr [rsi - 9], ah; ret; 
0x0000000000453308: test ecx, ebp; add eax, 0x894c0000; and al, 8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000044b292: test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x000000000041a9aa: test ecx, ecx; jne 0x1a9c0; mov eax, dword ptr [rdx + 0x4c]; cmp dword ptr [rdx + 0x48], eax; cmovne eax, ecx; ret; 
0x000000000047eb51: test ecx, ecx; jne 0x7eb57; call rax; 
0x000000000047f523: test ecx, ecx; jne 0x7f537; mov qword ptr [rbp - 0xd8], r11; call rax; 
0x00000000004531be: test ecx, edx; or byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x44], cl; and al, 8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000042732c: test edi, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000450e31: test edi, edi; je 0x50e11; mov rbp, rdi; mov rdi, rbp; mov eax, 0x4f; syscall; 
0x00000000004519d5: test edi, edi; je 0x51a10; mov r10d, ebx; mov rdi, rbp; mov eax, 9; syscall; 
0x00000000004624ad: test edi, edi; je 0x6248f; call 0x845c0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000494790: test edi, edi; je 0x947a9; mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0x947a4; call rax; 
0x0000000000451c3b: test edi, edi; jne 0x51c66; mov rdi, qword ptr [rbp]; call rbx; 
0x0000000000452b6f: test edi, edi; jne 0x52bb1; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452b9b: test edi, edi; jne 0x52c08; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452a53: test edi, edi; jne 0x52c62; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452b13: test edi, edi; jne 0x52cbc; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452ae3: test edi, edi; jne 0x52d16; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452ab3: test edi, edi; jne 0x52d70; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452a83: test edi, edi; jne 0x52dca; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452b43: test edi, edi; jne 0x52e24; mov rdi, qword ptr [r14]; call rbx; 
0x00000000004534f0: test edi, edi; jne 0x5353f; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000045351f: test edi, edi; jne 0x53567; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453418: test edi, edi; jne 0x535ba; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004532ce: test edi, edi; jne 0x53644; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004531f2: test edi, edi; jne 0x536a0; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453184: test edi, edi; jne 0x536ce; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453116: test edi, edi; jne 0x536fc; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004530a8: test edi, edi; jne 0x5372a; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000045303a: test edi, edi; jne 0x53758; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452fcc: test edi, edi; jne 0x53786; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452f5e: test edi, edi; jne 0x537b4; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452e85: test edi, edi; jne 0x53810; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452eb9: test edi, edi; jne 0x5383e; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453071: test edi, edi; jne 0x5386c; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453229: test edi, edi; jne 0x5389a; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453305: test edi, edi; jne 0x538f6; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000045314d: test edi, edi; jne 0x53924; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004533e1: test edi, edi; jne 0x53952; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452f27: test edi, edi; jne 0x53980; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453297: test edi, edi; jne 0x539ae; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000045344f: test edi, edi; jne 0x53a0a; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453003: test edi, edi; jne 0x53a38; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453373: test edi, edi; jne 0x53a66; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004534bd: test edi, edi; jne 0x53ac2; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004299e0: test edx, 0x400000; je 0x299b1; lea rax, [rip + 0x7e01]; test byte ptr [rip + 0x9938f], 1; je 0x299b1; ret; 
0x0000000000427601: test edx, ebp; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000452ef3: test edx, ebp; or byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x44], cl; and al, 8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000045333f: test edx, edx; add al, byte ptr [rax]; add byte ptr [rcx + rcx*4 + 0x44], cl; and al, 8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004463c6: test edx, edx; je 0x463ce; bsf eax, edx; ret; 
0x000000000044646b: test edx, edx; je 0x46480; bsf rax, rdx; ret; 
0x000000000044640e: test edx, edx; je 0x46490; bsf rax, rdx; ret; 
0x000000000044663a: test edx, edx; je 0x46660; bsf rax, rdx; ret; 
0x00000000004465ca: test edx, edx; je 0x46670; bsf rax, rdx; ret; 
0x000000000044d25e: test edx, edx; je 0x4d238; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000044ffca: test edx, edx; je 0x4fff0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000044ff5e: test edx, edx; je 0x50000; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000454d1c: test edx, edx; je 0x54d30; lea rdi, [rcx + rsi + 0x20]; jmp rdx; 
0x000000000041cf77: test edx, edx; jne 0x1cf80; ret; 
0x000000000041df3c: test edx, edx; jne 0x1df50; sub dword ptr [rip + 0xa4ce9], 1; ret; 
0x000000000041e5f7: test edx, edx; jne 0x1e5e8; ret; 
0x0000000000420708: test edx, edx; jne 0x20718; sub dword ptr [rip + 0xa251d], 1; ret; 
0x00000000004212c5: test edx, edx; jne 0x212a8; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x000000000044e365: test edx, edx; jne 0x4e36d; mov rax, rdi; ret; 
0x0000000000454351: test edx, edx; jne 0x54360; ret; 
0x000000000046c8c6: test edx, edx; jne 0x6c8d0; sub dword ptr [rdi], 1; ret; 
0x00000000004742df: test edx, edx; jne 0x742d0; ret; 
0x0000000000476c6b: test edx, edx; jne 0x76c60; ret; 
0x000000000047f3ee: test edx, edx; jne 0x7f3f4; call rax; 
0x0000000000487fc9: test edx, edx; jne 0x87fd0; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000041346c: test edx, esp; idiv bh; inc edi; test eax, edi; idiv bh; call qword ptr [rax]; 
0x0000000000453119: test esi, ebx; add eax, 0x894c0000; and al, 8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453489: test esi, edi; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x44], cl; and al, 8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000044b285: test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x00000000004070b8: test esi, esi; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000428278: test esi, esi; je 0x28288; lea rax, [rax - 0x10]; ret; 
0x0000000000462464: test esi, esi; je 0x62470; cmp esi, 3; je 0x62470; ret; 
0x0000000000481100: test esi, esi; je 0x81107; mov qword ptr [rsi], rdi; mov rax, r8; ret; 
0x0000000000446535: test esi, esi; jne 0x4653d; xor rax, rax; ret; 
0x000000000044fec5: test esi, esi; jne 0x4fecd; xor rax, rax; ret; 
0x0000000000452774: test esi, esi; jne 0x52780; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000452822: test esi, esi; jne 0x52830; pop rbp; pop r12; pop r13; ret; 
0x0000000000452a1f: test esi, esi; jne 0x52a40; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004529f3: test esi, esi; jne 0x52aa0; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004529c3: test esi, esi; jne 0x52b00; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000452993: test esi, esi; jne 0x52b60; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000464ec8: test esi, esi; jne 0x64ed8; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x0000000000486f97: test esi, esi; jne 0x86fc0; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000487041: test esi, esi; jne 0x87032; cmp cx, 0x7fff; jne 0x8702c; mov eax, 1; ret; 
0x0000000000487028: test esi, esi; jne 0x87058; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000044b29f: test esp, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x000000000046d021: test esp, ecx; idiv bh; jmp qword ptr [rax]; 
0x00000000004528ec: test esp, esp; jne 0x52918; mov rdi, qword ptr [rbp]; call rbx; 
0x0000000000489942: test qword ptr [rax - 0x75], -0x7cb7f7be; ret 0x4808; 
0x0000000000434e92: test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x000000000047ecde: test r11d, r11d; jne 0x7ece5; call rax; 
0x00000000004528eb: test r12, r12; jne 0x52918; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000045292c: test r13, r13; jne 0x52980; mov rdi, qword ptr [r12]; call rbx; 
0x000000000045295c: test r13, r13; jne 0x529e0; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000452a1e: test r14, r14; jne 0x52a40; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004529f2: test r14, r14; jne 0x52aa0; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004529c2: test r14, r14; jne 0x52b00; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000452992: test r14, r14; jne 0x52b60; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000452b6e: test r15, r15; jne 0x52bb1; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452b9a: test r15, r15; jne 0x52c08; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452a52: test r15, r15; jne 0x52c62; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452b12: test r15, r15; jne 0x52cbc; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452ae2: test r15, r15; jne 0x52d16; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452ab2: test r15, r15; jne 0x52d70; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452a82: test r15, r15; jne 0x52dca; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452b42: test r15, r15; jne 0x52e24; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000452e32: test r8, r8; jne 0x52e72; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452e5b: test r8, r8; jne 0x52edd; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452bc3: test r8, r8; jne 0x52f4b; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452d28: test r8, r8; jne 0x52fb9; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452c47: test r8, r8; jne 0x53027; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452ddc: test r8, r8; jne 0x53095; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452ca1: test r8, r8; jne 0x53103; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452c74: test r8, r8; jne 0x53171; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452cfb: test r8, r8; jne 0x531df; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452d82: test r8, r8; jne 0x5324d; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452bed: test r8, r8; jne 0x532bb; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452cce: test r8, r8; jne 0x53329; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452daf: test r8, r8; jne 0x53397; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452c1a: test r8, r8; jne 0x53405; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452d55: test r8, r8; jne 0x53473; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000452e09: test r8, r8; jne 0x534e1; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000426249: test r8b, r8b; jne 0x26259; mov dword ptr [rip + 0x9ca48], 0; ret; 
0x000000000044f989: test r8b, r8b; jne 0x4fa31; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000430b27: test r8d, r8d; je 0x30b2d; xchg edx, eax; sub eax, edx; ret; 
0x000000000048de2a: test r8d, r8d; jne 0x8dd80; add rsp, 0x38; ret; 
0x000000000047f522: test r9d, r9d; jne 0x7f537; mov qword ptr [rbp - 0xd8], r11; call rax; 
0x00000000004905d4: test rax, rax; cmovne rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000040100f: test rax, rax; je 0x1016; call rax; 
0x000000000040100f: test rax, rax; je 0x1016; call rax; add rsp, 8; ret; 
0x0000000000401cc2: test rax, rax; je 0x1cd0; mov edi, 0x4c1b10; jmp rax; 
0x0000000000401d04: test rax, rax; je 0x1d10; mov edi, 0x4c1b10; jmp rax; 
0x000000000041f5a8: test rax, rax; je 0x1f5bc; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x000000000045193b: test rax, rax; je 0x51941; ret; 
0x00000000004630e1: test rax, rax; je 0x630e8; call rax; 
0x0000000000463367: test rax, rax; je 0x6336e; call rax; 
0x000000000046457c: test rax, rax; je 0x64583; call rax; 
0x00000000004776e7: test rax, rax; je 0x77720; call rax; 
0x0000000000487694: test rax, rax; je 0x876a3; lea rdx, [rip + 0x3a400]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000487933: test rax, rax; je 0x87940; pop rbx; pop rbp; pop r12; ret; 
0x0000000000490e5b: test rax, rax; je 0x90e70; mov edi, 1; jmp rax; 
0x00000000004944c3: test rax, rax; je 0x944ca; call rax; 
0x0000000000494798: test rax, rax; je 0x947a4; call rax; 
0x000000000041f543: test rax, rax; jne 0x1f538; ret; 
0x00000000004202db: test rax, rax; jne 0x202d0; ret; 
0x0000000000487109: test rax, rax; jne 0x87170; mov dword ptr [rdx], 0; mov eax, 2; ret; 
0x0000000000421579: test rax, rax; mov eax, 0x10; cmovne rax, rdx; mov qword ptr [rip + 0xa172c], rax; ret; 
0x0000000000493133: test rbp, rbp; jne 0x93120; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000493186: test rbx, rbx; jne 0x93160; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004932da: test rbx, rbx; jne 0x932c0; pop rbx; ret; 
0x00000000004933f2: test rbx, rbx; jne 0x933dd; pop rbx; ret; 
0x000000000049481b: test rbx, rbx; jne 0x94800; pop rbx; pop rbp; pop r12; ret; 
0x0000000000450e30: test rdi, rdi; je 0x50e11; mov rbp, rdi; mov rdi, rbp; mov eax, 0x4f; syscall; 
0x00000000004519d4: test rdi, rdi; je 0x51a10; mov r10d, ebx; mov rdi, rbp; mov eax, 9; syscall; 
0x00000000004624ac: test rdi, rdi; je 0x6248f; call 0x845c0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000049478f: test rdi, rdi; je 0x947a9; mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0x947a4; call rax; 
0x0000000000451c3a: test rdi, rdi; jne 0x51c66; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000004534ef: test rdi, rdi; jne 0x5353f; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000045351e: test rdi, rdi; jne 0x53567; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453417: test rdi, rdi; jne 0x535ba; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004532cd: test rdi, rdi; jne 0x53644; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004531f1: test rdi, rdi; jne 0x536a0; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453183: test rdi, rdi; jne 0x536ce; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453115: test rdi, rdi; jne 0x536fc; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004530a7: test rdi, rdi; jne 0x5372a; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453039: test rdi, rdi; jne 0x53758; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452fcb: test rdi, rdi; jne 0x53786; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452f5d: test rdi, rdi; jne 0x537b4; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452e84: test rdi, rdi; jne 0x53810; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452eb8: test rdi, rdi; jne 0x5383e; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453070: test rdi, rdi; jne 0x5386c; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453228: test rdi, rdi; jne 0x5389a; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453304: test rdi, rdi; jne 0x538f6; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000045314c: test rdi, rdi; jne 0x53924; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004533e0: test rdi, rdi; jne 0x53952; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000452f26: test rdi, rdi; jne 0x53980; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453296: test rdi, rdi; jne 0x539ae; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000045344e: test rdi, rdi; jne 0x53a0a; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453002: test rdi, rdi; jne 0x53a38; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000453372: test rdi, rdi; jne 0x53a66; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x00000000004534bc: test rdi, rdi; jne 0x53ac2; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000044646a: test rdx, rdx; je 0x46480; bsf rax, rdx; ret; 
0x000000000044640d: test rdx, rdx; je 0x46490; bsf rax, rdx; ret; 
0x0000000000446639: test rdx, rdx; je 0x46660; bsf rax, rdx; ret; 
0x00000000004465c9: test rdx, rdx; je 0x46670; bsf rax, rdx; ret; 
0x000000000044ffc9: test rdx, rdx; je 0x4fff0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000044ff5d: test rdx, rdx; je 0x50000; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000454d1b: test rdx, rdx; je 0x54d30; lea rdi, [rcx + rsi + 0x20]; jmp rdx; 
0x000000000041cf76: test rdx, rdx; jne 0x1cf80; ret; 
0x000000000041e5f6: test rdx, rdx; jne 0x1e5e8; ret; 
0x00000000004212c4: test rdx, rdx; jne 0x212a8; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x000000000044e364: test rdx, rdx; jne 0x4e36d; mov rax, rdi; ret; 
0x00000000004742de: test rdx, rdx; jne 0x742d0; ret; 
0x0000000000428277: test rsi, rsi; je 0x28288; lea rax, [rax - 0x10]; ret; 
0x00000000004810ff: test rsi, rsi; je 0x81107; mov qword ptr [rsi], rdi; mov rax, r8; ret; 
0x0000000000446534: test rsi, rsi; jne 0x4653d; xor rax, rax; ret; 
0x000000000044fec4: test rsi, rsi; jne 0x4fecd; xor rax, rax; ret; 
0x0000000000452773: test rsi, rsi; jne 0x52780; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000452821: test rsi, rsi; jne 0x52830; pop rbp; pop r12; pop r13; ret; 
0x0000000000486f96: test rsi, rsi; jne 0x86fc0; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000487040: test rsi, rsi; jne 0x87032; cmp cx, 0x7fff; jne 0x8702c; mov eax, 1; ret; 
0x0000000000487027: test rsi, rsi; jne 0x87058; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000004598d8: test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000446870: tzcnt eax, eax; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000004313a0: tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000446890: tzcnt eax, eax; add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000004313b0: tzcnt eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x00000000004468dc: tzcnt eax, eax; add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000004313de: tzcnt eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000446213: tzcnt eax, eax; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x00000000004467a5: tzcnt eax, eax; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x00000000004312f5: tzcnt eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x00000000004503c0: tzcnt eax, eax; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000446860: tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000431390: tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000004763e0: tzcnt eax, eax; cmp rdx, rax; jbe 0x76450; add rax, rdi; vzeroupper; ret; 
0x0000000000477190: tzcnt eax, eax; cmp rdx, rax; jbe 0x77200; add rax, rdi; vzeroupper; ret; 
0x0000000000431b90: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000431bb0: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000431b76: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000431900: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000042c933: tzcnt ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000042c998: tzcnt ecx, esi; movzx eax, byte ptr [rax + rcx + 0x60]; movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000042c95c: tzcnt edi, ecx; movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000042c97c: tzcnt edi, ecx; movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000042c7d0: tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x20]; movzx edx, byte ptr [rsi + rdx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000042c7f0: tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x40]; movzx edx, byte ptr [rsi + rdx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000042c810: tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x60]; movzx edx, byte ptr [rsi + rdx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000042c7b6: tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x000000000042ca02: tzcnt rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000488212: vminsd xmm9, xmm4, qword ptr [rcx + rcx*4 - 0x18]; pop r12; pop r13; ret; 
0x000000000044e589: vmovdqa ymmword ptr [rcx + 0x60], ymm0; add rcx, 0x80; cmp rdx, rcx; jne 0x4e57b; vzeroupper; ret; 
0x000000000043df31: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000044da32: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000043df35: vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000044da36: vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000446f60: vmovdqu xmm2, xmmword ptr [rsi]; vmovdqu xmm3, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x0000000000431a21: vmovdqu xmm2, xmmword ptr [rsi]; vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x31900; ret; 
0x000000000044b1a4: vmovdqu xmm3, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000446f64: vmovdqu xmm3, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x000000000043df3e: vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000044e5bf: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; vmovdqu xmmword ptr [rdi], xmm0; vzeroupper; ret; 
0x000000000044da40: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000044b1ae: vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000446f6e: vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x000000000043df3a: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000044da3c: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000044d3c9: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000044e5c5: vmovdqu xmmword ptr [rdi], xmm0; vzeroupper; ret; 
0x000000000044b1aa: vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000446f6a: vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x000000000044d3cd: vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000043df1d: vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000044d98b: vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000043df21: vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000044d98f: vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000446f80: vmovdqu ymm2, ymmword ptr [rsi]; vmovdqu ymm3, ymmword ptr [rsi + rdx - 0x1f]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x000000000043defd: vmovdqu ymm3, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000044b1c4: vmovdqu ymm3, ymmword ptr [rsi + rdx - 0x1f]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000446f84: vmovdqu ymm3, ymmword ptr [rsi + rdx - 0x1f]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x000000000044e4af: vmovdqu ymmword ptr [edi + edx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000044dbcc: vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000044dc73: vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x000000000043df2a: vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000043df11: vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000043df0b: vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000044dbbd: vmovdqu ymmword ptr [rcx - 0x20], ymm6; vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000044dbc2: vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000044dbc7: vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000044e524: vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x000000000043df06: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000044db0c: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000044dc64: vmovdqu ymmword ptr [rdi + 0x20], ymm5; vmovdqu ymmword ptr [rdi + 0x40], ymm6; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x000000000044dc69: vmovdqu ymmword ptr [rdi + 0x40], ymm6; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x000000000044dc6e: vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x000000000044b1ce: vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000446f8e: vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x000000000044e529: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x000000000044e4b0: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000044d999: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000044db11: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000044dad7: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm4; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm5; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000044e52f: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x000000000044db17: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000044dadd: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm5; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000044dae3: vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000044dae9: vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000043df26: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000044e520: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x000000000043df02: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000044db08: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000044d995: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000044e4b6: vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000044b1ca: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000446f8a: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x000000000044d3bf: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000044d3c3: vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000044ddce: vmovdqu64 zmm0, zmmword ptr [rsi]; vmovdqu64 zmm1, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x000000000044ddd4: vmovdqu64 zmm1, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x000000000044e086: vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000044e14c: vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x000000000044e07f: vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000044e6c3: vmovdqu64 zmmword ptr [rdi + 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x000000000044df9e: vmovdqu64 zmmword ptr [rdi + 0x40], zmm1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x000000000044e145: vmovdqu64 zmmword ptr [rdi + 0xc0], zmm7; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x000000000044df6f: vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x000000000044e6ca: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x000000000044e639: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x000000000044dde2: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x000000000044dfa5: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x000000000044e6d2: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x000000000044dfad: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x000000000044e6bd: vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x000000000044df98: vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + 0x40], zmm1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x000000000044dddc: vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x000000000044e641: vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x000000000044d3d8: vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000044d3dc: vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000043e239: vmovups zmmword ptr [r9 + 0x140], zmm13; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000043e240: vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000043e247: vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000043de91: vmovups zmmword ptr [r9 - 0x100], zmm4; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043e0e0: vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000043dee2: vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000043dea6: vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043e0d9: vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000043dedb: vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000043de9f: vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043e0d2: vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000043de98: vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043ded4: vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000044d391: vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043e394: vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043e39b: vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043e3a2: vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043e3a9: vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000044d3ac: vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000044d56e: vmovups zmmword ptr [rsi + 0x140], zmm2; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000044d575: vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000044d57c: vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000044d4d1: vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000044d4d8: vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000044d4df: vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000044d37e: vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000044d377: vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000044d370: vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000451ebc: vpaddsw ymm0, ymm15, ymmword ptr [rcx + 0xf]; lahf; ret; 
0x00000000004318b0: vpand ymm5, ymm5, ymm4; vptest ymm5, ymm0; jae 0x31b50; xor eax, eax; vzeroupper; ret; 
0x00000000004319e7: vpcmpeqb xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x31900; ret; 
0x0000000000431a25: vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x31900; ret; 
0x00000000004319eb: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x31900; ret; 
0x0000000000446acd: vpmovmskb eax, ymm1; test eax, eax; jne 0x46b00; mov rax, r8; vzeroupper; ret; 
0x00000000004763cd: vpmovmskb eax, ymm1; test eax, eax; jne 0x763f0; xor eax, eax; vzeroupper; ret; 
0x000000000047717d: vpmovmskb eax, ymm1; test eax, eax; jne 0x771a0; xor eax, eax; vzeroupper; ret; 
0x00000000004318f3: vpmovmskb eax, ymm2; sub eax, -1; jne 0x31900; vzeroupper; ret; 
0x0000000000406bf5: vpsubsb xmm8, xmm15, xmmword ptr [rbp + riz*4 - 0x72b20001]; je 0x6c06; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x00000000004318b4: vptest ymm5, ymm0; jae 0x31b50; xor eax, eax; vzeroupper; ret; 
0x0000000000430173: xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000044384f: xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000430263: xchg ah, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000430083: xchg ah, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000417514: xchg bh, al; add al, byte ptr [rax]; add byte ptr [rcx - 0x76b3d395], cl; ret 0x8348; 
0x00000000004454ac: xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x0000000000444ccc: xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x00000000004450bc: xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004448dc: xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000041c338: xchg bl, cl; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 6], cl; mov rsi, r14; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000048e3ae: xchg byte ptr [rax + 0x48000000], bh; add esp, 8; ret; 
0x000000000048e39b: xchg byte ptr [rax + 0x48000000], ch; add esp, 8; ret; 
0x000000000048e3fa: xchg byte ptr [rax + 0x48000000], dh; add esp, 8; ret; 
0x0000000000430acb: xchg byte ptr [rax + rax - 0x7cb80000], al; ret 0xeb10; 
0x00000000004443af: xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000443b8f: xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000044336f: xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000041235e: xchg byte ptr [rax + rdx], dh; add byte ptr [rax], al; mov rdx, r13; mov rsi, r10; mov rdi, r15; call qword ptr [rbx + 0x38]; 
0x0000000000430623: xchg byte ptr [rax - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000444a7b: xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000443ecf: xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042fdb3: xchg byte ptr [rbp + rcx - 0x7cb80000], bl; ret 0xeb10; 
0x00000000004436af: xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000442e8f: xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x00000000004144b2: xchg byte ptr [rbx + 0x44000025], ch; mov dword ptr [rbp - 0x4e8], ecx; mov rdx, r15; mov rsi, r11; mov rdi, r12; call qword ptr [rcx + 0x38]; 
0x000000000041efe0: xchg byte ptr [rbx + 0x48000001], ah; mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x0000000000475f40: xchg byte ptr [rbx + 0x48000002], bl; add eax, edi; add rax, rcx; ret; 
0x000000000044406f: xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x0000000000430803: xchg byte ptr [rbx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042ff93: xchg byte ptr [rbx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x00000000004120b5: xchg byte ptr [rbx], cl; adc al, 0; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x0000000000429b06: xchg byte ptr [rcx + 2], cl; add byte ptr [rax - 0x73], cl; add eax, 0x249cf; cmove rax, rdx; ret; 
0x00000000004309e3: xchg byte ptr [rcx + rax], ch; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000412a03: xchg byte ptr [rdi + 0x4c000009], ah; mov edx, ebp; mov rsi, r10; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000041f05c: xchg byte ptr [rdi + 1], ch; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000418084: xchg byte ptr [rdi + 1], dl; add byte ptr [rax], al; xor esi, esi; mov rdi, rbp; call qword ptr [rbx + 0x10]; 
0x0000000000412748: xchg byte ptr [rdi + rcx], bh; add byte ptr [rax], al; mov rdx, rbx; mov rsi, r12; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000041e8fc: xchg byte ptr [rdi], bh; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x0000000000444f6c: xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044478c: xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044589c: xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004308f3: xchg byte ptr [rdx + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000412cd7: xchg byte ptr [rdx + rcx], ch; add byte ptr [rax], al; mov rdx, rbx; mov rsi, r12; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x00000000004431cf: xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000430235: xchg byte ptr [rdx], bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000430325: xchg byte ptr [rdx], ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000430145: xchg byte ptr [rdx], cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000048a6d6: xchg byte ptr [rsi - 1], ah; jmp qword ptr [rsi + 0xf]; 
0x0000000000443305: xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000444005: xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000443b25: xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000444e6d: xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044579d: xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000045cabd: xchg byte ptr [rsi], dl; add al, 0; add byte ptr [rbp + 0xe880fd2], al; add al, 0; add bh, dh; ret 0xf800; 
0x000000000042fea3: xchg byte ptr [rsp + rcx - 0x7cb80000], ch; ret 0xeb10; 
0x000000000045d045: xchg ch, ch; add al, byte ptr [rax]; add byte ptr [rbp - 0x1a77f02e], al; add al, byte ptr [rax]; add bh, dh; ret 0xf800; 
0x0000000000444345: xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000443645: xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x0000000000443165: xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000443e65: xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x0000000000444fbd: xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004447dd: xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000430055: xchg dl, bh; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042fe75: xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042ff65: xchg dl, ch; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042fd85: xchg dl, cl; or eax, 0x83480000; ret 0x4910; 
0x000000000045cc87: xchg dword ptr [rax + 0x39480000], esp; ret; 
0x0000000000474956: xchg dword ptr [rax + 0x48000000], esp; cmp dword ptr [rax + 0x30], 0; je 0x74968; ret; 
0x000000000046fe9b: xchg dword ptr [rax - 0x76ffffe6], ecx; ret 0xc083; 
0x0000000000414403: xchg dword ptr [rax - 0x76ffffe8], ecx; ret 0xc083; 
0x0000000000415319: xchg dword ptr [rax - 0x76fffff1], esp; ret 0xc083; 
0x0000000000415cd4: xchg dword ptr [rax - 0x76fffff5], esi; ret 0xc083; 
0x000000000041aef5: xchg dword ptr [rax - 0x76ffffff], ebp; ret 0xc083; 
0x000000000044e337: xchg dword ptr [rax - 0xd000000], eax; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000041ead5: xchg dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x000000000047e9a2: xchg dword ptr [rax], ebx; add al, 0; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000471ea5: xchg dword ptr [rbp - 0x76fffff8], esp; ret 0xc083; 
0x0000000000415b12: xchg dword ptr [rbx - 0x76fffff7], esp; ret 0xc083; 
0x0000000000416310: xchg dword ptr [rbx - 0x76fffff9], esp; ret 0xc083; 
0x0000000000472f18: xchg dword ptr [rbx], esi; add al, 0; add byte ptr [rbx - 0x7cb7fb8e], cl; ret 0xb804; 
0x0000000000471acc: xchg dword ptr [rcx - 0x76fffffa], esp; ret 0xc083; 
0x000000000041680b: xchg dword ptr [rcx - 0x76fffffe], edi; ret 0xc083; 
0x00000000004723a6: xchg dword ptr [rdx - 0x76fffffd], eax; ret 0xc083; 
0x000000000047b93c: xchg dword ptr [rip - 0x76fffffd], ebx; ret 0xe8c0; 
0x00000000004162e3: xchg dword ptr [rsi - 0x76fffff9], ebp; ret 0xc083; 
0x00000000004194f0: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000429d35: xchg ebp, eax; add byte ptr [rax], al; lea rdx, [rip + 0xea91]; cmovne rax, rdx; ret; 
0x0000000000487e9a: xchg ebp, eax; call 0x545a0; endbr64; mov eax, dword ptr [rip + 0x3b97e]; ret; 
0x00000000004554f5: xchg ebp, eax; call 0xfffffffff60554fe; ret 0x7402; 
0x0000000000490795: xchg ebp, eax; cmp ah, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004814fb: xchg ebp, eax; cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000490c97: xchg ebp, eax; cmp dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000046e23e: xchg ebp, eax; mov eax, 0x8bfffff6; mov ch, 0; idiv edi; dec dword ptr [rax + 0x29]; ret 0xb8; 
0x000000000048ac7f: xchg ebp, eax; push rax; add al, 0; add bl, ch; ret; 
0x000000000048dff8: xchg ebp, eax; ret 0x145; 
0x000000000047fe47: xchg ebp, eax; ret 0x2148; 
0x0000000000450f24: xchg ebp, eax; ret 0x3948; 
0x00000000004733cb: xchg ebp, eax; ret 0x5389; 
0x00000000004249d2: xchg ebp, eax; ret 0x8348; 
0x000000000045b04b: xchg ebp, eax; ret 0x8d47; 
0x000000000045597f: xchg ebp, eax; ret 0x8d48; 
0x000000000042467b: xchg ebp, eax; ret 0xb60f; 
0x000000000048e0a2: xchg ebp, eax; ret 0xdb31; 
0x000000000048fc06: xchg ebp, eax; ret 0xf45; 
0x000000000048b8ca: xchg ebp, eax; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000413355: xchg ebp, eax; clc; idiv bh; dec dword ptr [rax + 0x39]; ret 0x850f; 
0x0000000000457bcb: xchg ebp, eax; cli; jmp qword ptr [rsi + 0x48]; 
0x000000000047d9b2: xchg ebp, eax; ret; 
0x0000000000419a9a: xchg ebx, eax; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; call 0xfffffffffffe1f8f; jmp qword ptr [rsi + 0xf]; 
0x000000000044a48f: xchg ebx, eax; lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000041ec86: xchg ebx, eax; nop word ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x000000000040596e: xchg ebx, eax; ret 0x3948; 
0x0000000000465b03: xchg ebx, eax; ret 0x3949; 
0x0000000000465d1f: xchg ebx, eax; ret 0x854d; 
0x000000000043bd29: xchg ebx, eax; ret 5; 
0x0000000000459cdb: xchg ebx, eax; cli; jmp qword ptr [rsi - 0x70]; 
0x0000000000418e38: xchg ebx, eax; nop; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x0000000000427da3: xchg ebx, eax; std; jmp qword ptr [rsi + 0x2e]; 
0x00000000004138c2: xchg ecx, eax; fdiv st(7), st(0); jmp qword ptr [rsi + 0x2e]; 
0x0000000000444451: xchg ecx, eax; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000429bb3: xchg ecx, eax; or dword ptr [rax], eax; add dh, byte ptr [rdi + rax*2 - 0xa]; ret 0x7520; 
0x000000000043e4da: xchg ecx, eax; sar ch, 0xff; jmp qword ptr [rdx - 0xf]; 
0x0000000000442b7f: xchg ecx, eax; sub eax, edx; ret; 
0x0000000000457edf: xchg ecx, eax; cli; jmp qword ptr [rsi + 0x49]; 
0x0000000000459eb7: xchg ecx, eax; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000004769eb: xchg ecx, eax; ret; 
0x0000000000477bae: xchg ecx, eax; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000429d65: xchg edi, eax; add al, byte ptr [rax]; cmove rax, rdx; ret; 
0x0000000000455ab0: xchg edi, eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000041840e: xchg edi, eax; fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000040814e: xchg edi, eax; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000424905: xchg edi, eax; mov esi, 0x39480009; ret; 
0x0000000000418415: xchg edi, eax; movabs al, byte ptr [0xe08a8948000000]; add byte ptr [rax], al; ret; 
0x0000000000457a07: xchg edi, eax; cli; jmp qword ptr [rsi + 0x48]; 
0x0000000000482453: xchg edx, eax; add al, byte ptr [rax]; mov eax, 0x59; mov rbp, rsp; mov rsi, rbp; syscall; 
0x0000000000415622: xchg edx, eax; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000445ac7: xchg edx, eax; lea rcx, [rip + 0x55ef1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000444447: xchg edx, eax; lea rcx, [rip + 0x57571]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000429a53: xchg edx, eax; or dword ptr [rax], eax; add dh, byte ptr [rdi + rax*2 - 0xa]; ret 0x7520; 
0x0000000000485b89: xchg edx, eax; ret 0x8948; 
0x00000000004884d7: xchg edx, eax; ret 0xc148; 
0x000000000044d258: xchg edx, eax; ret 0xf40; 
0x0000000000430b2c: xchg edx, eax; sub eax, edx; ret; 
0x000000000041cfe4: xchg esi, eax; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000431ef2: xchg esi, eax; add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043a153: xchg esi, eax; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x0000000000429bc5: xchg esi, eax; add byte ptr [rax], al; lea rdx, [rip + 0xebe1]; cmovne rax, rdx; ret; 
0x000000000044f3e6: xchg esi, eax; cmp al, 0xfb; jmp qword ptr [rsi + 0xf]; 
0x0000000000431faf: xchg esi, eax; lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004164ee: xchg esi, eax; out 0xff, al; jmp qword ptr [rsi + 0xf]; 
0x0000000000429186: xchg esi, eax; push rdx; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000044fcc3: xchg esi, eax; ret 0xc085; 
0x000000000044fd17: xchg esi, eax; ret 0xd284; 
0x000000000046ca56: xchg esi, eax; ret 0xfffb; 
0x000000000043bae6: xchg esi, eax; ret 5; 
0x0000000000431f5e: xchg esi, eax; rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000040c4cd: xchg esi, eax; sbb eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fe08], al; ret; 
0x0000000000431f0d: xchg esi, eax; nop; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000047a5d5: xchg esp, eax; and al, 0xe8; add eax, dword ptr [rax]; add dh, dh; ret 0x7402; 
0x0000000000451013: xchg esp, eax; ret 0x2044; 
0x000000000046ad60: xchg esp, eax; ret 0x3145; 
0x00000000004180fc: xchg esp, eax; ret 0x3948; 
0x000000000046a910: xchg esp, eax; ret 0x8545; 
0x000000000045595e: xchg esp, eax; ret 0x8d48; 
0x0000000000487585: xchg esp, eax; ret 0x950f; 
0x000000000047c440: xchg esp, eax; ret 0xb60f; 
0x000000000046274e: xchg esp, eax; ret 0xd108; 
0x0000000000402677: xchg esp, eax; ret 0xd284; 
0x000000000046b469: xchg esp, eax; ret 0xf45; 
0x000000000048ad47: xchg esp, eax; ret 0xfb83; 
0x00000000004282cc: xchg esp, eax; ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x0000000000489a4c: xchg esp, eax; ror byte ptr [rdi], 0x94; ret 0xb60f; 
0x0000000000404cf1: xchg esp, eax; ret; 
0x000000000046ff47: xchg esp, edx; sub byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000422494: xor al, 0; add byte ptr [rax - 0x77], cl; add eax, 0x9e2ea; lea rax, [rip + 0x319b]; mov qword ptr [rip + 0x9e2d4], rax; ret; 
0x000000000041235f: xor al, 0x10; add byte ptr [rax], al; mov rdx, r13; mov rsi, r10; mov rdi, r15; call qword ptr [rbx + 0x38]; 
0x0000000000402ce3: xor al, 0x19; mov qword ptr [rsi + 8], rax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000475db3: xor al, 0x24; pop r12; pop r13; pop r14; ret; 
0x000000000048e3ab: xor al, 0x48; mov eax, dword ptr [rsi + 0xb8]; add rsp, 8; ret; 
0x00000000004102f5: xor al, 0xb; add byte ptr [rcx], al; add rsp, 0x10; mov eax, r8d; pop rbx; ret; 
0x0000000000486fb4: xor al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x00000000004178db: xor al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x00000000004733cf: xor al, 0xe9; ret 0xfffc; 
0x000000000047323f: xor al, 2; add byte ptr [rax], al; add bl, ch; ret 0x43c7; 
0x0000000000470b42: xor al, 2; lea rax, [rip + 0x4d175]; mov r11, rcx; mov dword ptr [rbp - 0x4d0], 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004708da: xor al, 2; lea rax, [rip + 0x4d5dd]; mov r11, rcx; mov dword ptr [rbp - 0x4e8], 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x0000000000401c9a: xor al, byte ptr [rip - 0x6f0c0000]; endbr64; ret; 
0x000000000047d18e: xor bh, ch; jmp qword ptr [rsi + 0x66]; 
0x000000000045fe21: xor bh, dl; jmp qword ptr [rsi + 0x66]; 
0x0000000000404e02: xor byte ptr [r11 - 0x78f0fd07], r8b; ret; 
0x000000000047611f: xor byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000043123b: xor byte ptr [r14 + 0xf], r12b; xlatb; ret; 
0x000000000041f65d: xor byte ptr [r15], cl; adc dword ptr [rcx + 0x40], eax; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000041e6d2: xor byte ptr [r8 - 0x77], cl; and byte ptr [r9], sil; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000477ef7: xor byte ptr [rax + 0x106], bh; syscall; 
0x0000000000477ef7: xor byte ptr [rax + 0x106], bh; syscall; cmp rax, -0x1000; ja 0x77f10; ret; 
0x0000000000477ca0: xor byte ptr [rax + 0x39], cl; ret 0xda72; 
0x000000000045b76e: xor byte ptr [rax - 0x75], cl; je 0x5b797; push rax; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000045cf43: xor byte ptr [rax - 0x75], cl; je 0x5cf6c; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000045d983: xor byte ptr [rax - 0x75], cl; je 0x5d9ac; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000045e917: xor byte ptr [rax - 0x75], cl; je 0x5e940; pop rax; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000460014: xor byte ptr [rax - 0x75], cl; je 0x6003d; pop rax; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000485373: xor byte ptr [rax - 0x75], cl; jl 0x8539c; cmp al, ch; ret 0xf7bc; 
0x0000000000484444: xor byte ptr [rax - 0x75], cl; push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x00000000004843c2: xor byte ptr [rax - 0x75], cl; push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x000000000044703f: xor byte ptr [rax - 0x77], cl; add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000451593: xor byte ptr [rax - 0x77], cl; and al, 0x20; cmp esi, 9; je 0x515c8; mov eax, 0x48; syscall; 
0x000000000041e6d3: xor byte ptr [rax - 0x77], cl; and byte ptr [r9], sil; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000487124: xor byte ptr [rax - 0x77], cl; or byte ptr [r8 + 2], r15b; ret; 
0x0000000000416982: xor byte ptr [rax - 0x7d], cl; ret 0x8303; 
0x00000000004023f5: xor byte ptr [rax], al; add byte ptr [rax + 0x9e], bh; syscall; 
0x000000000040fe45: xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000040fe27: xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x0000000000480df3: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x80720; add rsp, 0xd8; ret; 
0x000000000044e934: xor byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000047495e: xor byte ptr [rax], al; je 0x74968; ret; 
0x000000000044d889: xor byte ptr [rbp + 0xf], al; adc dword ptr [rbx], eax; ret; 
0x0000000000491136: xor byte ptr [rbp + 0xf], dh; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x0000000000412217: xor byte ptr [rbp + rcx*4 + 0x50], cl; inc esi; test dword ptr [rax], eax; idiv edi; jmp qword ptr [rax]; 
0x0000000000429caf: xor byte ptr [rbp + rdx - 0x80], 0xe6; add cl, byte ptr [rax - 0x73]; add eax, 0x148b4; lea rdx, [rip + 0x16afd]; cmovne rax, rdx; ret; 
0x0000000000429176: xor byte ptr [rbp + rdx - 0x80], 0xe6; add cl, byte ptr [rax - 0x73]; add eax, 0x3a3d; lea rdx, [rip + 0x5296]; cmovne rax, rdx; ret; 
0x000000000040f256: xor byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000041e18c: xor byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000048dfdc: xor byte ptr [rbx + 0x5d], bl; pop r14; ret; 
0x000000000041f7fd: xor byte ptr [rbx - 0x3f8a0008], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000472f13: xor byte ptr [rbx - 0x78f0f608], al; xor eax, dword ptr [rax + rax]; add byte ptr [rbx - 0x7cb7fb8e], cl; ret 0xb804; 
0x0000000000404e03: xor byte ptr [rbx - 0x78f0fd07], al; ret; 
0x00000000004749bd: xor byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x000000000048b98f: xor byte ptr [rcx + rcx*4 - 0x20], cl; pop r12; ret; 
0x0000000000450ca3: xor byte ptr [rcx + rcx*4 - 0x39], al; mov qword ptr [rsp + 8], rax; call 0x75510; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000045217a: xor byte ptr [rcx + rcx*4 - 9], cl; mov rax, qword ptr [rbp - 0x58]; mov r15d, r13d; call rax; 
0x0000000000419fed: xor byte ptr [rcx - 0x29f0993a], cl; or byte ptr [r9 + 0x800ce], r8b; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x7589; 
0x0000000000412ae9: xor byte ptr [rcx - 0x77], cl; ret 0x2949; 
0x000000000046718b: xor byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x75], 0x43; sbb byte ptr [rax + 0x2b], cl; sub byte ptr [r9 + r9*4 + 4], cl; ret 0x8b4c; 
0x000000000045d72c: xor byte ptr [rcx - 0xa], al; ret 0x7501; 
0x0000000000429a3c: xor byte ptr [rdi], bh; add al, byte ptr [rax]; lea rax, [rip + 0x23f79]; cmove rax, rdx; ret; 
0x000000000041f65e: xor byte ptr [rdi], cl; adc dword ptr [rcx + 0x40], eax; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000044d73a: xor byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], esp; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x000000000041fb35: xor byte ptr [rdx], cl; add al, ch; ret; 
0x0000000000431c9f: xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000047cd6e: xor byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret; 
0x0000000000431c9a: xor byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000041a168: xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x4866; 
0x00000000004765fc: xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x0000000000476120: xor byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000043123c: xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000041a167: xor byte ptr [rsi + 0xf], spl; outsd dx, dword ptr [rsi]; ret 0x4866; 
0x000000000046084a: xor ch, byte ptr [rax]; cli; jmp qword ptr [rsi - 0x70]; 
0x000000000046dbd0: xor ch, cl; sahf; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x00000000004904d4: xor cl, byte ptr [rax]; jne 0x1746; mov rax, qword ptr [rax]; add rsp, 8; ret; 
0x00000000004653f4: xor cl, byte ptr [rbx]; add byte ptr [rax], al; mov rdi, qword ptr [rsp + 0x18]; mov rdx, rbp; mov rsi, r12; call rbx; 
0x0000000000482b34: xor dl, dh; ret; 
0x0000000000418726: xor dword ptr [rax + 0x63], ecx; ror dword ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r15; call qword ptr [rbp + 0x38]; 
0x000000000040ff21: xor dword ptr [rax - 0x39], ecx; ret; 
0x0000000000428276: xor dword ptr [rax - 0x7b], ecx; div byte ptr [rsp + rcx + 0x48]; lea eax, [rax - 0x10]; ret; 
0x00000000004224a2: xor dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; add eax, 0x9e2d4; ret; 
0x0000000000424989: xor dword ptr [rax], ecx; add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000482326: xor dword ptr [rax], edx; jae 0x822d5; xor eax, eax; ret; 
0x0000000000454d23: xor dword ptr [rax], esp; jmp rdx; 
0x0000000000482325: xor dword ptr [rax], r10d; jae 0x822d5; xor eax, eax; ret; 
0x0000000000464958: xor dword ptr [rcx], edi; ret 0x820f; 
0x000000000048d6b6: xor dword ptr [rdx], eax; add al, ch; ret 0xf759; 
0x00000000004882bf: xor eax, 0x27c18; lea rdi, [rip + 0x27c25]; call 0x3080; endbr64; ret; 
0x0000000000491132: xor eax, 0x303c2376; jne 0x91148; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x0000000000491192: xor eax, 0x303c2376; jne 0x911a8; mov rax, qword ptr [rsi + 0x10]; add rsp, 8; ret; 
0x000000000048ae6a: xor eax, 0x38a11; mov edi, 0x3005; mov eax, 0x9e; syscall; 
0x000000000044de57: xor eax, 0x48000002; mov ecx, edx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004101b5: xor eax, 0x4801000b; add esp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret; 
0x00000000004529c7: xor eax, 0x49000001; mov edi, dword ptr [rbp]; call rbx; 
0x0000000000470de1: xor eax, 0x4cfda; mov dword ptr [rbp - 0x530], 1; mov dword ptr [rbp - 0x4e8], 0; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470e66: xor eax, 0x4d355; mov r11, rcx; mov dword ptr [rbp - 0x508], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470e2c: xor eax, 0x4d38f; mov r11, rcx; mov dword ptr [rbp - 0x520], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470d5e: xor eax, 0x4d45d; mov r11, rcx; mov dword ptr [rbp - 0x4f8], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470d19: xor eax, 0x4d4a2; mov dword ptr [rbp - 0x4e0], 1; mov dword ptr [rbp - 0x4f0], 0x20; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000047071e: xor eax, 0x4da9d; mov r11, rcx; mov dword ptr [rbp - 0x514], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000047069e: xor eax, 0x4db1d; mov r11, rcx; mov dword ptr [rbp - 0x528], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000046fcc6: xor eax, 0x4e0f5; mov r11, rcx; xor r9d, r9d; mov dword ptr [rbp - 0x4d0], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000044e779: xor eax, 0x7701fa80; cmp dh, byte ptr [rdx + 2]; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000477dd4: xor eax, 0xa8c48148; add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x000000000041d12d: xor eax, 0xd8a38b4c; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0x1b60; 
0x0000000000464e2e: xor eax, dword ptr [0x28]; jne 0x64e3c; add rsp, 0x18; ret; 
0x0000000000486d1b: xor eax, dword ptr [0x28]; jne 0x86da5; leave; ret; 
0x000000000040fe42: xor eax, dword ptr [0x30]; call rax; 
0x000000000044da24: xor eax, dword ptr [rax + 0x3b7701fa]; jb 0x4da31; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000472f19: xor eax, dword ptr [rax + rax]; add byte ptr [rbx - 0x7cb7fb8e], cl; ret 0xb804; 
0x00000000004949f0: xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x00000000004913ee: xor eax, eax; add rsp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000041dcd4: xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000041e6d8: xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000466837: xor eax, eax; add rsp, 8; ret; 
0x000000000045734b: xor eax, eax; call rbx; 
0x0000000000451626: xor eax, eax; cmp esi, 9; je 0x51658; mov eax, 0x48; syscall; 
0x00000000004210ef: xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000464eed: xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x0000000000474aef: xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x0000000000425808: xor eax, eax; mov dword ptr fs:[rax], 0xc; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x0000000000424358: xor eax, eax; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x0000000000410119: xor eax, eax; mov rax, r8; pop rbx; pop rbp; ret; 
0x000000000041010e: xor eax, eax; mov rax, r8; ret; 
0x000000000044fdd0: xor eax, eax; mov rcx, qword ptr [rsp + 0x20]; mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000044f1c7: xor eax, eax; mov rdi, r12; lea r9, [rsp + 0x30]; call rbx; 
0x0000000000477fae: xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall; 
0x00000000004266e1: xor eax, eax; pop rbp; pop r12; mov rax, r8; pop r13; ret; 
0x0000000000458717: xor eax, eax; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000041ce91: xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000425e79: xor eax, eax; pop rbx; pop rbp; mov rax, r8; pop r12; ret; 
0x000000000041a334: xor eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000422a8b: xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000480fc4: xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000044e828: xor eax, eax; pop rbx; ret; 
0x000000000041b68f: xor eax, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x000000000045c2fe: xor eax, eax; push rax; push r12; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; call rbx; 
0x000000000042b4fe: xor eax, eax; sub eax, ecx; ret; 
0x000000000048de28: xor eax, eax; test r8d, r8d; jne 0x8dd80; add rsp, 0x38; ret; 
0x000000000041cf74: xor eax, eax; test rdx, rdx; jne 0x1cf80; ret; 
0x00000000004810fd: xor eax, eax; test rsi, rsi; je 0x81107; mov qword ptr [rsi], rdi; mov rax, r8; ret; 
0x000000000040f2c8: xor eax, eax; ret; 
0x0000000000450c98: xor eax, eax; syscall; 
0x00000000004517f4: xor eax, eax; syscall; cmp rax, -0x1000; ja 0x51808; ret; 
0x0000000000430f50: xor eax, eax; vzeroupper; ret; 
0x000000000047650f: xor eax, edx; and rax, rcx; je 0x766e0; bsr rax, rax; add rax, rdi; ret; 
0x000000000047679f: xor eax, edx; and rsi, rax; je 0x766e0; bsr rax, rsi; add rax, rdi; ret; 
0x000000000040f2b6: xor eax, edx; movzx edx, byte ptr [rcx]; test dl, dl; jne 0xf298; ret; 
0x000000000044feb2: xor ebx, edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000410b63: xor ecx, dword ptr [0x28]; jne 0x10b74; add rsp, 0xd8; ret; 
0x0000000000410c21: xor ecx, dword ptr [0x28]; jne 0x10c32; add rsp, 0xd8; ret; 
0x00000000004515b4: xor ecx, dword ptr [0x28]; jne 0x51603; add rsp, 0x68; ret; 
0x0000000000451643: xor ecx, dword ptr [0x28]; jne 0x51693; add rsp, 0x18; ret; 
0x00000000004516fb: xor ecx, dword ptr [0x28]; jne 0x5174b; add rsp, 0x58; ret; 
0x0000000000451799: xor ecx, dword ptr [0x28]; jne 0x517eb; add rsp, 0x58; ret; 
0x00000000004651a1: xor ecx, dword ptr [0x28]; jne 0x65246; add rsp, 0x98; ret; 
0x00000000004670ce: xor ecx, dword ptr [0x28]; jne 0x670f5; add rsp, 0x38; ret; 
0x000000000046c881: xor ecx, dword ptr [0x28]; jne 0x6c892; add rsp, 0xd8; ret; 
0x0000000000484612: xor ecx, dword ptr [0x28]; jne 0x84643; add rsp, 0x38; ret; 
0x00000000004846de: xor ecx, dword ptr [0x28]; jne 0x84714; add rsp, 0x58; ret; 
0x0000000000484850: xor ecx, dword ptr [0x28]; jne 0x84894; add rsp, 0x68; ret; 
0x0000000000484b6e: xor ecx, dword ptr [0x28]; jne 0x84ba4; add rsp, 0x58; ret; 
0x0000000000487815: xor ecx, dword ptr [0x28]; jne 0x87823; add rsp, 0x28; ret; 
0x000000000048b87e: xor ecx, dword ptr [0x28]; jne 0x8b88c; add rsp, 0x38; ret; 
0x000000000041b046: xor ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000429c93: xor ecx, dword ptr [rbx + 0x9908e15]; add bh, dh; ret 0; 
0x000000000042915a: xor ecx, dword ptr [rbx + 0x99bc715]; add bh, dh; ret 0; 
0x000000000048f75e: xor ecx, dword ptr [rcx - 0x7d]; ret; 
0x00000000004765a9: xor ecx, eax; and rsi, rcx; je 0x766e0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000046fccf: xor ecx, ecx; mov dword ptr [rbp - 0x4d0], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000406fa1: xor ecx, ecx; pop rbx; pop rbp; mov rax, r9; pop r12; ret; 
0x00000000004573b6: xor ecx, ecx; xor edx, edx; movzx eax, al; add eax, 1; push rax; call rbx; 
0x000000000046de92: xor ecx, edi; dec dword ptr [rax - 0x77]; ret 0xb848; 
0x0000000000402690: xor edi, edi; mov eax, edx; syscall; 
0x0000000000451a26: xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x0000000000451860: xor edi, edi; syscall; 
0x0000000000451860: xor edi, edi; syscall; cmp rax, -0x1000; ja 0x51870; ret; 
0x0000000000450a34: xor edx, dword ptr [0x28]; jne 0x50a51; add rsp, 0x28; ret; 
0x00000000004519a7: xor edx, dword ptr [0x28]; jne 0x519b5; add rsp, 0x28; ret; 
0x0000000000487903: xor edx, dword ptr [0x28]; jne 0x87911; add rsp, 0x38; ret; 
0x000000000040fe24: xor edx, dword ptr [0x30]; call rdx; 
0x000000000047d926: xor edx, edx; add rdi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000475553: xor edx, edx; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000044e976: xor edx, edx; and eax, 0x3fffc00; div ecx; mov eax, eax; ret; 
0x0000000000451775: xor edx, edx; and eax, 0x410000; cmp eax, 0x410000; je 0x517b0; mov eax, 0x101; syscall; 
0x000000000046a263: xor edx, edx; div ecx; add r8d, eax; mov eax, r8d; ret; 
0x0000000000446124: xor edx, edx; lea rax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000446144: xor edx, edx; lea rax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000446182: xor edx, edx; lea rax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000445fea: xor edx, edx; lea rax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000004948f6: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x2e612]; syscall; 
0x000000000046c776: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x567a2]; syscall; 
0x000000000046c4f2: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x56a22]; syscall; 
0x000000000046a46e: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x58a9e]; syscall; 
0x000000000046a32e: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x58bde]; syscall; 
0x0000000000466866: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x5c6a2]; syscall; 
0x00000000004667a1: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x5c767]; syscall; 
0x00000000004665ff: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x5c909]; syscall; 
0x0000000000466525: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x5c9e3]; syscall; 
0x0000000000458736: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x6b162]; syscall; 
0x00000000004585ca: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x6b2ce]; syscall; 
0x00000000004584aa: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x6b3ee]; syscall; 
0x000000000044fa12: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x73e86]; syscall; 
0x0000000000428872: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x97f16]; syscall; 
0x0000000000425c72: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9ab16]; syscall; 
0x0000000000425c12: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9ab76]; syscall; 
0x0000000000425852: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9af36]; syscall; 
0x00000000004255f2: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9b196]; syscall; 
0x000000000042501a: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9b76e]; syscall; 
0x0000000000424fe2: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9b7a6]; syscall; 
0x0000000000426bd2: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9c0c6]; syscall; 
0x0000000000426186: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9cb02]; syscall; 
0x00000000004222e3: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa09a5]; syscall; 
0x00000000004222b2: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa09e6]; syscall; 
0x0000000000422032: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa0c66]; syscall; 
0x0000000000421b0e: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa118a]; syscall; 
0x0000000000420724: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa24f4]; syscall; 
0x0000000000420164: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa2ab4]; syscall; 
0x000000000041fdf8: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa2e20]; syscall; 
0x000000000041fab6: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa3162]; syscall; 
0x000000000041e550: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa46c8]; syscall; 
0x000000000041e2b0: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa4968]; syscall; 
0x000000000041df5c: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa4cbc]; syscall; 
0x0000000000418232: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xab666]; syscall; 
0x0000000000410341: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb33f7]; syscall; 
0x0000000000410201: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb3537]; syscall; 
0x000000000040ffca: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb376e]; syscall; 
0x000000000040ff8f: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb37a9]; syscall; 
0x000000000040feab: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb388d]; syscall; 
0x00000000004068df: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbbec1]; syscall; 
0x0000000000404f3c: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbd82c]; syscall; 
0x0000000000403ddd: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbe8e3]; syscall; 
0x0000000000403dc0: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbe900]; syscall; 
0x0000000000403cea: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbe9d6]; syscall; 
0x00000000004012bb: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xc14fd]; syscall; 
0x000000000040142a: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000046c8d8: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x000000000042615b: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, ebx; syscall; 
0x0000000000425ffb: xor edx, edx; mov edx, 1; mov esi, 0x81; mov rdi, r12; mov eax, 0xca; syscall; 
0x000000000042758e: xor edx, edx; mov edx, 1; mov esi, 0x81; mov rdi, r13; mov eax, 0xca; syscall; 
0x00000000004281cf: xor edx, edx; mov edx, 1; mov esi, 0x81; mov rdi, r15; mov eax, 0xca; syscall; 
0x0000000000422e90: xor edx, edx; mov edx, 1; mov esi, 0x81; mov rdi, rbp; mov eax, 0xca; syscall; 
0x0000000000426f54: xor edx, edx; mov edx, 1; mov esi, 0x81; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000421118: xor edx, edx; mov edx, 2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x0000000000451857: xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000041f35b: xor edx, edx; mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000040f39a: xor edx, edx; mov rsi, r9; mov edi, 2; mov eax, 0xe; syscall; 
0x00000000004573b8: xor edx, edx; movzx eax, al; add eax, 1; push rax; call rbx; 
0x000000000041f336: xor edx, edx; pop rbx; jmp rax; 
0x000000000044ef8d: xor edx, edx; push 1; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000440789: xor esi, dword ptr [rdx + 0xc8b0005]; mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x0000000000454c6e: xor esi, esi; lea rdi, [rip + 0x44441]; mov eax, 0x15; syscall; 
0x000000000041cf22: xor esi, esi; mov ecx, 3; mov edx, 1; mov rdi, rbx; call qword ptr [rbp + 0x48]; 
0x000000000040270f: xor esi, esi; mov edi, 0x3003; mov eax, 0x9e; syscall; 
0x0000000000418089: xor esi, esi; mov rdi, rbp; call qword ptr [rbx + 0x10]; 
0x000000000041cf21: xor esi, r14d; mov ecx, 3; mov edx, 1; mov rdi, rbx; call qword ptr [rbp + 0x48]; 
0x0000000000488641: xor esp, esp; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000462693: xor esp, esp; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x0000000000475665: xor esp, esp; pop rbp; mov rax, r12; pop r12; pop r13; ret; 
0x00000000004031c4: xor esp, esp; pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x0000000000424988: xor qword ptr [rax], r9; add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000475552: xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000047d925: xor r10d, r10d; add rdi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000451774: xor r10d, r10d; and eax, 0x410000; cmp eax, 0x410000; je 0x517b0; mov eax, 0x101; syscall; 
0x00000000004948f5: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x2e612]; syscall; 
0x000000000046c775: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x567a2]; syscall; 
0x000000000046c4f1: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x56a22]; syscall; 
0x000000000046a46d: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x58a9e]; syscall; 
0x000000000046a32d: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x58bde]; syscall; 
0x0000000000466865: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x5c6a2]; syscall; 
0x00000000004667a0: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x5c767]; syscall; 
0x00000000004665fe: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x5c909]; syscall; 
0x0000000000466524: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x5c9e3]; syscall; 
0x0000000000458735: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x6b162]; syscall; 
0x00000000004585c9: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x6b2ce]; syscall; 
0x00000000004584a9: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x6b3ee]; syscall; 
0x000000000044fa11: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x73e86]; syscall; 
0x0000000000428871: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x97f16]; syscall; 
0x0000000000425c71: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9ab16]; syscall; 
0x0000000000425c11: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9ab76]; syscall; 
0x0000000000425851: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9af36]; syscall; 
0x00000000004255f1: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9b196]; syscall; 
0x0000000000425019: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9b76e]; syscall; 
0x0000000000424fe1: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9b7a6]; syscall; 
0x0000000000426bd1: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9c0c6]; syscall; 
0x0000000000426185: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x9cb02]; syscall; 
0x00000000004222e2: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa09a5]; syscall; 
0x00000000004222b1: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa09e6]; syscall; 
0x0000000000422031: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa0c66]; syscall; 
0x0000000000421b0d: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa118a]; syscall; 
0x0000000000420723: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa24f4]; syscall; 
0x0000000000420163: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa2ab4]; syscall; 
0x000000000041fdf7: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa2e20]; syscall; 
0x000000000041fab5: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa3162]; syscall; 
0x000000000041e54f: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa46c8]; syscall; 
0x000000000041e2af: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa4968]; syscall; 
0x000000000041df5b: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa4cbc]; syscall; 
0x0000000000418231: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xab666]; syscall; 
0x0000000000410340: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb33f7]; syscall; 
0x0000000000410200: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb3537]; syscall; 
0x000000000040ffc9: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb376e]; syscall; 
0x000000000040ff8e: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb37a9]; syscall; 
0x000000000040feaa: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb388d]; syscall; 
0x00000000004068de: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbbec1]; syscall; 
0x0000000000404f3b: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbd82c]; syscall; 
0x0000000000403ddc: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbe8e3]; syscall; 
0x0000000000403dbf: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbe900]; syscall; 
0x0000000000403ce9: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbe9d6]; syscall; 
0x00000000004012ba: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xc14fd]; syscall; 
0x0000000000401429: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000046c8d7: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x000000000042615a: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, ebx; syscall; 
0x0000000000425ffa: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov rdi, r12; mov eax, 0xca; syscall; 
0x000000000042758d: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov rdi, r13; mov eax, 0xca; syscall; 
0x00000000004281ce: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov rdi, r15; mov eax, 0xca; syscall; 
0x0000000000422e8f: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov rdi, rbp; mov eax, 0xca; syscall; 
0x0000000000426f53: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000421117: xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x0000000000488640: xor r12d, r12d; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000462692: xor r12d, r12d; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x0000000000475664: xor r12d, r12d; pop rbp; mov rax, r12; pop r12; pop r13; ret; 
0x00000000004031c3: xor r12d, r12d; pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x00000000004913ed: xor r8d, r8d; add rsp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000045734a: xor r8d, r8d; call rbx; 
0x0000000000425807: xor r8d, r8d; mov dword ptr fs:[rax], 0xc; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x0000000000424357: xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x0000000000410118: xor r8d, r8d; mov rax, r8; pop rbx; pop rbp; ret; 
0x000000000041010d: xor r8d, r8d; mov rax, r8; ret; 
0x000000000044fdcf: xor r8d, r8d; mov rcx, qword ptr [rsp + 0x20]; mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000044f1c6: xor r8d, r8d; mov rdi, r12; lea r9, [rsp + 0x30]; call rbx; 
0x00000000004266e0: xor r8d, r8d; pop rbp; pop r12; mov rax, r8; pop r13; ret; 
0x0000000000425e78: xor r8d, r8d; pop rbx; pop rbp; mov rax, r8; pop r12; ret; 
0x000000000045c2fd: xor r8d, r8d; push rax; push r12; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; call rbx; 
0x00000000004810fc: xor r8d, r8d; test rsi, rsi; je 0x81107; mov qword ptr [rsi], rdi; mov rax, r8; ret; 
0x000000000046fcce: xor r9d, r9d; mov dword ptr [rbp - 0x4d0], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000406fa0: xor r9d, r9d; pop rbx; pop rbp; mov rax, r9; pop r12; ret; 
0x0000000000464e2d: xor rax, qword ptr [0x28]; jne 0x64e3c; add rsp, 0x18; ret; 
0x0000000000486d1a: xor rax, qword ptr [0x28]; jne 0x86da5; leave; ret; 
0x000000000040fe41: xor rax, qword ptr [0x30]; call rax; 
0x0000000000464e2c: xor rax, qword ptr fs:[0x28]; jne 0x64e3c; add rsp, 0x18; ret; 
0x0000000000486d19: xor rax, qword ptr fs:[0x28]; jne 0x86da5; leave; ret; 
0x000000000040fe40: xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000446539: xor rax, rax; ret; 
0x000000000047650e: xor rax, rdx; and rax, rcx; je 0x766e0; bsr rax, rax; add rax, rdi; ret; 
0x000000000047679e: xor rax, rdx; and rsi, rax; je 0x766e0; bsr rax, rsi; add rax, rdi; ret; 
0x000000000040f2b5: xor rax, rdx; movzx edx, byte ptr [rcx]; test dl, dl; jne 0xf298; ret; 
0x0000000000410b62: xor rcx, qword ptr [0x28]; jne 0x10b74; add rsp, 0xd8; ret; 
0x0000000000410c20: xor rcx, qword ptr [0x28]; jne 0x10c32; add rsp, 0xd8; ret; 
0x00000000004515b3: xor rcx, qword ptr [0x28]; jne 0x51603; add rsp, 0x68; ret; 
0x0000000000451642: xor rcx, qword ptr [0x28]; jne 0x51693; add rsp, 0x18; ret; 
0x00000000004516fa: xor rcx, qword ptr [0x28]; jne 0x5174b; add rsp, 0x58; ret; 
0x0000000000451798: xor rcx, qword ptr [0x28]; jne 0x517eb; add rsp, 0x58; ret; 
0x00000000004651a0: xor rcx, qword ptr [0x28]; jne 0x65246; add rsp, 0x98; ret; 
0x00000000004670cd: xor rcx, qword ptr [0x28]; jne 0x670f5; add rsp, 0x38; ret; 
0x000000000046c880: xor rcx, qword ptr [0x28]; jne 0x6c892; add rsp, 0xd8; ret; 
0x0000000000484611: xor rcx, qword ptr [0x28]; jne 0x84643; add rsp, 0x38; ret; 
0x00000000004846dd: xor rcx, qword ptr [0x28]; jne 0x84714; add rsp, 0x58; ret; 
0x000000000048484f: xor rcx, qword ptr [0x28]; jne 0x84894; add rsp, 0x68; ret; 
0x0000000000484b6d: xor rcx, qword ptr [0x28]; jne 0x84ba4; add rsp, 0x58; ret; 
0x0000000000487814: xor rcx, qword ptr [0x28]; jne 0x87823; add rsp, 0x28; ret; 
0x000000000048b87d: xor rcx, qword ptr [0x28]; jne 0x8b88c; add rsp, 0x38; ret; 
0x0000000000410b61: xor rcx, qword ptr fs:[0x28]; jne 0x10b74; add rsp, 0xd8; ret; 
0x0000000000410c1f: xor rcx, qword ptr fs:[0x28]; jne 0x10c32; add rsp, 0xd8; ret; 
0x00000000004515b2: xor rcx, qword ptr fs:[0x28]; jne 0x51603; add rsp, 0x68; ret; 
0x0000000000451641: xor rcx, qword ptr fs:[0x28]; jne 0x51693; add rsp, 0x18; ret; 
0x00000000004516f9: xor rcx, qword ptr fs:[0x28]; jne 0x5174b; add rsp, 0x58; ret; 
0x0000000000451797: xor rcx, qword ptr fs:[0x28]; jne 0x517eb; add rsp, 0x58; ret; 
0x000000000046519f: xor rcx, qword ptr fs:[0x28]; jne 0x65246; add rsp, 0x98; ret; 
0x00000000004670cc: xor rcx, qword ptr fs:[0x28]; jne 0x670f5; add rsp, 0x38; ret; 
0x000000000046c87f: xor rcx, qword ptr fs:[0x28]; jne 0x6c892; add rsp, 0xd8; ret; 
0x0000000000484610: xor rcx, qword ptr fs:[0x28]; jne 0x84643; add rsp, 0x38; ret; 
0x00000000004846dc: xor rcx, qword ptr fs:[0x28]; jne 0x84714; add rsp, 0x58; ret; 
0x000000000048484e: xor rcx, qword ptr fs:[0x28]; jne 0x84894; add rsp, 0x68; ret; 
0x0000000000484b6c: xor rcx, qword ptr fs:[0x28]; jne 0x84ba4; add rsp, 0x58; ret; 
0x0000000000487813: xor rcx, qword ptr fs:[0x28]; jne 0x87823; add rsp, 0x28; ret; 
0x000000000048b87c: xor rcx, qword ptr fs:[0x28]; jne 0x8b88c; add rsp, 0x38; ret; 
0x00000000004765a8: xor rcx, rax; and rsi, rcx; je 0x766e0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000450a33: xor rdx, qword ptr [0x28]; jne 0x50a51; add rsp, 0x28; ret; 
0x00000000004519a6: xor rdx, qword ptr [0x28]; jne 0x519b5; add rsp, 0x28; ret; 
0x0000000000487902: xor rdx, qword ptr [0x28]; jne 0x87911; add rsp, 0x38; ret; 
0x000000000040fe23: xor rdx, qword ptr [0x30]; call rdx; 
0x0000000000450a32: xor rdx, qword ptr fs:[0x28]; jne 0x50a51; add rsp, 0x28; ret; 
0x00000000004519a5: xor rdx, qword ptr fs:[0x28]; jne 0x519b5; add rsp, 0x28; ret; 
0x0000000000487901: xor rdx, qword ptr fs:[0x28]; jne 0x87911; add rsp, 0x38; ret; 
0x000000000040fe22: xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000041b8eb: cdq; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0x830f; 
0x0000000000424f33: cdq; ret 0xffff; 
0x00000000004211cb: cdq; cmc; or dword ptr [rax], eax; ret; 
0x00000000004141b2: cdqe; movzx eax, byte ptr [rbx + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000415048: cdqe; movzx ecx, byte ptr [rbx + rax]; lea rax, [rip + 0xa81cb]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x0000000000414598: cdqe; movzx ecx, byte ptr [rbx + rax]; lea rax, [rip + 0xa8e7b]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000041982c: clc; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x000000000048ca5f: clc; add cl, ch; out dx, al; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000468573: clc; add cl, ch; ret 0xfff6; 
0x0000000000450a6f: clc; add dword ptr [rdi + 0x2d], esi; mov eax, 4; syscall; 
0x0000000000477e8f: clc; add dword ptr [rdi + 0x2d], esi; mov eax, 6; syscall; 
0x0000000000450ace: clc; add dword ptr [rdi + 0x2e], esi; mov eax, 5; syscall; 
0x000000000048bb0d: clc; add ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004501a4: clc; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000004467ab: clc; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x00000000004310ff: clc; add rax, rcx; ret; 
0x00000000004312fb: clc; add rax, rcx; vzeroupper; ret; 
0x00000000004755ac: clc; call ptr [rdx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000043279d: clc; cmp rcx, rax; jne 0x331d3; xor eax, eax; ret; 
0x00000000004130b8: clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000004122b0: clc; idiv bh; call qword ptr [rax]; 
0x0000000000413356: clc; idiv bh; dec dword ptr [rax + 0x39]; ret 0x850f; 
0x000000000046e1d6: clc; idiv bh; dec dword ptr [rbp + 0x63]; ret; 
0x000000000046d01c: clc; idiv bh; inc esi; test esp, ecx; idiv bh; jmp qword ptr [rax]; 
0x000000000046e89a: clc; idiv bh; jmp qword ptr [rsi - 0x70]; 
0x0000000000411f56: clc; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000415f66: clc; in al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004120b3: clc; jbe 0x134c5; mov rdx, r13; mov rsi, r12; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x0000000000412cd5: clc; jbe 0x13708; mov rdx, rbx; mov rsi, r12; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000041f05a: clc; jbe 0x1f1d0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000473d8f: clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000047e343: clc; jmp qword ptr [rsi + 0x66]; 
0x0000000000473aa8: clc; jmp qword ptr [rsi + 0xf]; 
0x0000000000424c47: clc; lea ecx, [r8 + 0x280]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbp; ret; 
0x0000000000434cb7: clc; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043560b: clc; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043580b: clc; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435a0b: clc; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434c9b: clc; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004355df: clc; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004357df: clc; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004359df: clc; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434c6f: clc; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435627: clc; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043a5a7: clc; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435827: clc; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043a517: clc; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435a27: clc; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043a487: clc; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434cd3: clc; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000044e452: clc; mov qword ptr [rdi], rcx; ret; 
0x000000000044e5d1: clc; mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x000000000043df50: clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000044d6ce: clc; mov qword ptr [rdi], rsi; ret; 
0x000000000048e297: clc; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [rcx], r8; ret; 
0x0000000000432d1f: clc; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x331d3; xor eax, eax; ret; 
0x0000000000490a2f: clc; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000432799: clc; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x331d3; xor eax, eax; ret; 
0x0000000000466f05: clc; mov rdi, rdx; cmp rax, 9; ja 0x66ee0; mov rax, r8; ret; 
0x000000000044d6c6: clc; mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x00000000004314e3: clc; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000466f0b: clc; or dword ptr [rdi - 0x2f], esi; mov rax, r8; ret; 
0x0000000000417511: clc; or dword ptr [rdi], ecx; xchg bh, al; add al, byte ptr [rax]; add byte ptr [rcx - 0x76b3d395], cl; ret 0x8348; 
0x0000000000472f15: clc; or dword ptr [rdi], ecx; xchg dword ptr [rbx], esi; add al, 0; add byte ptr [rbx - 0x7cb7fb8e], cl; ret 0xb804; 
0x0000000000456b79: clc; or eax, 1; mov dword ptr [rip + 0x6cc71], eax; ret; 
0x0000000000456b48: clc; or eax, 2; mov dword ptr [rip + 0x6cca2], eax; pop rbx; ret; 
0x0000000000456ba9: clc; or eax, 3; mov dword ptr [rip + 0x6cc41], eax; ret; 
0x000000000042193a: clc; pop rbx; pop rbp; mov rax, r8; pop r12; ret; 
0x000000000041f7ff: clc; push qword ptr [rbp - 0x40]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048587a: clc; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000045007f: clc; shr rax, 2; ret; 
0x000000000045032b: clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000446866: clc; sub rax, rdx; vzeroupper; ret; 
0x000000000041fb34: clc; xor byte ptr [rdx], cl; add al, ch; ret; 
0x0000000000486d18: clc; xor rax, qword ptr fs:[0x28]; jne 0x86da5; leave; ret; 
0x00000000004908c2: clc; leave; ret; 
0x0000000000420676: clc; ret; 
0x0000000000484301: clc; std; jbe 0x84310; ret; 
0x000000000046248b: clc; std; je 0x624a8; pop rbx; ret; 
0x0000000000431396: clc; vzeroupper; ret; 
0x000000000044e89b: cld; add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; ret; 
0x000000000044e880: cld; add eax, dword ptr [rax]; ret; 
0x000000000044ca31: cld; cmp eax, ecx; jne 0x4cc40; xor eax, eax; ret; 
0x00000000004327c6: cld; cmp ecx, eax; jne 0x331df; xor eax, eax; ret; 
0x0000000000458f42: cld; dec dword ptr [rax - 0x77]; ret; 
0x0000000000493205: cld; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000482691: cld; inc dword ptr [rbp + 0x481975c0]; mov dword ptr [rbx], 0; pop rbx; or dword ptr [rip + 0x3ea62], 1; ret; 
0x000000000044e97a: cld; inc dword ptr [rbx]; div ecx; mov eax, eax; ret; 
0x000000000044e8cb: cld; inc dword ptr [rbx]; ret; 
0x0000000000489f41: cld; inc edi; sbb byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004645b4: cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000481c71: cld; jmp qword ptr [rsi + 0x66]; 
0x0000000000462b48: cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000435442: cld; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435645: cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435845: cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435a45: cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000044e45a: cld; mov dword ptr [rdi], ecx; ret; 
0x000000000044e5dc: cld; mov dword ptr [rdi], ecx; vzeroupper; ret; 
0x000000000043df62: cld; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000044d6dc: cld; mov dword ptr [rdi], esi; ret; 
0x00000000004327c3: cld; mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x331df; xor eax, eax; ret; 
0x000000000044ca2e: cld; mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x4cc40; xor eax, eax; ret; 
0x0000000000432a25: cld; mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x331df; xor eax, eax; ret; 
0x000000000044d6d6: cld; mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x0000000000434e7a: cld; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043505a: cld; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043523a: cld; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043541a: cld; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043503e: cld; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043521e: cld; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004353fe: cld; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435076: cld; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043a736: cld; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435256: cld; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043a6b6: cld; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435436: cld; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043a636: cld; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434e96: cld; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043a7b6: cld; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000047dd80: cld; push rdx; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000043e0d1: cld; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000043de97: cld; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043e393: cld; vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000044d36f: cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000434d21: cld; ret; 
0x000000000044df76: cld; vzeroupper; ret; 
0x0000000000476a7b: cli; add al, 0x4c; cmovne eax, eax; mov rax, r8; ret; 
0x000000000044e440: cli; add al, 0x73; adc eax, dword ptr [rax + 0x157701fa]; jb 0x4e44d; mov byte ptr [rdi], cl; ret; 
0x000000000041966c: cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x000000000044d3f2: cli; add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000044e445: cli; add dword ptr [rdi + 0x15], esi; jb 0x4e44d; mov byte ptr [rdi], cl; ret; 
0x000000000044d6b6: cli; add dword ptr [rdi + 0x26], esi; jb 0x4d6c1; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000044e5b3: cli; add dword ptr [rdi + 0x2c], esi; jb 0x4e5bb; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000044e77b: cli; add dword ptr [rdi + 0x3a], esi; jb 0x4e783; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000044da26: cli; add dword ptr [rdi + 0x3b], esi; jb 0x4da31; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000044de76: cli; add dword ptr [rdi + 0x53], esi; jb 0x4de81; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000044d3ff: cli; add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x000000000043df80: cli; add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000045cc84: cli; add ecx, dword ptr [rdi]; xchg dword ptr [rax + 0x39480000], esp; ret; 
0x000000000044fcc0: cli; add ecx, dword ptr [rdi]; xchg esi, eax; ret 0xc085; 
0x000000000044fd14: cli; add ecx, dword ptr [rdi]; xchg esi, eax; ret 0xd284; 
0x000000000048ba09: cli; add r8d, dword ptr [rax]; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x290f; 
0x0000000000477714: cli; add rsp, 8; pop rbp; pop r12; ret; 
0x00000000004645b2: cli; and bh, ah; jmp qword ptr [rsi + 0x2e]; 
0x000000000044e3a4: cli; and byte ptr [rdi + 0xb], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000044e334: cli; and byte ptr [rdi], cl; xchg dword ptr [rax - 0xd000000], eax; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000044d3bb: cli; and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000413e14: cli; call qword ptr [rax + 0x38]; 
0x0000000000481d83: cli; cmp byte ptr [rip + 0x4199d], 0; jne 0x81da0; mov r8, qword ptr [rip + 0x4157c]; mov rax, r8; ret; 
0x000000000041ebd3: cli; cmp qword ptr [rdi + 0x38], 0; je 0x1ebe0; ret; 
0x000000000041b0f3: cli; cmp qword ptr [rip + 0xa4ea4], 0; je 0x1b0ff; ret; 
0x000000000041c6a0: cli; cmp r13, rdx; jbe 0x1c850; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x0000000000487c13: cli; cmp rdx, 0x7fffffff; mov eax, 0x7fffffff; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x00000000004823ad: cli; dec dword ptr [rax - 0x77]; or byte ptr [r8 - 0x77], cl; ret 0x8548; 
0x000000000047aff8: cli; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000048344c: cli; dec dword ptr [rax - 0x77]; ret; 
0x0000000000487931: cli; dec dword ptr [rax - 0x7b]; sal byte ptr [rax + rcx + 0x5b], 0x5d; pop r12; ret; 
0x000000000045f0e3: cli; dec dword ptr [rbp - 0x77]; ret; 
0x0000000000481ec6: cli; dec dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop rbp; pop r12; ret; 
0x00000000004607f5: cli; dec dword ptr [rcx - 0x77]; dec dword ptr [rbp - 0x77]; ret 0x87e9; 
0x000000000047ced5: cli; dec dword ptr [rcx - 0x77]; ret; 
0x0000000000480b4f: cli; dec dword ptr [rdi]; test bl, ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000044e89f: cli; inc dword ptr [rax]; add byte ptr [rax], al; cmove rax, rcx; ret; 
0x000000000045b5c3: cli; inc dword ptr [rcx - 0x77]; ret 0xcde9; 
0x000000000044e4fc: cli; ja 0x4e50e; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000044e4ac: cli; ja 0x4e517; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000044d3a8: cli; jb 0x4d3ba; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043df3b: cli; jg 0x3df45; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000446f6b: cli; jg 0x46f85; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x000000000044b1ab: cli; jg 0x4b1c5; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000044d3ca: cli; jg 0x4d3d4; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000044da3d: cli; jg 0x4da47; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000044dea5: cli; jg 0x4deaf; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000044e5c6: cli; jg 0x4e5d0; vzeroupper; ret; 
0x000000000044e79c: cli; jg 0x4e7a6; vzeroupper; ret; 
0x0000000000457450: cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000457a08: cli; jmp qword ptr [rsi + 0x48]; 
0x0000000000457ee0: cli; jmp qword ptr [rsi + 0x49]; 
0x0000000000458b50: cli; jmp qword ptr [rsi + 0x66]; 
0x0000000000455e88: cli; jmp qword ptr [rsi + 0xf]; 
0x000000000045823c: cli; jmp qword ptr [rsi - 0x70]; 
0x0000000000426246: cli; jne 0x2622f; test r8b, r8b; jne 0x26259; mov dword ptr [rip + 0x9ca48], 0; ret; 
0x00000000004836d9: cli; jp 0x83750; adc ecx, dword ptr [rdi]; mov dh, 0x45; add cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000455e93: cli; lea rax, [rip + 0x6b385]; ret; 
0x0000000000435848: cli; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004509d3: cli; mov eax, 0x18; syscall; 
0x00000000004509d3: cli; mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x509e4; ret; 
0x0000000000451ad3: cli; mov eax, 0x1c; syscall; 
0x0000000000451ad3: cli; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x51ae4; ret; 
0x000000000048ba83: cli; mov eax, 0x26; syscall; 
0x000000000048ba83: cli; mov eax, 0x26; syscall; cmp rax, -0xfff; jae 0x8ba94; ret; 
0x0000000000487c53: cli; mov eax, 0x27; syscall; 
0x0000000000487c53: cli; mov eax, 0x27; syscall; ret; 
0x0000000000477e13: cli; mov eax, 0x3f; syscall; 
0x0000000000477e13: cli; mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0x77e24; ret; 
0x0000000000454263: cli; mov eax, 0x63; syscall; 
0x0000000000454263: cli; mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x54274; ret; 
0x0000000000477e43: cli; mov eax, 0x66; syscall; 
0x0000000000477e43: cli; mov eax, 0x66; syscall; ret; 
0x0000000000477e63: cli; mov eax, 0x68; syscall; 
0x0000000000477e63: cli; mov eax, 0x68; syscall; ret; 
0x0000000000477e53: cli; mov eax, 0x6b; syscall; 
0x0000000000477e53: cli; mov eax, 0x6b; syscall; ret; 
0x0000000000477e73: cli; mov eax, 0x6c; syscall; 
0x0000000000477e73: cli; mov eax, 0x6c; syscall; ret; 
0x0000000000451aa3: cli; mov eax, 0xa; syscall; 
0x0000000000451aa3: cli; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x51ab4; ret; 
0x0000000000451a73: cli; mov eax, 0xb; syscall; 
0x0000000000451a73: cli; mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x51a84; ret; 
0x0000000000478063: cli; mov eax, 0xc; syscall; 
0x000000000041ec93: cli; mov eax, 0xffffffff; ret; 
0x0000000000451823: cli; mov eax, 1; syscall; 
0x0000000000451823: cli; mov eax, 1; syscall; cmp rax, -0x1000; ja 0x51838; ret; 
0x0000000000451533: cli; mov eax, 3; syscall; 
0x0000000000451533: cli; mov eax, 3; syscall; cmp rax, -0x1000; ja 0x51548; ret; 
0x0000000000450d93: cli; mov eax, 8; syscall; 
0x0000000000450d93: cli; mov eax, 8; syscall; cmp rax, -0x1000; ja 0x50da8; ret; 
0x00000000004202f3: cli; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000492653: cli; mov eax, dword ptr [rdi]; test eax, eax; jne 0x92660; ret; 
0x0000000000492893: cli; mov eax, dword ptr [rdi]; test eax, eax; jne 0x928a0; ret; 
0x0000000000487ea3: cli; mov eax, dword ptr [rip + 0x3b97e]; ret; 
0x0000000000455ea3: cli; mov eax, dword ptr [rip + 0x6d9e6]; test eax, eax; je 0x55eb0; ret; 
0x00000000004541b3: cli; mov eax, dword ptr [rip + 0x6f66e]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000450c53: cli; mov eax, dword ptr fs:[0x18]; test eax, eax; jne 0x50c70; syscall; 
0x0000000000435842: cli; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000490593: cli; mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000487c63: cli; mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000000454233: cli; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000000464d13: cli; mov rax, 0xffffffffffffffb0; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000004826b3: cli; mov rax, 0xffffffffffffffc0; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x0000000000464d73: cli; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x0000000000464d53: cli; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x0000000000464d33: cli; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x000000000041f713: cli; mov rax, 0xffffffffffffffff; ret; 
0x0000000000484343: cli; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x0000000000484333: cli; mov rax, qword ptr [rax + 8]; ret; 
0x0000000000421093: cli; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000420663: cli; mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000004904f3: cli; mov rax, qword ptr [rdi + 0x90]; ret; 
0x0000000000490563: cli; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000474953: cli; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x74968; ret; 
0x00000000004905a3: cli; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x0000000000490603: cli; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x00000000004905f3: cli; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x00000000004905b3: cli; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x0000000000421503: cli; mov rax, qword ptr [rdi]; cmp rax, 0x2000000; jbe 0x21510; ret; 
0x0000000000421163: cli; mov rax, qword ptr [rdi]; cmp rax, 0x408; jbe 0x21170; ret; 
0x0000000000421563: cli; mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0x21570; ret; 
0x00000000004211a3: cli; mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0x211b0; ret; 
0x000000000048ac93: cli; mov rax, qword ptr [rdi]; cmp rax, rsi; je 0x8aca0; ret; 
0x0000000000421533: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x9f1f2], 1; mov dword ptr [rip + 0x9f1e4], eax; ret; 
0x00000000004214e3: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x9f242], 1; mov qword ptr [rip + 0x9f20f], rax; ret; 
0x00000000004214c3: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x9f262], 1; mov qword ptr [rip + 0x9f227], rax; ret; 
0x0000000000421553: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa1756], eax; ret; 
0x00000000004211c3: cli; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x9f599], rax; ret; 
0x0000000000421153: cli; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x9f5b9], rax; ret; 
0x0000000000421143: cli; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x9f5d1], rax; ret; 
0x0000000000481df3: cli; mov rax, qword ptr [rip + 0x3e2f5]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x41503]; mov qword ptr [rsi], rax; ret; 
0x0000000000461c83: cli; mov rax, qword ptr [rip + 0x61165]; ret; 
0x00000000004581a3: cli; mov rax, qword ptr [rip + 0x6b6fd]; ret; 
0x0000000000451933: cli; mov rax, qword ptr [rip + 0x6f7dd]; test rax, rax; je 0x51941; ret; 
0x0000000000420643: cli; mov rax, qword ptr [rip + 0x9fad5]; ret; 
0x0000000000420673: cli; mov rax, rdi; ret; 
0x0000000000466e81: cli; mov rdi, rax; cmp rdx, rcx; jae 0x66e6c; mov rax, r8; ret; 
0x0000000000492431: cli; mov rsi, qword ptr [r12 + r14*8 + 0x10]; mov rdi, r13; call rax; 
0x00000000004144c0: cli; mov rsi, r11; mov rdi, r12; call qword ptr [rcx + 0x38]; 
0x00000000004156b0: cli; mov rsi, r11; mov rdi, r12; mov dword ptr [rbp - 0x508], r10d; mov qword ptr [rbp - 0x500], r11; call qword ptr [rax + 0x38]; 
0x000000000041c33f: cli; mov rsi, r14; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004142e1: cli; mov rsi, r8; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000456e82: cli; movabs byte ptr [0x488d48e68948fffa], al; sbb cl, byte ptr [rax - 0x77]; ret 0x8948; 
0x00000000004598d3: cli; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000004314e9: cli; movzx edx, dl; sub eax, edx; ret; 
0x0000000000430056: cli; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044d3d4: cli; or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000420648: cli; or dword ptr [rax], eax; ret; 
0x000000000044e376: cli; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000040649a: cli; ret 0xb; 
0x0000000000401c94: cli; sbb eax, 0xe8670040; xor al, byte ptr [rip - 0x6f0c0000]; endbr64; ret; 
0x00000000004210f3: cli; setae al; ret; 
0x000000000046274b: cli; sub al, 0xf; xchg esp, eax; ret 0xd108; 
0x0000000000494d17: cli; sub rsp, 8; add rsp, 8; ret; 
0x0000000000462463: cli; test esi, esi; je 0x62470; cmp esi, 3; je 0x62470; ret; 
0x0000000000446469: cli; test rdx, rdx; je 0x46480; bsf rax, rdx; ret; 
0x000000000044640c: cli; test rdx, rdx; je 0x46490; bsf rax, rdx; ret; 
0x0000000000446638: cli; test rdx, rdx; je 0x46660; bsf rax, rdx; ret; 
0x00000000004465c8: cli; test rdx, rdx; je 0x46670; bsf rax, rdx; ret; 
0x000000000044ffc8: cli; test rdx, rdx; je 0x4fff0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000044ff5c: cli; test rdx, rdx; je 0x50000; bsf rax, rdx; shr rax, 2; ret; 
0x000000000044e363: cli; test rdx, rdx; jne 0x4e36d; mov rax, rdi; ret; 
0x0000000000446533: cli; test rsi, rsi; jne 0x4653d; xor rax, rax; ret; 
0x000000000044fec3: cli; test rsi, rsi; jne 0x4fecd; xor rax, rax; ret; 
0x000000000043e3a1: cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000041cf73: cli; xor eax, eax; test rdx, rdx; jne 0x1cf80; ret; 
0x000000000041f693: cli; xor eax, eax; ret; 
0x00000000004517f3: cli; xor eax, eax; syscall; 
0x00000000004517f3: cli; xor eax, eax; syscall; cmp rax, -0x1000; ja 0x51808; ret; 
0x0000000000401ca3: cli; ret; 
0x000000000041d4f7: cmc; add dword ptr [rax], eax; add byte ptr [rdi + rcx - 0x42], cl; ret 0x4a8d; 
0x0000000000477461: cmc; and ch, 0xf; je 0x77480; add rax, 2; ret; 
0x000000000043a6ba: cmc; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004350ce: cmc; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043a6b3: cmc; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435237: cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435253: cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000044c773: cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x00000000004530e3: cmc; or byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x44], cl; and al, 8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000042114c: cmc; or dword ptr [rax], eax; ret; 
0x000000000044c777: cmc; sub eax, edx; ret; 
0x0000000000484fc1: cmc; cld; jmp qword ptr [rsi + 0x66]; 
0x0000000000485037: cmc; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000048d8a2: cwde; add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x00000000004901a0: cwde; add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000048bf1c: cwde; js 0x8bf22; add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x00000000004141b3: cwde; movzx eax, byte ptr [rbx + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000415049: cwde; movzx ecx, byte ptr [rbx + rax]; lea rax, [rip + 0xa81cb]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x0000000000414599: cwde; movzx ecx, byte ptr [rbx + rax]; lea rax, [rip + 0xa8e7b]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x00000000004223e8: cwde; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000477711: endbr64; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000481d80: endbr64; cmp byte ptr [rip + 0x4199d], 0; jne 0x81da0; mov r8, qword ptr [rip + 0x4157c]; mov rax, r8; ret; 
0x000000000041ebd0: endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x1ebe0; ret; 
0x000000000041b0f0: endbr64; cmp qword ptr [rip + 0xa4ea4], 0; je 0x1b0ff; ret; 
0x0000000000487c10: endbr64; cmp rdx, 0x7fffffff; mov eax, 0x7fffffff; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x0000000000455e90: endbr64; lea rax, [rip + 0x6b385]; ret; 
0x00000000004509d0: endbr64; mov eax, 0x18; syscall; 
0x00000000004509d0: endbr64; mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x509e4; ret; 
0x0000000000451ad0: endbr64; mov eax, 0x1c; syscall; 
0x0000000000451ad0: endbr64; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x51ae4; ret; 
0x000000000048ba80: endbr64; mov eax, 0x26; syscall; 
0x000000000048ba80: endbr64; mov eax, 0x26; syscall; cmp rax, -0xfff; jae 0x8ba94; ret; 
0x0000000000487c50: endbr64; mov eax, 0x27; syscall; 
0x0000000000487c50: endbr64; mov eax, 0x27; syscall; ret; 
0x0000000000477e10: endbr64; mov eax, 0x3f; syscall; 
0x0000000000477e10: endbr64; mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0x77e24; ret; 
0x0000000000454260: endbr64; mov eax, 0x63; syscall; 
0x0000000000454260: endbr64; mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x54274; ret; 
0x0000000000477e40: endbr64; mov eax, 0x66; syscall; 
0x0000000000477e40: endbr64; mov eax, 0x66; syscall; ret; 
0x0000000000477e60: endbr64; mov eax, 0x68; syscall; 
0x0000000000477e60: endbr64; mov eax, 0x68; syscall; ret; 
0x0000000000477e50: endbr64; mov eax, 0x6b; syscall; 
0x0000000000477e50: endbr64; mov eax, 0x6b; syscall; ret; 
0x0000000000477e70: endbr64; mov eax, 0x6c; syscall; 
0x0000000000477e70: endbr64; mov eax, 0x6c; syscall; ret; 
0x0000000000451aa0: endbr64; mov eax, 0xa; syscall; 
0x0000000000451aa0: endbr64; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x51ab4; ret; 
0x0000000000451a70: endbr64; mov eax, 0xb; syscall; 
0x0000000000451a70: endbr64; mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x51a84; ret; 
0x0000000000478060: endbr64; mov eax, 0xc; syscall; 
0x000000000041ec90: endbr64; mov eax, 0xffffffff; ret; 
0x0000000000451820: endbr64; mov eax, 1; syscall; 
0x0000000000451820: endbr64; mov eax, 1; syscall; cmp rax, -0x1000; ja 0x51838; ret; 
0x0000000000451530: endbr64; mov eax, 3; syscall; 
0x0000000000451530: endbr64; mov eax, 3; syscall; cmp rax, -0x1000; ja 0x51548; ret; 
0x0000000000450d90: endbr64; mov eax, 8; syscall; 
0x0000000000450d90: endbr64; mov eax, 8; syscall; cmp rax, -0x1000; ja 0x50da8; ret; 
0x00000000004202f0: endbr64; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000492650: endbr64; mov eax, dword ptr [rdi]; test eax, eax; jne 0x92660; ret; 
0x0000000000492890: endbr64; mov eax, dword ptr [rdi]; test eax, eax; jne 0x928a0; ret; 
0x0000000000487ea0: endbr64; mov eax, dword ptr [rip + 0x3b97e]; ret; 
0x0000000000455ea0: endbr64; mov eax, dword ptr [rip + 0x6d9e6]; test eax, eax; je 0x55eb0; ret; 
0x00000000004541b0: endbr64; mov eax, dword ptr [rip + 0x6f66e]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000450c50: endbr64; mov eax, dword ptr fs:[0x18]; test eax, eax; jne 0x50c70; syscall; 
0x0000000000490590: endbr64; mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000487c60: endbr64; mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000000454230: endbr64; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000000464d10: endbr64; mov rax, 0xffffffffffffffb0; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000004826b0: endbr64; mov rax, 0xffffffffffffffc0; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x0000000000464d70: endbr64; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x0000000000464d50: endbr64; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x0000000000464d30: endbr64; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x000000000041f710: endbr64; mov rax, 0xffffffffffffffff; ret; 
0x0000000000484340: endbr64; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x0000000000484330: endbr64; mov rax, qword ptr [rax + 8]; ret; 
0x0000000000421090: endbr64; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000420660: endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000004904f0: endbr64; mov rax, qword ptr [rdi + 0x90]; ret; 
0x0000000000490560: endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000474950: endbr64; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x74968; ret; 
0x00000000004905a0: endbr64; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x0000000000490600: endbr64; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x00000000004905f0: endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x00000000004905b0: endbr64; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x0000000000421500: endbr64; mov rax, qword ptr [rdi]; cmp rax, 0x2000000; jbe 0x21510; ret; 
0x0000000000421160: endbr64; mov rax, qword ptr [rdi]; cmp rax, 0x408; jbe 0x21170; ret; 
0x0000000000421560: endbr64; mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0x21570; ret; 
0x00000000004211a0: endbr64; mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0x211b0; ret; 
0x000000000048ac90: endbr64; mov rax, qword ptr [rdi]; cmp rax, rsi; je 0x8aca0; ret; 
0x0000000000421530: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x9f1f2], 1; mov dword ptr [rip + 0x9f1e4], eax; ret; 
0x00000000004214e0: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x9f242], 1; mov qword ptr [rip + 0x9f20f], rax; ret; 
0x00000000004214c0: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x9f262], 1; mov qword ptr [rip + 0x9f227], rax; ret; 
0x0000000000421550: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa1756], eax; ret; 
0x00000000004211c0: endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x9f599], rax; ret; 
0x0000000000421150: endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x9f5b9], rax; ret; 
0x0000000000421140: endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x9f5d1], rax; ret; 
0x0000000000481df0: endbr64; mov rax, qword ptr [rip + 0x3e2f5]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x41503]; mov qword ptr [rsi], rax; ret; 
0x0000000000461c80: endbr64; mov rax, qword ptr [rip + 0x61165]; ret; 
0x00000000004581a0: endbr64; mov rax, qword ptr [rip + 0x6b6fd]; ret; 
0x0000000000451930: endbr64; mov rax, qword ptr [rip + 0x6f7dd]; test rax, rax; je 0x51941; ret; 
0x0000000000420640: endbr64; mov rax, qword ptr [rip + 0x9fad5]; ret; 
0x0000000000420670: endbr64; mov rax, rdi; ret; 
0x00000000004598d0: endbr64; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000494d14: endbr64; sub rsp, 8; add rsp, 8; ret; 
0x0000000000462460: endbr64; test esi, esi; je 0x62470; cmp esi, 3; je 0x62470; ret; 
0x000000000044e360: endbr64; test rdx, rdx; jne 0x4e36d; mov rax, rdi; ret; 
0x0000000000446530: endbr64; test rsi, rsi; jne 0x4653d; xor rax, rax; ret; 
0x000000000044fec0: endbr64; test rsi, rsi; jne 0x4fecd; xor rax, rax; ret; 
0x000000000041cf70: endbr64; xor eax, eax; test rdx, rdx; jne 0x1cf80; ret; 
0x000000000041f690: endbr64; xor eax, eax; ret; 
0x00000000004517f0: endbr64; xor eax, eax; syscall; 
0x00000000004517f0: endbr64; xor eax, eax; syscall; cmp rax, -0x1000; ja 0x51808; ret; 
0x0000000000401ca0: endbr64; ret; 
0x0000000000483817: fincstp; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000048b651: fldpi; adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000486e01: fldpi; sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000473d8e: fprem; jmp qword ptr [rsi + 0x2e]; 
0x0000000000492435: hlt; adc byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x000000000045ce62: hlt; add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; ret 0x860f; 
0x0000000000487cd8: hlt; mov bl, 3; add byte ptr [rbx + 0xc], dh; mov rdx, qword ptr [rip + 0x3b3f3]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000043a63a: hlt; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004352be: hlt; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043a633: hlt; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000045049e: hlt; mov edi, edx; mov eax, r8d; syscall; 
0x0000000000435417: hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000435433: hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000487bdb: hlt; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000044c763: hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x0000000000412259: hlt; or byte ptr [rax], al; add byte ptr [rcx - 0x7d], al; in al, dx; add dword ptr [rax - 0x8ff43], eax; jmp qword ptr [rax]; 
0x000000000044c767: hlt; sub eax, edx; ret; 
0x0000000000401c9e: hlt; nop; endbr64; ret; 
0x000000000045c23d: int1; add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; ret 0x860f; 
0x000000000046a266: int1; add r8d, eax; mov eax, r8d; ret; 
0x000000000042b408: int1; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000043e4f5: int1; dec byte ptr [rax + 0x6f]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x000000000044e146: int1; dec byte ptr [rax + 0x7f]; jg 0x4e14f; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x000000000044e2d0: int1; dec byte ptr [rax + 0x7f]; jg 0x4e2d9; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x000000000044df70: int1; dec byte ptr [rax + 0x7f]; jl 0x4df8d; cld; vzeroupper; ret; 
0x000000000041f83b: int1; ja 0x1f830; lea eax, [rdx + rdi]; ret; 
0x000000000043ded5: int1; jl 0x3df20; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000044d371: int1; jl 0x4d3bc; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000044d378: int1; jl 0x4d3c3; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000044d37f: int1; jl 0x4d3ca; adc dword ptr [rsi - 1], edx; ret; 
0x000000000044d392: int1; jl 0x4d3dd; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000044d399: int1; jl 0x4d3e4; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000044d3a0: int1; jl 0x4d3eb; adc dword ptr [rsi - 1], edx; ret; 
0x000000000044d3ad: int1; jl 0x4d3f8; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000044d3b3: int1; jl 0x4d3fe; adc dword ptr [rsi - 1], edx; ret; 
0x000000000044d47a: int1; jl 0x4d4c5; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000044d481: int1; jl 0x4d4cc; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000044d488: int1; jl 0x4d4d3; adc dword ptr [rsi - 1], edx; ret; 
0x000000000044d4d2: int1; jl 0x4d51d; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000044d4d9: int1; jl 0x4d524; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000044d4e0: int1; jl 0x4d52b; adc dword ptr [rsi + 3], edx; ret; 
0x000000000044d56f: int1; jl 0x4d5ba; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000044d576: int1; jl 0x4d5c1; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000044d57d: int1; jl 0x4d5c8; adc dword ptr [rsi + 7], edx; ret; 
0x000000000044b1b3: int1; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000044e97e: int1; mov eax, eax; ret; 
0x000000000049087d: int1; mov esi, 1; mov edi, 1; call rax; 
0x000000000043a48b: int1; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043588f: int1; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000049045b: int1; mov r8, r13; mov rcx, r12; mov esi, 0x1a; mov edi, 1; call rax; 
0x00000000004903de: int1; mov r8, r13; mov rcx, r12; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000043a483: int1; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000435a07: int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000435a23: int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000044fc4f: int1; mov rsi, qword ptr [rsp + 0x18]; mov rcx, r12; mov rdx, r13; call rbx; 
0x0000000000457344: int1; mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; call rbx; 
0x000000000044c733: int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000042153b: int1; or dword ptr [rax], eax; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x9f1e4], eax; ret; 
0x000000000042151f: int1; or dword ptr [rax], eax; ret; 
0x0000000000445acb: int1; pop rsi; add eax, 0x91148b00; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000048231e: int1; shl rcx, 4; cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x822d5; xor eax, eax; ret; 
0x000000000044c737: int1; sub eax, edx; ret; 
0x0000000000431941: int1; sub rax, rcx; je 0x31950; sbb eax, eax; or eax, 1; ret; 
0x000000000048b5e0: int1; sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x8b5d0; mov eax, 1; ret; 
0x000000000044b1a9: int1; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000446f69: int1; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x0000000000401428: int1; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000476c6e: int1; ret; 
0x0000000000463f67: int1; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000446f73: int1; vzeroupper; ret; 
0x00000000004448dd: iretd; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000470de3: iretd; add al, 0; mov dword ptr [rbp - 0x530], 1; mov dword ptr [rbp - 0x4e8], 0; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000401d4c: iretd; add al, 0xc; add byte ptr [rcx], al; pop rbp; ret; 
0x0000000000429b0d: iretd; add al, byte ptr [r8]; cmove rax, rdx; ret; 
0x00000000004766b3: iretd; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000046a252: iretd; ja 0x6a238; mov eax, r8d; ret; 
0x000000000044d69e: iretd; jb 0x4d808; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044da09: iretd; jb 0x4dbd5; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044de54: iretd; jb 0x4e090; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000042b4d2: iretd; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042c936: iretd; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000487fe3: iretd; nop dword ptr [rax]; call rax; 
0x000000000047049d: iretd; or eax, dword ptr [rax]; add byte ptr [rcx - 0x77], cl; ret 0xb8; 
0x000000000049116d: iretd; nop; xor eax, eax; ret; 
0x000000000044520d: lahf; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000428dce: lahf; or dword ptr [rax], eax; lea rax, [rip + 0x1cd57]; lea rdx, [rip + 0x22400]; cmovne rax, rdx; ret; 
0x0000000000420cb8: lahf; ret 0x3949; 
0x0000000000420d52: lahf; ret 0x61e9; 
0x000000000048fbb6: lahf; ret 0xf45; 
0x0000000000451ebb: lahf; vpaddsw ymm0, ymm15, ymmword ptr [rcx + 0xf]; lahf; ret; 
0x00000000004123bd: lahf; ret; 
0x0000000000463222: leave; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x000000000044d264: leave; add rax, rcx; sub rax, rdi; ret; 
0x0000000000477736: leave; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000481178: leave; cmove r8, rax; mov rax, r8; ret; 
0x00000000004835b3: leave; fcomi st(7); dec dword ptr [rax + 1]; ret; 
0x000000000041a9ab: leave; jne 0x1a9c0; mov eax, dword ptr [rdx + 0x4c]; cmp dword ptr [rdx + 0x48], eax; cmovne eax, ecx; ret; 
0x000000000044cd60: leave; jne 0x4cd50; ret; 
0x000000000044ce10: leave; jne 0x4ce00; ret; 
0x000000000044d0d0: leave; jne 0x4d0c0; sub rax, 1; ret; 
0x000000000047eb52: leave; jne 0x7eb57; call rax; 
0x000000000047f524: leave; jne 0x7f537; mov qword ptr [rbp - 0xd8], r11; call rax; 
0x00000000004299e7: leave; lea rax, [rip + 0x7e01]; test byte ptr [rip + 0x9938f], 1; je 0x299b1; ret; 
0x000000000043196f: leave; mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x000000000046fcd0: leave; mov dword ptr [rbp - 0x4d0], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004782ff: leave; mov eax, 1; ret; 
0x0000000000487213: leave; mov ebp, 0x89480003; add eax, 0x3bdaa; ret; 
0x0000000000424ad3: leave; mov esp, 0x39480009; ret; 
0x000000000042b40c: leave; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000491106: leave; nop word ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000406fa2: leave; pop rbx; pop rbp; mov rax, r9; pop r12; ret; 
0x00000000004782bf: leave; xor eax, eax; ret; 
0x00000000004573b7: leave; xor edx, edx; movzx eax, al; add eax, 1; push rax; call rbx; 
0x0000000000401e48: leave; ret; 
0x0000000000402404: nop; add al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret; 
0x000000000041c509: nop; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c43226f; ret; 
0x000000000043a2e7: nop; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x0000000000418e39: nop; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x0000000000431f0e: nop; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004428d0: nop; add eax, 0x8a0c8b00; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000048a6bd: nop; add eax, dword ptr [rax]; jne 0x8a6c8; ret; 
0x00000000004925df: nop; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004761bf: nop; bsf eax, eax; sub rdx, rax; jbe 0x761e0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004761cf: nop; bsf eax, eax; sub rdx, rax; jbe 0x761e0; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000476f6f: nop; bsf eax, eax; sub rdx, rax; jbe 0x76f90; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000476f7f: nop; bsf eax, eax; sub rdx, rax; jbe 0x76f90; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000457d91: nop; call 0x55f00; mov rsi, qword ptr [rbp - 0x70]; mov rdi, rbx; call rsi; 
0x000000000048dbdf: nop; call rax; 
0x0000000000489841: nop; in al, dx; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ror dword ptr [rax], 0x83; ret 0x4801; 
0x00000000004850c1: nop; jmp rdx; 
0x000000000044b42f: nop; lea rax, [rdi + 1]; ret; 
0x000000000044b41f: nop; lea rax, [rdi]; ret; 
0x0000000000449fcf: nop; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x000000000047745f: nop; mov ch, dh; and ch, 0xf; je 0x77480; add rax, 2; ret; 
0x0000000000434e9f: nop; mov dl, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000047dd55: nop; mov dword ptr [rdi + 0x2f4], edx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000047dd23: nop; mov dword ptr [rdi + 0x2fc], ecx; mov qword ptr [rdi + 0x310], rax; ret; 
0x0000000000421537: nop; mov dword ptr [rip + 0x9f1f2], 1; mov dword ptr [rip + 0x9f1e4], eax; ret; 
0x0000000000421510: nop; mov dword ptr [rip + 0x9f219], 1; mov qword ptr [rip + 0x9f1ee], rax; ret; 
0x00000000004214e7: nop; mov dword ptr [rip + 0x9f242], 1; mov qword ptr [rip + 0x9f20f], rax; ret; 
0x00000000004214c7: nop; mov dword ptr [rip + 0x9f262], 1; mov qword ptr [rip + 0x9f227], rax; ret; 
0x0000000000421557: nop; mov dword ptr [rip + 0xa1756], eax; ret; 
0x000000000043507f: nop; mov dx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000043525f: nop; mov dx, word ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000044a4af: nop; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000428bef: nop; mov eax, 0x16; ret; 
0x000000000043543f: nop; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000044aaff: nop; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x0000000000446f1f: nop; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; vzeroupper; ret; 
0x0000000000475407: nop; mov qword ptr [rax + 0x10], rdi; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x00000000004753d6: nop; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000041f66f: nop; mov qword ptr [rdi + 0xa0], 0xffffffffffffffff; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000004211c7: nop; mov qword ptr [rip + 0x9f599], rax; ret; 
0x00000000004211b0: nop; mov qword ptr [rip + 0x9f5a8], rax; ret; 
0x0000000000421157: nop; mov qword ptr [rip + 0x9f5b9], rax; ret; 
0x0000000000421147: nop; mov qword ptr [rip + 0x9f5d1], rax; ret; 
0x000000000042434f: nop; mov rax, 0xffffffffffffffc0; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x000000000047749f: nop; mov rax, 1; ret; 
0x000000000040f48f: nop; mov rax, qword ptr [rsp]; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000044a53f: nop; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000044a56f: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000044a57f: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000457d9a: nop; mov rdi, rbx; call rsi; 
0x0000000000450d5f: nop; mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000044ab4f: nop; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x000000000044a5df: nop; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000044a74f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000044a70f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000044a72f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000044ac2f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000044a58f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000464f00: nop; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x000000000047e22f: nop; or byte ptr [rdi + 0x31d], 4; xor eax, eax; ret; 
0x0000000000429d23: nop; or dword ptr [rax], eax; add dh, byte ptr [rdi + rax*2 - 0xa]; ret 0x7520; 
0x0000000000401df7: nop; pop rbp; ret; 
0x0000000000429d6f: nop; test byte ptr [rip + 0x98fbe], 2; lea rdx, [rip + 0x23822]; lea rax, [rip + 0x238db]; cmove rax, rdx; ret; 
0x00000000004313af: nop; tzcnt eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000044685f: nop; tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000004761df: nop; xor eax, eax; ret; 
0x0000000000421116: nop; xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x0000000000451acf: nop; endbr64; mov eax, 0x1c; syscall; 
0x0000000000477e0f: nop; endbr64; mov eax, 0x3f; syscall; 
0x0000000000477e3f: nop; endbr64; mov eax, 0x66; syscall; 
0x0000000000477e3f: nop; endbr64; mov eax, 0x66; syscall; ret; 
0x0000000000451a9f: nop; endbr64; mov eax, 0xa; syscall; 
0x0000000000451a6f: nop; endbr64; mov eax, 0xb; syscall; 
0x000000000041f70f: nop; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x00000000004904ef: nop; endbr64; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000047494f: nop; endbr64; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x74968; ret; 
0x000000000042155f: nop; endbr64; mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0x21570; ret; 
0x000000000042119f: nop; endbr64; mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0x211b0; ret; 
0x000000000044febf: nop; endbr64; test rsi, rsi; jne 0x4fecd; xor rax, rax; ret; 
0x000000000041cf6f: nop; endbr64; xor eax, eax; test rdx, rdx; jne 0x1cf80; ret; 
0x0000000000401c9f: nop; endbr64; ret; 
0x0000000000464eff: nop; nop; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000401ccf: nop; ret; 
0x000000000047644f: nop; vzeroupper; xor eax, eax; ret; 
0x00000000004502df: popfq; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper; ret; 
0x00000000004907e9: popfq; cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000047071f: popfq; fiadd dword ptr [rax + rax]; mov r11, rcx; mov dword ptr [rbp - 0x514], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000048627e: popfq; ret 0x3948; 
0x000000000048fba3: popfq; ret 0xf45; 
0x0000000000481d86: popfq; sbb dword ptr [rax + rax], eax; add byte ptr [rbp + 0x13], dh; mov r8, qword ptr [rip + 0x4157c]; mov rax, r8; ret; 
0x0000000000442e90: pushfq; adc eax, 0x83480000; ret 0xe910; 
0x000000000045e818: pushfq; add dword ptr [rax], eax; add byte ptr [rcx + 0x3948fc51], cl; ret; 
0x000000000041ed43: pushfq; and al, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0x1b60; 
0x0000000000443b90: pushfq; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042fdb4: pushfq; or eax, 0x83480000; ret 0xeb10; 
0x000000000048fc37: pushfq; ret 0xf45; 
0x00000000004574ff: pushfq; cli; jmp qword ptr [rsi + 0xf]; 
0x0000000000441413: ret; 
0x00000000004754c1: retf; add al, byte ptr [rcx + 0x39]; ret; 
0x000000000041c339: retf; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 6], cl; mov rsi, r14; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000478053: retf; call 0x545a0; nop dword ptr [rax]; endbr64; mov eax, 0xc; syscall; 
0x0000000000470dde: retf; lea rsi, [rip + 0x4cfda]; mov dword ptr [rbp - 0x530], 1; mov dword ptr [rbp - 0x4e8], 0; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470d16: retf; lea rsi, [rip + 0x4d4a2]; mov dword ptr [rbp - 0x4e0], 1; mov dword ptr [rbp - 0x4f0], 0x20; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470b4d: retf; mov dword ptr [rbp - 0x4d0], 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004708e5: retf; mov dword ptr [rbp - 0x4e8], 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x0000000000470d65: retf; mov dword ptr [rbp - 0x4f8], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470e6d: retf; mov dword ptr [rbp - 0x508], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470725: retf; mov dword ptr [rbp - 0x514], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000470e33: retf; mov dword ptr [rbp - 0x520], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004706a5: retf; mov dword ptr [rbp - 0x528], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000042619b: retf; or dword ptr [rax], eax; syscall; 
0x000000000042619b: retf; or dword ptr [rax], eax; syscall; pop rbx; ret; 
0x00000000004641b1: retf; out dx, al; stc; jmp qword ptr [rsi + 0x66]; 
0x0000000000459859: retf; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x000000000044feb1: retf; xor ebx, edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000046fccd: retf; xor r9d, r9d; mov dword ptr [rbp - 0x4d0], 1; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004505be: sahf; add al, 0; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000402cea: sahf; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x000000000046dbd2: sahf; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x00000000004289f6: sahf; nop word ptr [rax + rax]; mov rsi, r12; call rax; 
0x000000000044510e: sahf; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004868f0: sahf; ret 0x3948; 
0x0000000000465f3b: sahf; ret 0x3949; 
0x000000000048fc24: sahf; ret 0xf45; 
0x000000000044c87f: stc; adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x00000000004932d7: stc; add al, byte ptr [rax]; test rbx, rbx; jne 0x932c0; pop rbx; ret; 
0x000000000048ad44: stc; add cl, byte ptr [rdi]; xchg esp, eax; ret 0xfb83; 
0x000000000048d05e: stc; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; or byte ptr [rax + 3], cl; add byte ptr [r13 + 0x31], r8b; jmp qword ptr [rsi - 0x7d]; 
0x0000000000477ef4: stc; add dword ptr [rdi + 0x30], esi; mov eax, 0x106; syscall; 
0x0000000000466d5a: stc; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000046de93: stc; dec dword ptr [rax - 0x77]; ret 0xb848; 
0x000000000046efc5: stc; dec dword ptr [rax - 0x77]; ret 0xc9e9; 
0x000000000049325e: stc; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000464c84: stc; jmp qword ptr [rsi + 0x2e]; 
0x00000000004641b3: stc; jmp qword ptr [rsi + 0x66]; 
0x0000000000463f68: stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000468cee: stc; jmp qword ptr [rsi - 0x7f]; 
0x000000000044b18f: stc; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000435a48: stc; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435a42: stc; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000044b187: stc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000446f47: stc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x000000000042c95f: stc; movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000042c97f: stc; movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000045b3cb: stc; push rax; push rbp; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x60]; call rbx; 
0x000000000043e3a8: stc; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000446f4f: stc; vzeroupper; ret; 
0x00000000004319c7: stc; xlatb; ret 0xff2d; 
0x000000000046f94f: std; add cl, byte ptr [rcx + rcx*4 - 0x16]; call qword ptr [rax + 0x38]; 
0x0000000000420f4f: std; add dh, bh; dec dword ptr [rax - 0x77]; ret; 
0x00000000004534c1: std; add eax, 0x894c0000; and al, 8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000040f696: std; add r15, r12; call rax; 
0x0000000000428f07: std; call ptr [rdx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x0000000000477e0d: std; call qword ptr [rax - 0x5e1f00d]; mov eax, 0x3f; syscall; 
0x0000000000476a6d: std; dec dword ptr [rax + 0x21]; ret 0x8d48; 
0x0000000000484302: std; jbe 0x84310; ret; 
0x000000000046248c: std; je 0x624a8; pop rbx; ret; 
0x000000000044e10e: std; jg 0x4e15b; jmp qword ptr [rdx - 0x2f]; 
0x0000000000427da4: std; jmp qword ptr [rsi + 0x2e]; 
0x00000000004215e2: std; jmp qword ptr [rsi + 0x66]; 
0x0000000000477baf: std; jmp qword ptr [rsi + 0xf]; 
0x0000000000475a4c: std; jmp qword ptr [rsi - 0x70]; 
0x000000000044b16b: std; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000435263: std; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000044b167: std; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000446f37: std; mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x0000000000450e37: std; mov rdi, rbp; mov eax, 0x4f; syscall; 
0x000000000043526b: std; mov word ptr [rdi - 2], cx; ret; 
0x0000000000481c6f: std; out 0xfc, eax; jmp qword ptr [rsi + 0x66]; 
0x000000000044d63c: std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000004186ef: std; sub dword ptr [rax], eax; add bl, ch; ret; 
0x00000000004776db: std; sub rsp, 8; mov rax, qword ptr [rip + 0x483b1]; test rax, rax; je 0x77720; call rax; 
0x000000000046457b: std; test rax, rax; je 0x64583; call rax; 
0x000000000044e085: std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000044df6e: std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x000000000043e0d8: std; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000043de9e: std; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000044d376: std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446f3b: std; vzeroupper; ret; 
0x00000000004313c9: std; xlatb; ret 0xc085; 
0x0000000000431807: std; xlatb; ret 0xe883; 
0x00000000004767e8: std; xlatb; retf 0xfdc5; xlatb; ret; 
0x0000000000476844: std; xlatb; rol ch, cl; std; xlatb; ret; 
0x00000000004763ce: std; xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x00000000004313c1: std; xlatb; rol dword ptr [rbp - 0x3a378a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000446161: std; xlatb; rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x00000000004313d1: std; xlatb; ret; 
0x00000000004500f8: sti; dec dword ptr [rax - 0x77]; ret 0x2948; 
0x0000000000450527: sti; dec dword ptr [rax - 0x77]; ret; 
0x0000000000475e3a: sti; dec dword ptr [rcx - 0x77]; add byte ptr [r8 - 0x7b], r9b; sal byte ptr [rcx + riz*2 + 0x48], 3; add byte ptr [r8 - 0x77], r9b; ret 0x14eb; 
0x000000000044f0b2: sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000044e99f: sti; jmp qword ptr [rsi + 0x66]; 
0x000000000044f210: sti; jmp qword ptr [rsi + 0xf]; 
0x000000000046fbdc: sti; jmp qword ptr [rsi - 0x70]; 
0x0000000000435648: sti; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000435642: sti; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000482581: sti; or bh, al; jmp qword ptr [rsi + 0x2e]; 
0x000000000047496e: sti; test byte ptr [rdi], 2; jne 0x749e8; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x000000000043e39a: sti; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000047c3c1: sti; ret; 
0x00000000004215e1: sti; std; jmp qword ptr [rsi + 0x66]; 
0x00000000004012d3: syscall; 
0x0000000000450a78: syscall; cmp rax, -0x1000; ja 0x50a88; ret; 
0x0000000000450ad7: syscall; cmp rax, -0x1000; ja 0x50ae8; ret; 
0x0000000000450c60: syscall; cmp rax, -0x1000; ja 0x50cc0; ret; 
0x0000000000450d05: syscall; cmp rax, -0x1000; ja 0x50d60; ret; 
0x0000000000450d99: syscall; cmp rax, -0x1000; ja 0x50da8; ret; 
0x0000000000451539: syscall; cmp rax, -0x1000; ja 0x51548; ret; 
0x00000000004517f6: syscall; cmp rax, -0x1000; ja 0x51808; ret; 
0x0000000000451829: syscall; cmp rax, -0x1000; ja 0x51838; ret; 
0x0000000000451862: syscall; cmp rax, -0x1000; ja 0x51870; ret; 
0x00000000004519e4: syscall; cmp rax, -0x1000; ja 0x51a50; pop rbx; pop rbp; ret; 
0x0000000000477e98: syscall; cmp rax, -0x1000; ja 0x77ea8; ret; 
0x0000000000477efd: syscall; cmp rax, -0x1000; ja 0x77f10; ret; 
0x0000000000487c29: syscall; cmp rax, -0x1000; ja 0x87c38; ret; 
0x0000000000487c6c: syscall; cmp rax, -0x1000; ja 0x87c80; ret; 
0x00000000004509d9: syscall; cmp rax, -0xfff; jae 0x509e4; ret; 
0x0000000000451a79: syscall; cmp rax, -0xfff; jae 0x51a84; ret; 
0x0000000000451aa9: syscall; cmp rax, -0xfff; jae 0x51ab4; ret; 
0x0000000000451ad9: syscall; cmp rax, -0xfff; jae 0x51ae4; ret; 
0x000000000045423c: syscall; cmp rax, -0xfff; jae 0x54247; ret; 
0x0000000000454269: syscall; cmp rax, -0xfff; jae 0x54274; ret; 
0x0000000000477e19: syscall; cmp rax, -0xfff; jae 0x77e24; ret; 
0x000000000048ba89: syscall; cmp rax, -0xfff; jae 0x8ba94; ret; 
0x0000000000425032: syscall; pop rbp; ret; 
0x000000000042619e: syscall; pop rbx; ret; 
0x000000000041df74: syscall; ret; 
0x000000000042529c: sysret; add al, ch; in al, dx; ret 0xffff; 
0x000000000045329b: sysret; add byte ptr [rax], al; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x000000000044d635: ud0; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000431bfb: ud2; nop dword ptr [rax]; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000476450: vzeroupper; xor eax, eax; ret; 
0x000000000042c7c4: vzeroupper; ret; 
0x0000000000475f41: wait; add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x0000000000487621: wait; add eax, 0x8948fffa; ret; 
0x000000000048e216: wait; and edi, 0x20; je 0x8e22c; movss xmm0, dword ptr [rip + 0x227b4]; divss xmm0, dword ptr [rip + 0x227b0]; ret; 
0x0000000000456ae4: wait; ret 6; 
0x00000000004224a1: wait; xor dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; add eax, 0x9e2d4; ret; 
0x000000000046de91: wait; xor ecx, edi; dec dword ptr [rax - 0x77]; ret 0xb848; 
0x0000000000454d79: wait; ret; 
0x0000000000492353: xlatb; adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004755e5: xlatb; adc dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0xed0; cmove rax, rdx; ret; 
0x0000000000429116: xlatb; add dword ptr [rax], eax; lea rax, [rip + 0x1d410]; cmove rax, rdx; ret; 
0x0000000000466f08: xlatb; cmp rax, 9; ja 0x66ee0; mov rax, r8; ret; 
0x000000000041f057: xlatb; cmp rax, rdi; jbe 0x1f1d0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000044d62c: xlatb; jb 0x4d632; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000043a78b: xlatb; lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000450491: xlatb; mov eax, esi; syscall; 
0x00000000004504a0: xlatb; mov eax, r8d; syscall; 
0x0000000000476697: xlatb; ret 0x94c; 
0x000000000043113f: xlatb; ret 0xc085; 
0x000000000042b2f0: xlatb; ret 0xc148; 
0x0000000000431808: xlatb; ret 0xe883; 
0x00000000004463e8: xlatb; ret 0xf66; 
0x00000000004319c8: xlatb; ret 0xff2d; 
0x00000000004767e9: xlatb; retf 0xfdc5; xlatb; ret; 
0x0000000000431221: xlatb; rol byte ptr [rbp + 0x664975c0], 0xf; xlatb; ret 0xc085; 
0x0000000000476845: xlatb; rol ch, cl; std; xlatb; ret; 
0x00000000004763cf: xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x0000000000476153: xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x00000000004313c2: xlatb; rol dword ptr [rbp - 0x3a378a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000446162: xlatb; rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000476123: xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000446a96: xlatb; rol dword ptr [rbp - 0x5f7af040], 0; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x0000000000476392: xlatb; rol dword ptr [rbp - 0x6b7af040], 0; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x000000000044b24a: xlatb; ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000042b1d6: xlatb; sal bh, 1; ret 0x8000; 
0x000000000042b096: xlatb; sal bh, 1; ret 0xc000; 
0x000000000042af56: xlatb; sal bh, 1; ret 0xe000; 
0x000000000042ae16: xlatb; sal bh, 1; ret 0xf000; 
0x000000000042acd6: xlatb; sal bh, 1; ret 0xf800; 
0x000000000042ab96: xlatb; sal bh, 1; ret 0xfc00; 
0x000000000042aa56: xlatb; sal bh, 1; ret 0xfe00; 
0x000000000042a916: xlatb; sal bh, 1; ret 0xff00; 
0x000000000042a7d6: xlatb; sal bh, 1; ret 0xff80; 
0x000000000042a696: xlatb; sal bh, 1; ret 0xffc0; 
0x000000000042a556: xlatb; sal bh, 1; ret 0xffe0; 
0x000000000042a416: xlatb; sal bh, 1; ret 0xfff0; 
0x000000000042a2d6: xlatb; sal bh, 1; ret 0xfff8; 
0x000000000042a196: xlatb; sal bh, 1; ret 0xfffc; 
0x000000000042a056: xlatb; sal bh, 1; ret 0xfffe; 
0x000000000044b246: xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000476646: xlatb; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000476635: xlatb; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x0000000000428e35: xlatb; sldt word ptr [rax]; lea rdx, [rip + 0x26d0]; cmovne rax, rdx; ret; 
0x0000000000486da7: xlatb; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000041abd5: xlatb; ret; 
0x0000000000429115: xlatb; xlatb; add dword ptr [rax], eax; lea rax, [rip + 0x1d410]; cmove rax, rdx; ret; 

16936 gadgets found
➜  help 

